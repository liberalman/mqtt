// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Unittest.pb.h"
// @@protoc_insertion_point(imports)

@implementation UnittestRoot
static id<PBExtensionField> UnittestRoot_optionalInt32Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalInt64Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalUint32Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalUint64Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalSint32Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalSint64Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalFixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalFixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalSfixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalSfixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_optionalFloatExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalDoubleExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalBoolExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalStringExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalBytesExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalGroupExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalNestedMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalForeignMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalImportMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalNestedEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalForeignEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalImportEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalStringPieceExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalCordExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalPublicImportMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_optionalLazyMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedInt32Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedInt64Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedUint32Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedUint64Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedSint32Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedSint64Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedFixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedFixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedSfixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedSfixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_repeatedFloatExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedDoubleExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedBoolExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedStringExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedBytesExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedGroupExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedNestedMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedForeignMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedImportMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedNestedEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedForeignEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedImportEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedStringPieceExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedCordExtension = nil;
static id<PBExtensionField> UnittestRoot_repeatedLazyMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultInt32Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultInt64Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultUint32Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultUint64Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultSint32Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultSint64Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultFixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultFixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultSfixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultSfixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_defaultFloatExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultDoubleExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultBoolExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultStringExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultBytesExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultNestedEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultForeignEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultImportEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultStringPieceExtension = nil;
static id<PBExtensionField> UnittestRoot_defaultCordExtension = nil;
static id<PBExtensionField> UnittestRoot_oneofUint32Extension = nil;
static id<PBExtensionField> UnittestRoot_oneofNestedMessageExtension = nil;
static id<PBExtensionField> UnittestRoot_oneofStringExtension = nil;
static id<PBExtensionField> UnittestRoot_oneofBytesExtension = nil;
static id<PBExtensionField> UnittestRoot_myExtensionString = nil;
static id<PBExtensionField> UnittestRoot_myExtensionInt = nil;
static id<PBExtensionField> UnittestRoot_packedInt32Extension = nil;
static id<PBExtensionField> UnittestRoot_packedInt64Extension = nil;
static id<PBExtensionField> UnittestRoot_packedUint32Extension = nil;
static id<PBExtensionField> UnittestRoot_packedUint64Extension = nil;
static id<PBExtensionField> UnittestRoot_packedSint32Extension = nil;
static id<PBExtensionField> UnittestRoot_packedSint64Extension = nil;
static id<PBExtensionField> UnittestRoot_packedFixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_packedFixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_packedSfixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_packedSfixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_packedFloatExtension = nil;
static id<PBExtensionField> UnittestRoot_packedDoubleExtension = nil;
static id<PBExtensionField> UnittestRoot_packedBoolExtension = nil;
static id<PBExtensionField> UnittestRoot_packedEnumExtension = nil;
static id<PBExtensionField> UnittestRoot_unpackedInt32Extension = nil;
static id<PBExtensionField> UnittestRoot_unpackedInt64Extension = nil;
static id<PBExtensionField> UnittestRoot_unpackedUint32Extension = nil;
static id<PBExtensionField> UnittestRoot_unpackedUint64Extension = nil;
static id<PBExtensionField> UnittestRoot_unpackedSint32Extension = nil;
static id<PBExtensionField> UnittestRoot_unpackedSint64Extension = nil;
static id<PBExtensionField> UnittestRoot_unpackedFixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_unpackedFixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_unpackedSfixed32Extension = nil;
static id<PBExtensionField> UnittestRoot_unpackedSfixed64Extension = nil;
static id<PBExtensionField> UnittestRoot_unpackedFloatExtension = nil;
static id<PBExtensionField> UnittestRoot_unpackedDoubleExtension = nil;
static id<PBExtensionField> UnittestRoot_unpackedBoolExtension = nil;
static id<PBExtensionField> UnittestRoot_unpackedEnumExtension = nil;
static id<PBExtensionField> TestNestedExtension_test = nil;
static id<PBExtensionField> TestNestedExtension_nestedStringExtension = nil;
static id<PBExtensionField> TestRequired_single = nil;
static id<PBExtensionField> TestRequired_multi = nil;
static id<PBExtensionField> TestParsingMerge_optionalExt = nil;
static id<PBExtensionField> TestParsingMerge_repeatedExt = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UnittestRoot class]) {
    UnittestRoot_optionalInt32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:1
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalInt64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:2
                                      defaultValue:[NSNumber numberWithLongLong:0L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalUint32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:3
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalUint64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:4
                                      defaultValue:[NSNumber numberWithLongLong:0L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalSint32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:5
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalSint64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:6
                                      defaultValue:[NSNumber numberWithLongLong:0L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalFixed32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:7
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalFixed64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:8
                                      defaultValue:[NSNumber numberWithLongLong:0L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalSfixed32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:9
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalSfixed64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:10
                                      defaultValue:[NSNumber numberWithLongLong:0L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalFloatExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFloat
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:11
                                      defaultValue:[NSNumber numberWithFloat:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalDoubleExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeDouble
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:12
                                      defaultValue:[NSNumber numberWithDouble:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalBoolExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBool
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:13
                                      defaultValue:[NSNumber numberWithBool:NO]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalStringExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:14
                                      defaultValue:@""
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalBytesExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBytes
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:15
                                      defaultValue:[NSData data]
                               messageOrGroupClass:[NSData class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalGroupExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeGroup
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:16
                                      defaultValue:[OptionalGroup_extension defaultInstance]
                               messageOrGroupClass:[OptionalGroup_extension class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalNestedMessageExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:18
                                      defaultValue:[TestAllTypesNestedMessage defaultInstance]
                               messageOrGroupClass:[TestAllTypesNestedMessage class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalForeignMessageExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:19
                                      defaultValue:[ForeignMessage defaultInstance]
                               messageOrGroupClass:[ForeignMessage class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalImportMessageExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:20
                                      defaultValue:[ImportMessage defaultInstance]
                               messageOrGroupClass:[ImportMessage class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalNestedEnumExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:21
                                      defaultValue:[NSNumber numberWithInteger:TestAllTypesNestedEnumFoo]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalForeignEnumExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:22
                                      defaultValue:[NSNumber numberWithInteger:ForeignEnumForeignFoo]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalImportEnumExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:23
                                      defaultValue:[NSNumber numberWithInteger:ImportEnumImportFoo]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalStringPieceExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:24
                                      defaultValue:@""
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalCordExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:25
                                      defaultValue:@""
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalPublicImportMessageExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:26
                                      defaultValue:[PublicImportMessage defaultInstance]
                               messageOrGroupClass:[PublicImportMessage class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_optionalLazyMessageExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:27
                                      defaultValue:[TestAllTypesNestedMessage defaultInstance]
                               messageOrGroupClass:[TestAllTypesNestedMessage class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedInt32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:31
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedInt64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:32
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedUint32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:33
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedUint64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:34
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSint32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:35
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSint64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:36
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedFixed32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:37
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedFixed64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:38
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSfixed32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:39
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSfixed64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:40
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedFloatExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFloat
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:41
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeFloat]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedDoubleExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeDouble
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:42
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeDouble]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedBoolExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBool
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:43
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeBool]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedStringExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:44
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSString class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedBytesExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBytes
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:45
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSData class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedGroupExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeGroup
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:46
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[RepeatedGroup_extension class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedNestedMessageExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:48
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[TestAllTypesNestedMessage class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedForeignMessageExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:49
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[ForeignMessage class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedImportMessageExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:50
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[ImportMessage class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedNestedEnumExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:51
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedForeignEnumExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:52
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedImportEnumExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:53
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedStringPieceExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:54
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSString class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedCordExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:55
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSString class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_repeatedLazyMessageExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:57
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[TestAllTypesNestedMessage class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultInt32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:61
                                      defaultValue:[NSNumber numberWithInteger:41]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultInt64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:62
                                      defaultValue:[NSNumber numberWithLongLong:42L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultUint32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:63
                                      defaultValue:[NSNumber numberWithInteger:43]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultUint64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:64
                                      defaultValue:[NSNumber numberWithLongLong:44L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultSint32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:65
                                      defaultValue:[NSNumber numberWithInteger:-45]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultSint64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:66
                                      defaultValue:[NSNumber numberWithLongLong:46L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultFixed32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:67
                                      defaultValue:[NSNumber numberWithInteger:47]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultFixed64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:68
                                      defaultValue:[NSNumber numberWithLongLong:48L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultSfixed32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:69
                                      defaultValue:[NSNumber numberWithInteger:49]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultSfixed64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed64
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:70
                                      defaultValue:[NSNumber numberWithLongLong:-50L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultFloatExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFloat
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:71
                                      defaultValue:[NSNumber numberWithFloat:51.5]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultDoubleExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeDouble
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:72
                                      defaultValue:[NSNumber numberWithDouble:52000]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultBoolExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBool
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:73
                                      defaultValue:[NSNumber numberWithBool:YES]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultStringExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:74
                                      defaultValue:@"hello"
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultBytesExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBytes
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:75
                                      defaultValue:[NSData dataWithBytes:"world" length:5]
                               messageOrGroupClass:[NSData class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultNestedEnumExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:81
                                      defaultValue:[NSNumber numberWithInteger:TestAllTypesNestedEnumBar]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultForeignEnumExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:82
                                      defaultValue:[NSNumber numberWithInteger:ForeignEnumForeignBar]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultImportEnumExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:83
                                      defaultValue:[NSNumber numberWithInteger:ImportEnumImportBar]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultStringPieceExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:84
                                      defaultValue:@"abc"
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_defaultCordExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:85
                                      defaultValue:@"123"
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_oneofUint32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt32
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:111
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_oneofNestedMessageExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:112
                                      defaultValue:[TestAllTypesNestedMessage defaultInstance]
                               messageOrGroupClass:[TestAllTypesNestedMessage class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_oneofStringExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:113
                                      defaultValue:@""
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_oneofBytesExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBytes
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:114
                                      defaultValue:[NSData data]
                               messageOrGroupClass:[NSData class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_myExtensionString =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestFieldOrderings class]
                                       fieldNumber:50
                                      defaultValue:@""
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_myExtensionInt =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt32
                                     extendedClass:[TestFieldOrderings class]
                                       fieldNumber:5
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedInt32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt32
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:90
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedInt64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt64
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:91
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedUint32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt32
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:92
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedUint64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt64
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:93
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedSint32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt32
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:94
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedSint64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt64
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:95
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedFixed32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed32
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:96
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedFixed64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed64
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:97
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedSfixed32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed32
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:98
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedSfixed64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed64
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:99
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedFloatExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFloat
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:100
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeFloat]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedDoubleExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeDouble
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:101
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeDouble]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedBoolExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBool
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:102
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeBool]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_packedEnumExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestPackedExtensions class]
                                       fieldNumber:103
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedInt32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt32
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:90
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedInt64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt64
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:91
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedUint32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt32
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:92
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedUint64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt64
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:93
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedSint32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt32
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:94
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedSint64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt64
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:95
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedFixed32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed32
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:96
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedFixed64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed64
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:97
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedSfixed32Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed32
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:98
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedSfixed64Extension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed64
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:99
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedFloatExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFloat
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:100
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeFloat]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedDoubleExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeDouble
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:101
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeDouble]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedBoolExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBool
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:102
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeBool]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestRoot_unpackedEnumExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestUnpackedExtensions class]
                                       fieldNumber:103
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    TestNestedExtension_test =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:1002
                                      defaultValue:@"test"
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    TestNestedExtension_nestedStringExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:1003
                                      defaultValue:@""
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    TestRequired_single =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:1000
                                      defaultValue:[TestRequired defaultInstance]
                               messageOrGroupClass:[TestRequired class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    TestRequired_multi =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensions class]
                                       fieldNumber:1001
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[TestRequired class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    TestParsingMerge_optionalExt =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestParsingMerge class]
                                       fieldNumber:1000
                                      defaultValue:[TestAllTypes defaultInstance]
                               messageOrGroupClass:[TestAllTypes class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    TestParsingMerge_repeatedExt =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestParsingMerge class]
                                       fieldNumber:1001
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[TestAllTypes class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [UnittestImportRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:UnittestRoot_optionalInt32Extension];
  [registry addExtension:UnittestRoot_optionalInt64Extension];
  [registry addExtension:UnittestRoot_optionalUint32Extension];
  [registry addExtension:UnittestRoot_optionalUint64Extension];
  [registry addExtension:UnittestRoot_optionalSint32Extension];
  [registry addExtension:UnittestRoot_optionalSint64Extension];
  [registry addExtension:UnittestRoot_optionalFixed32Extension];
  [registry addExtension:UnittestRoot_optionalFixed64Extension];
  [registry addExtension:UnittestRoot_optionalSfixed32Extension];
  [registry addExtension:UnittestRoot_optionalSfixed64Extension];
  [registry addExtension:UnittestRoot_optionalFloatExtension];
  [registry addExtension:UnittestRoot_optionalDoubleExtension];
  [registry addExtension:UnittestRoot_optionalBoolExtension];
  [registry addExtension:UnittestRoot_optionalStringExtension];
  [registry addExtension:UnittestRoot_optionalBytesExtension];
  [registry addExtension:UnittestRoot_optionalGroupExtension];
  [registry addExtension:UnittestRoot_optionalNestedMessageExtension];
  [registry addExtension:UnittestRoot_optionalForeignMessageExtension];
  [registry addExtension:UnittestRoot_optionalImportMessageExtension];
  [registry addExtension:UnittestRoot_optionalNestedEnumExtension];
  [registry addExtension:UnittestRoot_optionalForeignEnumExtension];
  [registry addExtension:UnittestRoot_optionalImportEnumExtension];
  [registry addExtension:UnittestRoot_optionalStringPieceExtension];
  [registry addExtension:UnittestRoot_optionalCordExtension];
  [registry addExtension:UnittestRoot_optionalPublicImportMessageExtension];
  [registry addExtension:UnittestRoot_optionalLazyMessageExtension];
  [registry addExtension:UnittestRoot_repeatedInt32Extension];
  [registry addExtension:UnittestRoot_repeatedInt64Extension];
  [registry addExtension:UnittestRoot_repeatedUint32Extension];
  [registry addExtension:UnittestRoot_repeatedUint64Extension];
  [registry addExtension:UnittestRoot_repeatedSint32Extension];
  [registry addExtension:UnittestRoot_repeatedSint64Extension];
  [registry addExtension:UnittestRoot_repeatedFixed32Extension];
  [registry addExtension:UnittestRoot_repeatedFixed64Extension];
  [registry addExtension:UnittestRoot_repeatedSfixed32Extension];
  [registry addExtension:UnittestRoot_repeatedSfixed64Extension];
  [registry addExtension:UnittestRoot_repeatedFloatExtension];
  [registry addExtension:UnittestRoot_repeatedDoubleExtension];
  [registry addExtension:UnittestRoot_repeatedBoolExtension];
  [registry addExtension:UnittestRoot_repeatedStringExtension];
  [registry addExtension:UnittestRoot_repeatedBytesExtension];
  [registry addExtension:UnittestRoot_repeatedGroupExtension];
  [registry addExtension:UnittestRoot_repeatedNestedMessageExtension];
  [registry addExtension:UnittestRoot_repeatedForeignMessageExtension];
  [registry addExtension:UnittestRoot_repeatedImportMessageExtension];
  [registry addExtension:UnittestRoot_repeatedNestedEnumExtension];
  [registry addExtension:UnittestRoot_repeatedForeignEnumExtension];
  [registry addExtension:UnittestRoot_repeatedImportEnumExtension];
  [registry addExtension:UnittestRoot_repeatedStringPieceExtension];
  [registry addExtension:UnittestRoot_repeatedCordExtension];
  [registry addExtension:UnittestRoot_repeatedLazyMessageExtension];
  [registry addExtension:UnittestRoot_defaultInt32Extension];
  [registry addExtension:UnittestRoot_defaultInt64Extension];
  [registry addExtension:UnittestRoot_defaultUint32Extension];
  [registry addExtension:UnittestRoot_defaultUint64Extension];
  [registry addExtension:UnittestRoot_defaultSint32Extension];
  [registry addExtension:UnittestRoot_defaultSint64Extension];
  [registry addExtension:UnittestRoot_defaultFixed32Extension];
  [registry addExtension:UnittestRoot_defaultFixed64Extension];
  [registry addExtension:UnittestRoot_defaultSfixed32Extension];
  [registry addExtension:UnittestRoot_defaultSfixed64Extension];
  [registry addExtension:UnittestRoot_defaultFloatExtension];
  [registry addExtension:UnittestRoot_defaultDoubleExtension];
  [registry addExtension:UnittestRoot_defaultBoolExtension];
  [registry addExtension:UnittestRoot_defaultStringExtension];
  [registry addExtension:UnittestRoot_defaultBytesExtension];
  [registry addExtension:UnittestRoot_defaultNestedEnumExtension];
  [registry addExtension:UnittestRoot_defaultForeignEnumExtension];
  [registry addExtension:UnittestRoot_defaultImportEnumExtension];
  [registry addExtension:UnittestRoot_defaultStringPieceExtension];
  [registry addExtension:UnittestRoot_defaultCordExtension];
  [registry addExtension:UnittestRoot_oneofUint32Extension];
  [registry addExtension:UnittestRoot_oneofNestedMessageExtension];
  [registry addExtension:UnittestRoot_oneofStringExtension];
  [registry addExtension:UnittestRoot_oneofBytesExtension];
  [registry addExtension:UnittestRoot_myExtensionString];
  [registry addExtension:UnittestRoot_myExtensionInt];
  [registry addExtension:UnittestRoot_packedInt32Extension];
  [registry addExtension:UnittestRoot_packedInt64Extension];
  [registry addExtension:UnittestRoot_packedUint32Extension];
  [registry addExtension:UnittestRoot_packedUint64Extension];
  [registry addExtension:UnittestRoot_packedSint32Extension];
  [registry addExtension:UnittestRoot_packedSint64Extension];
  [registry addExtension:UnittestRoot_packedFixed32Extension];
  [registry addExtension:UnittestRoot_packedFixed64Extension];
  [registry addExtension:UnittestRoot_packedSfixed32Extension];
  [registry addExtension:UnittestRoot_packedSfixed64Extension];
  [registry addExtension:UnittestRoot_packedFloatExtension];
  [registry addExtension:UnittestRoot_packedDoubleExtension];
  [registry addExtension:UnittestRoot_packedBoolExtension];
  [registry addExtension:UnittestRoot_packedEnumExtension];
  [registry addExtension:UnittestRoot_unpackedInt32Extension];
  [registry addExtension:UnittestRoot_unpackedInt64Extension];
  [registry addExtension:UnittestRoot_unpackedUint32Extension];
  [registry addExtension:UnittestRoot_unpackedUint64Extension];
  [registry addExtension:UnittestRoot_unpackedSint32Extension];
  [registry addExtension:UnittestRoot_unpackedSint64Extension];
  [registry addExtension:UnittestRoot_unpackedFixed32Extension];
  [registry addExtension:UnittestRoot_unpackedFixed64Extension];
  [registry addExtension:UnittestRoot_unpackedSfixed32Extension];
  [registry addExtension:UnittestRoot_unpackedSfixed64Extension];
  [registry addExtension:UnittestRoot_unpackedFloatExtension];
  [registry addExtension:UnittestRoot_unpackedDoubleExtension];
  [registry addExtension:UnittestRoot_unpackedBoolExtension];
  [registry addExtension:UnittestRoot_unpackedEnumExtension];
  [registry addExtension:TestNestedExtension_test];
  [registry addExtension:TestNestedExtension_nestedStringExtension];
  [registry addExtension:TestRequired_single];
  [registry addExtension:TestRequired_multi];
  [registry addExtension:TestParsingMerge_optionalExt];
  [registry addExtension:TestParsingMerge_repeatedExt];
}
+ (id<PBExtensionField>) optionalInt32Extension {
  return UnittestRoot_optionalInt32Extension;
}
+ (id<PBExtensionField>) optionalInt64Extension {
  return UnittestRoot_optionalInt64Extension;
}
+ (id<PBExtensionField>) optionalUint32Extension {
  return UnittestRoot_optionalUint32Extension;
}
+ (id<PBExtensionField>) optionalUint64Extension {
  return UnittestRoot_optionalUint64Extension;
}
+ (id<PBExtensionField>) optionalSint32Extension {
  return UnittestRoot_optionalSint32Extension;
}
+ (id<PBExtensionField>) optionalSint64Extension {
  return UnittestRoot_optionalSint64Extension;
}
+ (id<PBExtensionField>) optionalFixed32Extension {
  return UnittestRoot_optionalFixed32Extension;
}
+ (id<PBExtensionField>) optionalFixed64Extension {
  return UnittestRoot_optionalFixed64Extension;
}
+ (id<PBExtensionField>) optionalSfixed32Extension {
  return UnittestRoot_optionalSfixed32Extension;
}
+ (id<PBExtensionField>) optionalSfixed64Extension {
  return UnittestRoot_optionalSfixed64Extension;
}
+ (id<PBExtensionField>) optionalFloatExtension {
  return UnittestRoot_optionalFloatExtension;
}
+ (id<PBExtensionField>) optionalDoubleExtension {
  return UnittestRoot_optionalDoubleExtension;
}
+ (id<PBExtensionField>) optionalBoolExtension {
  return UnittestRoot_optionalBoolExtension;
}
+ (id<PBExtensionField>) optionalStringExtension {
  return UnittestRoot_optionalStringExtension;
}
+ (id<PBExtensionField>) optionalBytesExtension {
  return UnittestRoot_optionalBytesExtension;
}
+ (id<PBExtensionField>) optionalGroupExtension {
  return UnittestRoot_optionalGroupExtension;
}
+ (id<PBExtensionField>) optionalNestedMessageExtension {
  return UnittestRoot_optionalNestedMessageExtension;
}
+ (id<PBExtensionField>) optionalForeignMessageExtension {
  return UnittestRoot_optionalForeignMessageExtension;
}
+ (id<PBExtensionField>) optionalImportMessageExtension {
  return UnittestRoot_optionalImportMessageExtension;
}
+ (id<PBExtensionField>) optionalNestedEnumExtension {
  return UnittestRoot_optionalNestedEnumExtension;
}
+ (id<PBExtensionField>) optionalForeignEnumExtension {
  return UnittestRoot_optionalForeignEnumExtension;
}
+ (id<PBExtensionField>) optionalImportEnumExtension {
  return UnittestRoot_optionalImportEnumExtension;
}
+ (id<PBExtensionField>) optionalStringPieceExtension {
  return UnittestRoot_optionalStringPieceExtension;
}
+ (id<PBExtensionField>) optionalCordExtension {
  return UnittestRoot_optionalCordExtension;
}
+ (id<PBExtensionField>) optionalPublicImportMessageExtension {
  return UnittestRoot_optionalPublicImportMessageExtension;
}
+ (id<PBExtensionField>) optionalLazyMessageExtension {
  return UnittestRoot_optionalLazyMessageExtension;
}
+ (id<PBExtensionField>) repeatedInt32Extension {
  return UnittestRoot_repeatedInt32Extension;
}
+ (id<PBExtensionField>) repeatedInt64Extension {
  return UnittestRoot_repeatedInt64Extension;
}
+ (id<PBExtensionField>) repeatedUint32Extension {
  return UnittestRoot_repeatedUint32Extension;
}
+ (id<PBExtensionField>) repeatedUint64Extension {
  return UnittestRoot_repeatedUint64Extension;
}
+ (id<PBExtensionField>) repeatedSint32Extension {
  return UnittestRoot_repeatedSint32Extension;
}
+ (id<PBExtensionField>) repeatedSint64Extension {
  return UnittestRoot_repeatedSint64Extension;
}
+ (id<PBExtensionField>) repeatedFixed32Extension {
  return UnittestRoot_repeatedFixed32Extension;
}
+ (id<PBExtensionField>) repeatedFixed64Extension {
  return UnittestRoot_repeatedFixed64Extension;
}
+ (id<PBExtensionField>) repeatedSfixed32Extension {
  return UnittestRoot_repeatedSfixed32Extension;
}
+ (id<PBExtensionField>) repeatedSfixed64Extension {
  return UnittestRoot_repeatedSfixed64Extension;
}
+ (id<PBExtensionField>) repeatedFloatExtension {
  return UnittestRoot_repeatedFloatExtension;
}
+ (id<PBExtensionField>) repeatedDoubleExtension {
  return UnittestRoot_repeatedDoubleExtension;
}
+ (id<PBExtensionField>) repeatedBoolExtension {
  return UnittestRoot_repeatedBoolExtension;
}
+ (id<PBExtensionField>) repeatedStringExtension {
  return UnittestRoot_repeatedStringExtension;
}
+ (id<PBExtensionField>) repeatedBytesExtension {
  return UnittestRoot_repeatedBytesExtension;
}
+ (id<PBExtensionField>) repeatedGroupExtension {
  return UnittestRoot_repeatedGroupExtension;
}
+ (id<PBExtensionField>) repeatedNestedMessageExtension {
  return UnittestRoot_repeatedNestedMessageExtension;
}
+ (id<PBExtensionField>) repeatedForeignMessageExtension {
  return UnittestRoot_repeatedForeignMessageExtension;
}
+ (id<PBExtensionField>) repeatedImportMessageExtension {
  return UnittestRoot_repeatedImportMessageExtension;
}
+ (id<PBExtensionField>) repeatedNestedEnumExtension {
  return UnittestRoot_repeatedNestedEnumExtension;
}
+ (id<PBExtensionField>) repeatedForeignEnumExtension {
  return UnittestRoot_repeatedForeignEnumExtension;
}
+ (id<PBExtensionField>) repeatedImportEnumExtension {
  return UnittestRoot_repeatedImportEnumExtension;
}
+ (id<PBExtensionField>) repeatedStringPieceExtension {
  return UnittestRoot_repeatedStringPieceExtension;
}
+ (id<PBExtensionField>) repeatedCordExtension {
  return UnittestRoot_repeatedCordExtension;
}
+ (id<PBExtensionField>) repeatedLazyMessageExtension {
  return UnittestRoot_repeatedLazyMessageExtension;
}
+ (id<PBExtensionField>) defaultInt32Extension {
  return UnittestRoot_defaultInt32Extension;
}
+ (id<PBExtensionField>) defaultInt64Extension {
  return UnittestRoot_defaultInt64Extension;
}
+ (id<PBExtensionField>) defaultUint32Extension {
  return UnittestRoot_defaultUint32Extension;
}
+ (id<PBExtensionField>) defaultUint64Extension {
  return UnittestRoot_defaultUint64Extension;
}
+ (id<PBExtensionField>) defaultSint32Extension {
  return UnittestRoot_defaultSint32Extension;
}
+ (id<PBExtensionField>) defaultSint64Extension {
  return UnittestRoot_defaultSint64Extension;
}
+ (id<PBExtensionField>) defaultFixed32Extension {
  return UnittestRoot_defaultFixed32Extension;
}
+ (id<PBExtensionField>) defaultFixed64Extension {
  return UnittestRoot_defaultFixed64Extension;
}
+ (id<PBExtensionField>) defaultSfixed32Extension {
  return UnittestRoot_defaultSfixed32Extension;
}
+ (id<PBExtensionField>) defaultSfixed64Extension {
  return UnittestRoot_defaultSfixed64Extension;
}
+ (id<PBExtensionField>) defaultFloatExtension {
  return UnittestRoot_defaultFloatExtension;
}
+ (id<PBExtensionField>) defaultDoubleExtension {
  return UnittestRoot_defaultDoubleExtension;
}
+ (id<PBExtensionField>) defaultBoolExtension {
  return UnittestRoot_defaultBoolExtension;
}
+ (id<PBExtensionField>) defaultStringExtension {
  return UnittestRoot_defaultStringExtension;
}
+ (id<PBExtensionField>) defaultBytesExtension {
  return UnittestRoot_defaultBytesExtension;
}
+ (id<PBExtensionField>) defaultNestedEnumExtension {
  return UnittestRoot_defaultNestedEnumExtension;
}
+ (id<PBExtensionField>) defaultForeignEnumExtension {
  return UnittestRoot_defaultForeignEnumExtension;
}
+ (id<PBExtensionField>) defaultImportEnumExtension {
  return UnittestRoot_defaultImportEnumExtension;
}
+ (id<PBExtensionField>) defaultStringPieceExtension {
  return UnittestRoot_defaultStringPieceExtension;
}
+ (id<PBExtensionField>) defaultCordExtension {
  return UnittestRoot_defaultCordExtension;
}
+ (id<PBExtensionField>) oneofUint32Extension {
  return UnittestRoot_oneofUint32Extension;
}
+ (id<PBExtensionField>) oneofNestedMessageExtension {
  return UnittestRoot_oneofNestedMessageExtension;
}
+ (id<PBExtensionField>) oneofStringExtension {
  return UnittestRoot_oneofStringExtension;
}
+ (id<PBExtensionField>) oneofBytesExtension {
  return UnittestRoot_oneofBytesExtension;
}
+ (id<PBExtensionField>) myExtensionString {
  return UnittestRoot_myExtensionString;
}
+ (id<PBExtensionField>) myExtensionInt {
  return UnittestRoot_myExtensionInt;
}
+ (id<PBExtensionField>) packedInt32Extension {
  return UnittestRoot_packedInt32Extension;
}
+ (id<PBExtensionField>) packedInt64Extension {
  return UnittestRoot_packedInt64Extension;
}
+ (id<PBExtensionField>) packedUint32Extension {
  return UnittestRoot_packedUint32Extension;
}
+ (id<PBExtensionField>) packedUint64Extension {
  return UnittestRoot_packedUint64Extension;
}
+ (id<PBExtensionField>) packedSint32Extension {
  return UnittestRoot_packedSint32Extension;
}
+ (id<PBExtensionField>) packedSint64Extension {
  return UnittestRoot_packedSint64Extension;
}
+ (id<PBExtensionField>) packedFixed32Extension {
  return UnittestRoot_packedFixed32Extension;
}
+ (id<PBExtensionField>) packedFixed64Extension {
  return UnittestRoot_packedFixed64Extension;
}
+ (id<PBExtensionField>) packedSfixed32Extension {
  return UnittestRoot_packedSfixed32Extension;
}
+ (id<PBExtensionField>) packedSfixed64Extension {
  return UnittestRoot_packedSfixed64Extension;
}
+ (id<PBExtensionField>) packedFloatExtension {
  return UnittestRoot_packedFloatExtension;
}
+ (id<PBExtensionField>) packedDoubleExtension {
  return UnittestRoot_packedDoubleExtension;
}
+ (id<PBExtensionField>) packedBoolExtension {
  return UnittestRoot_packedBoolExtension;
}
+ (id<PBExtensionField>) packedEnumExtension {
  return UnittestRoot_packedEnumExtension;
}
+ (id<PBExtensionField>) unpackedInt32Extension {
  return UnittestRoot_unpackedInt32Extension;
}
+ (id<PBExtensionField>) unpackedInt64Extension {
  return UnittestRoot_unpackedInt64Extension;
}
+ (id<PBExtensionField>) unpackedUint32Extension {
  return UnittestRoot_unpackedUint32Extension;
}
+ (id<PBExtensionField>) unpackedUint64Extension {
  return UnittestRoot_unpackedUint64Extension;
}
+ (id<PBExtensionField>) unpackedSint32Extension {
  return UnittestRoot_unpackedSint32Extension;
}
+ (id<PBExtensionField>) unpackedSint64Extension {
  return UnittestRoot_unpackedSint64Extension;
}
+ (id<PBExtensionField>) unpackedFixed32Extension {
  return UnittestRoot_unpackedFixed32Extension;
}
+ (id<PBExtensionField>) unpackedFixed64Extension {
  return UnittestRoot_unpackedFixed64Extension;
}
+ (id<PBExtensionField>) unpackedSfixed32Extension {
  return UnittestRoot_unpackedSfixed32Extension;
}
+ (id<PBExtensionField>) unpackedSfixed64Extension {
  return UnittestRoot_unpackedSfixed64Extension;
}
+ (id<PBExtensionField>) unpackedFloatExtension {
  return UnittestRoot_unpackedFloatExtension;
}
+ (id<PBExtensionField>) unpackedDoubleExtension {
  return UnittestRoot_unpackedDoubleExtension;
}
+ (id<PBExtensionField>) unpackedBoolExtension {
  return UnittestRoot_unpackedBoolExtension;
}
+ (id<PBExtensionField>) unpackedEnumExtension {
  return UnittestRoot_unpackedEnumExtension;
}
@end

BOOL ForeignEnumIsValidValue(ForeignEnum value) {
  switch (value) {
    case ForeignEnumForeignFoo:
    case ForeignEnumForeignBar:
    case ForeignEnumForeignBaz:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromForeignEnum(ForeignEnum value) {
  switch (value) {
    case ForeignEnumForeignFoo:
      return @"ForeignEnumForeignFoo";
    case ForeignEnumForeignBar:
      return @"ForeignEnumForeignBar";
    case ForeignEnumForeignBaz:
      return @"ForeignEnumForeignBaz";
    default:
      return nil;
  }
}

BOOL TestEnumWithDupValueIsValidValue(TestEnumWithDupValue value) {
  switch (value) {
    case TestEnumWithDupValueFoo1:
    case TestEnumWithDupValueBar1:
    case TestEnumWithDupValueBaz:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromTestEnumWithDupValue(TestEnumWithDupValue value) {
  switch (value) {
    case TestEnumWithDupValueFoo1:
      return @"TestEnumWithDupValueFoo1";
    case TestEnumWithDupValueBar1:
      return @"TestEnumWithDupValueBar1";
    case TestEnumWithDupValueBaz:
      return @"TestEnumWithDupValueBaz";
    default:
      return nil;
  }
}

BOOL TestSparseEnumIsValidValue(TestSparseEnum value) {
  switch (value) {
    case TestSparseEnumSparseA:
    case TestSparseEnumSparseB:
    case TestSparseEnumSparseC:
    case TestSparseEnumSparseD:
    case TestSparseEnumSparseE:
    case TestSparseEnumSparseF:
    case TestSparseEnumSparseG:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromTestSparseEnum(TestSparseEnum value) {
  switch (value) {
    case TestSparseEnumSparseA:
      return @"TestSparseEnumSparseA";
    case TestSparseEnumSparseB:
      return @"TestSparseEnumSparseB";
    case TestSparseEnumSparseC:
      return @"TestSparseEnumSparseC";
    case TestSparseEnumSparseD:
      return @"TestSparseEnumSparseD";
    case TestSparseEnumSparseE:
      return @"TestSparseEnumSparseE";
    case TestSparseEnumSparseF:
      return @"TestSparseEnumSparseF";
    case TestSparseEnumSparseG:
      return @"TestSparseEnumSparseG";
    default:
      return nil;
  }
}

@interface TestAllTypes ()
@property SInt32 optionalInt32;
@property SInt64 optionalInt64;
@property UInt32 optionalUint32;
@property UInt64 optionalUint64;
@property SInt32 optionalSint32;
@property SInt64 optionalSint64;
@property UInt32 optionalFixed32;
@property UInt64 optionalFixed64;
@property SInt32 optionalSfixed32;
@property SInt64 optionalSfixed64;
@property Float32 optionalFloat;
@property Float64 optionalDouble;
@property BOOL optionalBool;
@property (strong) NSString* optionalString;
@property (strong) NSData* optionalBytes;
@property (strong) TestAllTypesOptionalGroup* optionalGroup;
@property (strong) TestAllTypesNestedMessage* optionalNestedMessage;
@property (strong) ForeignMessage* optionalForeignMessage;
@property (strong) ImportMessage* optionalImportMessage;
@property TestAllTypesNestedEnum optionalNestedEnum;
@property ForeignEnum optionalForeignEnum;
@property ImportEnum optionalImportEnum;
@property (strong) NSString* optionalStringPiece;
@property (strong) NSString* optionalCord;
@property (strong) PublicImportMessage* optionalPublicImportMessage;
@property (strong) TestAllTypesNestedMessage* optionalLazyMessage;
@property (strong) PBAppendableArray * repeatedInt32Array;
@property (strong) PBAppendableArray * repeatedInt64Array;
@property (strong) PBAppendableArray * repeatedUint32Array;
@property (strong) PBAppendableArray * repeatedUint64Array;
@property (strong) PBAppendableArray * repeatedSint32Array;
@property (strong) PBAppendableArray * repeatedSint64Array;
@property (strong) PBAppendableArray * repeatedFixed32Array;
@property (strong) PBAppendableArray * repeatedFixed64Array;
@property (strong) PBAppendableArray * repeatedSfixed32Array;
@property (strong) PBAppendableArray * repeatedSfixed64Array;
@property (strong) PBAppendableArray * repeatedFloatArray;
@property (strong) PBAppendableArray * repeatedDoubleArray;
@property (strong) PBAppendableArray * repeatedBoolArray;
@property (strong) NSMutableArray * repeatedStringArray;
@property (strong) NSMutableArray * repeatedBytesArray;
@property (strong) NSMutableArray * repeatedGroupArray;
@property (strong) NSMutableArray * repeatedNestedMessageArray;
@property (strong) NSMutableArray * repeatedForeignMessageArray;
@property (strong) NSMutableArray * repeatedImportMessageArray;
@property (strong) PBAppendableArray * repeatedNestedEnumArray;
@property (strong) PBAppendableArray * repeatedForeignEnumArray;
@property (strong) PBAppendableArray * repeatedImportEnumArray;
@property (strong) NSMutableArray * repeatedStringPieceArray;
@property (strong) NSMutableArray * repeatedCordArray;
@property (strong) NSMutableArray * repeatedLazyMessageArray;
@property SInt32 defaultInt32;
@property SInt64 defaultInt64;
@property UInt32 defaultUint32;
@property UInt64 defaultUint64;
@property SInt32 defaultSint32;
@property SInt64 defaultSint64;
@property UInt32 defaultFixed32;
@property UInt64 defaultFixed64;
@property SInt32 defaultSfixed32;
@property SInt64 defaultSfixed64;
@property Float32 defaultFloat;
@property Float64 defaultDouble;
@property BOOL defaultBool;
@property (strong) NSString* defaultString;
@property (strong) NSData* defaultBytes;
@property TestAllTypesNestedEnum defaultNestedEnum;
@property ForeignEnum defaultForeignEnum;
@property ImportEnum defaultImportEnum;
@property (strong) NSString* defaultStringPiece;
@property (strong) NSString* defaultCord;
@property UInt32 oneofUint32;
@property (strong) TestAllTypesNestedMessage* oneofNestedMessage;
@property (strong) NSString* oneofString;
@property (strong) NSData* oneofBytes;
@end

@implementation TestAllTypes

- (BOOL) hasOptionalInt32 {
  return !!hasOptionalInt32_;
}
- (void) setHasOptionalInt32:(BOOL) _value_ {
  hasOptionalInt32_ = !!_value_;
}
@synthesize optionalInt32;
- (BOOL) hasOptionalInt64 {
  return !!hasOptionalInt64_;
}
- (void) setHasOptionalInt64:(BOOL) _value_ {
  hasOptionalInt64_ = !!_value_;
}
@synthesize optionalInt64;
- (BOOL) hasOptionalUint32 {
  return !!hasOptionalUint32_;
}
- (void) setHasOptionalUint32:(BOOL) _value_ {
  hasOptionalUint32_ = !!_value_;
}
@synthesize optionalUint32;
- (BOOL) hasOptionalUint64 {
  return !!hasOptionalUint64_;
}
- (void) setHasOptionalUint64:(BOOL) _value_ {
  hasOptionalUint64_ = !!_value_;
}
@synthesize optionalUint64;
- (BOOL) hasOptionalSint32 {
  return !!hasOptionalSint32_;
}
- (void) setHasOptionalSint32:(BOOL) _value_ {
  hasOptionalSint32_ = !!_value_;
}
@synthesize optionalSint32;
- (BOOL) hasOptionalSint64 {
  return !!hasOptionalSint64_;
}
- (void) setHasOptionalSint64:(BOOL) _value_ {
  hasOptionalSint64_ = !!_value_;
}
@synthesize optionalSint64;
- (BOOL) hasOptionalFixed32 {
  return !!hasOptionalFixed32_;
}
- (void) setHasOptionalFixed32:(BOOL) _value_ {
  hasOptionalFixed32_ = !!_value_;
}
@synthesize optionalFixed32;
- (BOOL) hasOptionalFixed64 {
  return !!hasOptionalFixed64_;
}
- (void) setHasOptionalFixed64:(BOOL) _value_ {
  hasOptionalFixed64_ = !!_value_;
}
@synthesize optionalFixed64;
- (BOOL) hasOptionalSfixed32 {
  return !!hasOptionalSfixed32_;
}
- (void) setHasOptionalSfixed32:(BOOL) _value_ {
  hasOptionalSfixed32_ = !!_value_;
}
@synthesize optionalSfixed32;
- (BOOL) hasOptionalSfixed64 {
  return !!hasOptionalSfixed64_;
}
- (void) setHasOptionalSfixed64:(BOOL) _value_ {
  hasOptionalSfixed64_ = !!_value_;
}
@synthesize optionalSfixed64;
- (BOOL) hasOptionalFloat {
  return !!hasOptionalFloat_;
}
- (void) setHasOptionalFloat:(BOOL) _value_ {
  hasOptionalFloat_ = !!_value_;
}
@synthesize optionalFloat;
- (BOOL) hasOptionalDouble {
  return !!hasOptionalDouble_;
}
- (void) setHasOptionalDouble:(BOOL) _value_ {
  hasOptionalDouble_ = !!_value_;
}
@synthesize optionalDouble;
- (BOOL) hasOptionalBool {
  return !!hasOptionalBool_;
}
- (void) setHasOptionalBool:(BOOL) _value_ {
  hasOptionalBool_ = !!_value_;
}
- (BOOL) optionalBool {
  return !!optionalBool_;
}
- (void) setOptionalBool:(BOOL) _value_ {
  optionalBool_ = !!_value_;
}
- (BOOL) hasOptionalString {
  return !!hasOptionalString_;
}
- (void) setHasOptionalString:(BOOL) _value_ {
  hasOptionalString_ = !!_value_;
}
@synthesize optionalString;
- (BOOL) hasOptionalBytes {
  return !!hasOptionalBytes_;
}
- (void) setHasOptionalBytes:(BOOL) _value_ {
  hasOptionalBytes_ = !!_value_;
}
@synthesize optionalBytes;
- (BOOL) hasOptionalGroup {
  return !!hasOptionalGroup_;
}
- (void) setHasOptionalGroup:(BOOL) _value_ {
  hasOptionalGroup_ = !!_value_;
}
@synthesize optionalGroup;
- (BOOL) hasOptionalNestedMessage {
  return !!hasOptionalNestedMessage_;
}
- (void) setHasOptionalNestedMessage:(BOOL) _value_ {
  hasOptionalNestedMessage_ = !!_value_;
}
@synthesize optionalNestedMessage;
- (BOOL) hasOptionalForeignMessage {
  return !!hasOptionalForeignMessage_;
}
- (void) setHasOptionalForeignMessage:(BOOL) _value_ {
  hasOptionalForeignMessage_ = !!_value_;
}
@synthesize optionalForeignMessage;
- (BOOL) hasOptionalImportMessage {
  return !!hasOptionalImportMessage_;
}
- (void) setHasOptionalImportMessage:(BOOL) _value_ {
  hasOptionalImportMessage_ = !!_value_;
}
@synthesize optionalImportMessage;
- (BOOL) hasOptionalNestedEnum {
  return !!hasOptionalNestedEnum_;
}
- (void) setHasOptionalNestedEnum:(BOOL) _value_ {
  hasOptionalNestedEnum_ = !!_value_;
}
@synthesize optionalNestedEnum;
- (BOOL) hasOptionalForeignEnum {
  return !!hasOptionalForeignEnum_;
}
- (void) setHasOptionalForeignEnum:(BOOL) _value_ {
  hasOptionalForeignEnum_ = !!_value_;
}
@synthesize optionalForeignEnum;
- (BOOL) hasOptionalImportEnum {
  return !!hasOptionalImportEnum_;
}
- (void) setHasOptionalImportEnum:(BOOL) _value_ {
  hasOptionalImportEnum_ = !!_value_;
}
@synthesize optionalImportEnum;
- (BOOL) hasOptionalStringPiece {
  return !!hasOptionalStringPiece_;
}
- (void) setHasOptionalStringPiece:(BOOL) _value_ {
  hasOptionalStringPiece_ = !!_value_;
}
@synthesize optionalStringPiece;
- (BOOL) hasOptionalCord {
  return !!hasOptionalCord_;
}
- (void) setHasOptionalCord:(BOOL) _value_ {
  hasOptionalCord_ = !!_value_;
}
@synthesize optionalCord;
- (BOOL) hasOptionalPublicImportMessage {
  return !!hasOptionalPublicImportMessage_;
}
- (void) setHasOptionalPublicImportMessage:(BOOL) _value_ {
  hasOptionalPublicImportMessage_ = !!_value_;
}
@synthesize optionalPublicImportMessage;
- (BOOL) hasOptionalLazyMessage {
  return !!hasOptionalLazyMessage_;
}
- (void) setHasOptionalLazyMessage:(BOOL) _value_ {
  hasOptionalLazyMessage_ = !!_value_;
}
@synthesize optionalLazyMessage;
@synthesize repeatedInt32Array;
@dynamic repeatedInt32;
@synthesize repeatedInt64Array;
@dynamic repeatedInt64;
@synthesize repeatedUint32Array;
@dynamic repeatedUint32;
@synthesize repeatedUint64Array;
@dynamic repeatedUint64;
@synthesize repeatedSint32Array;
@dynamic repeatedSint32;
@synthesize repeatedSint64Array;
@dynamic repeatedSint64;
@synthesize repeatedFixed32Array;
@dynamic repeatedFixed32;
@synthesize repeatedFixed64Array;
@dynamic repeatedFixed64;
@synthesize repeatedSfixed32Array;
@dynamic repeatedSfixed32;
@synthesize repeatedSfixed64Array;
@dynamic repeatedSfixed64;
@synthesize repeatedFloatArray;
@dynamic repeatedFloat;
@synthesize repeatedDoubleArray;
@dynamic repeatedDouble;
@synthesize repeatedBoolArray;
@dynamic repeatedBool;
@synthesize repeatedStringArray;
@dynamic repeatedString;
@synthesize repeatedBytesArray;
@dynamic repeatedBytes;
@synthesize repeatedGroupArray;
@dynamic repeatedGroup;
@synthesize repeatedNestedMessageArray;
@dynamic repeatedNestedMessage;
@synthesize repeatedForeignMessageArray;
@dynamic repeatedForeignMessage;
@synthesize repeatedImportMessageArray;
@dynamic repeatedImportMessage;
@synthesize repeatedNestedEnumArray;
@dynamic repeatedNestedEnum;
@synthesize repeatedForeignEnumArray;
@dynamic repeatedForeignEnum;
@synthesize repeatedImportEnumArray;
@dynamic repeatedImportEnum;
@synthesize repeatedStringPieceArray;
@dynamic repeatedStringPiece;
@synthesize repeatedCordArray;
@dynamic repeatedCord;
@synthesize repeatedLazyMessageArray;
@dynamic repeatedLazyMessage;
- (BOOL) hasDefaultInt32 {
  return !!hasDefaultInt32_;
}
- (void) setHasDefaultInt32:(BOOL) _value_ {
  hasDefaultInt32_ = !!_value_;
}
@synthesize defaultInt32;
- (BOOL) hasDefaultInt64 {
  return !!hasDefaultInt64_;
}
- (void) setHasDefaultInt64:(BOOL) _value_ {
  hasDefaultInt64_ = !!_value_;
}
@synthesize defaultInt64;
- (BOOL) hasDefaultUint32 {
  return !!hasDefaultUint32_;
}
- (void) setHasDefaultUint32:(BOOL) _value_ {
  hasDefaultUint32_ = !!_value_;
}
@synthesize defaultUint32;
- (BOOL) hasDefaultUint64 {
  return !!hasDefaultUint64_;
}
- (void) setHasDefaultUint64:(BOOL) _value_ {
  hasDefaultUint64_ = !!_value_;
}
@synthesize defaultUint64;
- (BOOL) hasDefaultSint32 {
  return !!hasDefaultSint32_;
}
- (void) setHasDefaultSint32:(BOOL) _value_ {
  hasDefaultSint32_ = !!_value_;
}
@synthesize defaultSint32;
- (BOOL) hasDefaultSint64 {
  return !!hasDefaultSint64_;
}
- (void) setHasDefaultSint64:(BOOL) _value_ {
  hasDefaultSint64_ = !!_value_;
}
@synthesize defaultSint64;
- (BOOL) hasDefaultFixed32 {
  return !!hasDefaultFixed32_;
}
- (void) setHasDefaultFixed32:(BOOL) _value_ {
  hasDefaultFixed32_ = !!_value_;
}
@synthesize defaultFixed32;
- (BOOL) hasDefaultFixed64 {
  return !!hasDefaultFixed64_;
}
- (void) setHasDefaultFixed64:(BOOL) _value_ {
  hasDefaultFixed64_ = !!_value_;
}
@synthesize defaultFixed64;
- (BOOL) hasDefaultSfixed32 {
  return !!hasDefaultSfixed32_;
}
- (void) setHasDefaultSfixed32:(BOOL) _value_ {
  hasDefaultSfixed32_ = !!_value_;
}
@synthesize defaultSfixed32;
- (BOOL) hasDefaultSfixed64 {
  return !!hasDefaultSfixed64_;
}
- (void) setHasDefaultSfixed64:(BOOL) _value_ {
  hasDefaultSfixed64_ = !!_value_;
}
@synthesize defaultSfixed64;
- (BOOL) hasDefaultFloat {
  return !!hasDefaultFloat_;
}
- (void) setHasDefaultFloat:(BOOL) _value_ {
  hasDefaultFloat_ = !!_value_;
}
@synthesize defaultFloat;
- (BOOL) hasDefaultDouble {
  return !!hasDefaultDouble_;
}
- (void) setHasDefaultDouble:(BOOL) _value_ {
  hasDefaultDouble_ = !!_value_;
}
@synthesize defaultDouble;
- (BOOL) hasDefaultBool {
  return !!hasDefaultBool_;
}
- (void) setHasDefaultBool:(BOOL) _value_ {
  hasDefaultBool_ = !!_value_;
}
- (BOOL) defaultBool {
  return !!defaultBool_;
}
- (void) setDefaultBool:(BOOL) _value_ {
  defaultBool_ = !!_value_;
}
- (BOOL) hasDefaultString {
  return !!hasDefaultString_;
}
- (void) setHasDefaultString:(BOOL) _value_ {
  hasDefaultString_ = !!_value_;
}
@synthesize defaultString;
- (BOOL) hasDefaultBytes {
  return !!hasDefaultBytes_;
}
- (void) setHasDefaultBytes:(BOOL) _value_ {
  hasDefaultBytes_ = !!_value_;
}
@synthesize defaultBytes;
- (BOOL) hasDefaultNestedEnum {
  return !!hasDefaultNestedEnum_;
}
- (void) setHasDefaultNestedEnum:(BOOL) _value_ {
  hasDefaultNestedEnum_ = !!_value_;
}
@synthesize defaultNestedEnum;
- (BOOL) hasDefaultForeignEnum {
  return !!hasDefaultForeignEnum_;
}
- (void) setHasDefaultForeignEnum:(BOOL) _value_ {
  hasDefaultForeignEnum_ = !!_value_;
}
@synthesize defaultForeignEnum;
- (BOOL) hasDefaultImportEnum {
  return !!hasDefaultImportEnum_;
}
- (void) setHasDefaultImportEnum:(BOOL) _value_ {
  hasDefaultImportEnum_ = !!_value_;
}
@synthesize defaultImportEnum;
- (BOOL) hasDefaultStringPiece {
  return !!hasDefaultStringPiece_;
}
- (void) setHasDefaultStringPiece:(BOOL) _value_ {
  hasDefaultStringPiece_ = !!_value_;
}
@synthesize defaultStringPiece;
- (BOOL) hasDefaultCord {
  return !!hasDefaultCord_;
}
- (void) setHasDefaultCord:(BOOL) _value_ {
  hasDefaultCord_ = !!_value_;
}
@synthesize defaultCord;
- (BOOL) hasOneofUint32 {
  return !!hasOneofUint32_;
}
- (void) setHasOneofUint32:(BOOL) _value_ {
  hasOneofUint32_ = !!_value_;
}
@synthesize oneofUint32;
- (BOOL) hasOneofNestedMessage {
  return !!hasOneofNestedMessage_;
}
- (void) setHasOneofNestedMessage:(BOOL) _value_ {
  hasOneofNestedMessage_ = !!_value_;
}
@synthesize oneofNestedMessage;
- (BOOL) hasOneofString {
  return !!hasOneofString_;
}
- (void) setHasOneofString:(BOOL) _value_ {
  hasOneofString_ = !!_value_;
}
@synthesize oneofString;
- (BOOL) hasOneofBytes {
  return !!hasOneofBytes_;
}
- (void) setHasOneofBytes:(BOOL) _value_ {
  hasOneofBytes_ = !!_value_;
}
@synthesize oneofBytes;
- (instancetype) init {
  if ((self = [super init])) {
    self.optionalInt32 = 0;
    self.optionalInt64 = 0L;
    self.optionalUint32 = 0;
    self.optionalUint64 = 0L;
    self.optionalSint32 = 0;
    self.optionalSint64 = 0L;
    self.optionalFixed32 = 0;
    self.optionalFixed64 = 0L;
    self.optionalSfixed32 = 0;
    self.optionalSfixed64 = 0L;
    self.optionalFloat = 0;
    self.optionalDouble = 0;
    self.optionalBool = NO;
    self.optionalString = @"";
    self.optionalBytes = [NSData data];
    self.optionalGroup = [TestAllTypesOptionalGroup defaultInstance];
    self.optionalNestedMessage = [TestAllTypesNestedMessage defaultInstance];
    self.optionalForeignMessage = [ForeignMessage defaultInstance];
    self.optionalImportMessage = [ImportMessage defaultInstance];
    self.optionalNestedEnum = TestAllTypesNestedEnumFoo;
    self.optionalForeignEnum = ForeignEnumForeignFoo;
    self.optionalImportEnum = ImportEnumImportFoo;
    self.optionalStringPiece = @"";
    self.optionalCord = @"";
    self.optionalPublicImportMessage = [PublicImportMessage defaultInstance];
    self.optionalLazyMessage = [TestAllTypesNestedMessage defaultInstance];
    self.defaultInt32 = 41;
    self.defaultInt64 = 42L;
    self.defaultUint32 = 43;
    self.defaultUint64 = 44L;
    self.defaultSint32 = -45;
    self.defaultSint64 = 46L;
    self.defaultFixed32 = 47;
    self.defaultFixed64 = 48L;
    self.defaultSfixed32 = 49;
    self.defaultSfixed64 = -50L;
    self.defaultFloat = 51.5;
    self.defaultDouble = 52000;
    self.defaultBool = YES;
    self.defaultString = @"hello";
    self.defaultBytes = [NSData dataWithBytes:"world" length:5];
    self.defaultNestedEnum = TestAllTypesNestedEnumBar;
    self.defaultForeignEnum = ForeignEnumForeignBar;
    self.defaultImportEnum = ImportEnumImportBar;
    self.defaultStringPiece = @"abc";
    self.defaultCord = @"123";
    self.oneofUint32 = 0;
    self.oneofNestedMessage = [TestAllTypesNestedMessage defaultInstance];
    self.oneofString = @"";
    self.oneofBytes = [NSData data];
  }
  return self;
}
static TestAllTypes* defaultTestAllTypesInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypes class]) {
    defaultTestAllTypesInstance = [[TestAllTypes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesInstance;
}
- (PBArray *)repeatedInt32 {
  return repeatedInt32Array;
}
- (SInt32)repeatedInt32AtIndex:(NSUInteger)index {
  return [repeatedInt32Array int32AtIndex:index];
}
- (PBArray *)repeatedInt64 {
  return repeatedInt64Array;
}
- (SInt64)repeatedInt64AtIndex:(NSUInteger)index {
  return [repeatedInt64Array int64AtIndex:index];
}
- (PBArray *)repeatedUint32 {
  return repeatedUint32Array;
}
- (UInt32)repeatedUint32AtIndex:(NSUInteger)index {
  return [repeatedUint32Array uint32AtIndex:index];
}
- (PBArray *)repeatedUint64 {
  return repeatedUint64Array;
}
- (UInt64)repeatedUint64AtIndex:(NSUInteger)index {
  return [repeatedUint64Array uint64AtIndex:index];
}
- (PBArray *)repeatedSint32 {
  return repeatedSint32Array;
}
- (SInt32)repeatedSint32AtIndex:(NSUInteger)index {
  return [repeatedSint32Array int32AtIndex:index];
}
- (PBArray *)repeatedSint64 {
  return repeatedSint64Array;
}
- (SInt64)repeatedSint64AtIndex:(NSUInteger)index {
  return [repeatedSint64Array int64AtIndex:index];
}
- (PBArray *)repeatedFixed32 {
  return repeatedFixed32Array;
}
- (UInt32)repeatedFixed32AtIndex:(NSUInteger)index {
  return [repeatedFixed32Array uint32AtIndex:index];
}
- (PBArray *)repeatedFixed64 {
  return repeatedFixed64Array;
}
- (UInt64)repeatedFixed64AtIndex:(NSUInteger)index {
  return [repeatedFixed64Array uint64AtIndex:index];
}
- (PBArray *)repeatedSfixed32 {
  return repeatedSfixed32Array;
}
- (SInt32)repeatedSfixed32AtIndex:(NSUInteger)index {
  return [repeatedSfixed32Array int32AtIndex:index];
}
- (PBArray *)repeatedSfixed64 {
  return repeatedSfixed64Array;
}
- (SInt64)repeatedSfixed64AtIndex:(NSUInteger)index {
  return [repeatedSfixed64Array int64AtIndex:index];
}
- (PBArray *)repeatedFloat {
  return repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [repeatedFloatArray floatAtIndex:index];
}
- (PBArray *)repeatedDouble {
  return repeatedDoubleArray;
}
- (Float64)repeatedDoubleAtIndex:(NSUInteger)index {
  return [repeatedDoubleArray doubleAtIndex:index];
}
- (PBArray *)repeatedBool {
  return repeatedBoolArray;
}
- (BOOL)repeatedBoolAtIndex:(NSUInteger)index {
  return [repeatedBoolArray boolAtIndex:index];
}
- (NSArray *)repeatedString {
  return repeatedStringArray;
}
- (NSString*)repeatedStringAtIndex:(NSUInteger)index {
  return [repeatedStringArray objectAtIndex:index];
}
- (NSArray *)repeatedBytes {
  return repeatedBytesArray;
}
- (NSData*)repeatedBytesAtIndex:(NSUInteger)index {
  return [repeatedBytesArray objectAtIndex:index];
}
- (NSArray *)repeatedGroup {
  return repeatedGroupArray;
}
- (TestAllTypesRepeatedGroup*)repeatedGroupAtIndex:(NSUInteger)index {
  return [repeatedGroupArray objectAtIndex:index];
}
- (NSArray *)repeatedNestedMessage {
  return repeatedNestedMessageArray;
}
- (TestAllTypesNestedMessage*)repeatedNestedMessageAtIndex:(NSUInteger)index {
  return [repeatedNestedMessageArray objectAtIndex:index];
}
- (NSArray *)repeatedForeignMessage {
  return repeatedForeignMessageArray;
}
- (ForeignMessage*)repeatedForeignMessageAtIndex:(NSUInteger)index {
  return [repeatedForeignMessageArray objectAtIndex:index];
}
- (NSArray *)repeatedImportMessage {
  return repeatedImportMessageArray;
}
- (ImportMessage*)repeatedImportMessageAtIndex:(NSUInteger)index {
  return [repeatedImportMessageArray objectAtIndex:index];
}
- (PBArray *)repeatedNestedEnum {
  return repeatedNestedEnumArray;
}
- (TestAllTypesNestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index {
  return (TestAllTypesNestedEnum)[repeatedNestedEnumArray enumAtIndex:index];
}
- (PBArray *)repeatedForeignEnum {
  return repeatedForeignEnumArray;
}
- (ForeignEnum)repeatedForeignEnumAtIndex:(NSUInteger)index {
  return (ForeignEnum)[repeatedForeignEnumArray enumAtIndex:index];
}
- (PBArray *)repeatedImportEnum {
  return repeatedImportEnumArray;
}
- (ImportEnum)repeatedImportEnumAtIndex:(NSUInteger)index {
  return (ImportEnum)[repeatedImportEnumArray enumAtIndex:index];
}
- (NSArray *)repeatedStringPiece {
  return repeatedStringPieceArray;
}
- (NSString*)repeatedStringPieceAtIndex:(NSUInteger)index {
  return [repeatedStringPieceArray objectAtIndex:index];
}
- (NSArray *)repeatedCord {
  return repeatedCordArray;
}
- (NSString*)repeatedCordAtIndex:(NSUInteger)index {
  return [repeatedCordArray objectAtIndex:index];
}
- (NSArray *)repeatedLazyMessage {
  return repeatedLazyMessageArray;
}
- (TestAllTypesNestedMessage*)repeatedLazyMessageAtIndex:(NSUInteger)index {
  return [repeatedLazyMessageArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOptionalInt32) {
    [output writeInt32:1 value:self.optionalInt32];
  }
  if (self.hasOptionalInt64) {
    [output writeInt64:2 value:self.optionalInt64];
  }
  if (self.hasOptionalUint32) {
    [output writeUInt32:3 value:self.optionalUint32];
  }
  if (self.hasOptionalUint64) {
    [output writeUInt64:4 value:self.optionalUint64];
  }
  if (self.hasOptionalSint32) {
    [output writeSInt32:5 value:self.optionalSint32];
  }
  if (self.hasOptionalSint64) {
    [output writeSInt64:6 value:self.optionalSint64];
  }
  if (self.hasOptionalFixed32) {
    [output writeFixed32:7 value:self.optionalFixed32];
  }
  if (self.hasOptionalFixed64) {
    [output writeFixed64:8 value:self.optionalFixed64];
  }
  if (self.hasOptionalSfixed32) {
    [output writeSFixed32:9 value:self.optionalSfixed32];
  }
  if (self.hasOptionalSfixed64) {
    [output writeSFixed64:10 value:self.optionalSfixed64];
  }
  if (self.hasOptionalFloat) {
    [output writeFloat:11 value:self.optionalFloat];
  }
  if (self.hasOptionalDouble) {
    [output writeDouble:12 value:self.optionalDouble];
  }
  if (self.hasOptionalBool) {
    [output writeBool:13 value:self.optionalBool];
  }
  if (self.hasOptionalString) {
    [output writeString:14 value:self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output writeData:15 value:self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output writeGroup:16 value:self.optionalGroup];
  }
  if (self.hasOptionalNestedMessage) {
    [output writeMessage:18 value:self.optionalNestedMessage];
  }
  if (self.hasOptionalForeignMessage) {
    [output writeMessage:19 value:self.optionalForeignMessage];
  }
  if (self.hasOptionalImportMessage) {
    [output writeMessage:20 value:self.optionalImportMessage];
  }
  if (self.hasOptionalNestedEnum) {
    [output writeEnum:21 value:self.optionalNestedEnum];
  }
  if (self.hasOptionalForeignEnum) {
    [output writeEnum:22 value:self.optionalForeignEnum];
  }
  if (self.hasOptionalImportEnum) {
    [output writeEnum:23 value:self.optionalImportEnum];
  }
  if (self.hasOptionalStringPiece) {
    [output writeString:24 value:self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output writeString:25 value:self.optionalCord];
  }
  if (self.hasOptionalPublicImportMessage) {
    [output writeMessage:26 value:self.optionalPublicImportMessage];
  }
  if (self.hasOptionalLazyMessage) {
    [output writeMessage:27 value:self.optionalLazyMessage];
  }
  const NSUInteger repeatedInt32ArrayCount = self.repeatedInt32Array.count;
  if (repeatedInt32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < repeatedInt32ArrayCount; ++i) {
      [output writeInt32:31 value:values[i]];
    }
  }
  const NSUInteger repeatedInt64ArrayCount = self.repeatedInt64Array.count;
  if (repeatedInt64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < repeatedInt64ArrayCount; ++i) {
      [output writeInt64:32 value:values[i]];
    }
  }
  const NSUInteger repeatedUint32ArrayCount = self.repeatedUint32Array.count;
  if (repeatedUint32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.repeatedUint32Array.data;
    for (NSUInteger i = 0; i < repeatedUint32ArrayCount; ++i) {
      [output writeUInt32:33 value:values[i]];
    }
  }
  const NSUInteger repeatedUint64ArrayCount = self.repeatedUint64Array.count;
  if (repeatedUint64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < repeatedUint64ArrayCount; ++i) {
      [output writeUInt64:34 value:values[i]];
    }
  }
  const NSUInteger repeatedSint32ArrayCount = self.repeatedSint32Array.count;
  if (repeatedSint32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.repeatedSint32Array.data;
    for (NSUInteger i = 0; i < repeatedSint32ArrayCount; ++i) {
      [output writeSInt32:35 value:values[i]];
    }
  }
  const NSUInteger repeatedSint64ArrayCount = self.repeatedSint64Array.count;
  if (repeatedSint64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.repeatedSint64Array.data;
    for (NSUInteger i = 0; i < repeatedSint64ArrayCount; ++i) {
      [output writeSInt64:36 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed32ArrayCount = self.repeatedFixed32Array.count;
  if (repeatedFixed32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.repeatedFixed32Array.data;
    for (NSUInteger i = 0; i < repeatedFixed32ArrayCount; ++i) {
      [output writeFixed32:37 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed64ArrayCount = self.repeatedFixed64Array.count;
  if (repeatedFixed64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.repeatedFixed64Array.data;
    for (NSUInteger i = 0; i < repeatedFixed64ArrayCount; ++i) {
      [output writeFixed64:38 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed32ArrayCount = self.repeatedSfixed32Array.count;
  if (repeatedSfixed32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.repeatedSfixed32Array.data;
    for (NSUInteger i = 0; i < repeatedSfixed32ArrayCount; ++i) {
      [output writeSFixed32:39 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed64ArrayCount = self.repeatedSfixed64Array.count;
  if (repeatedSfixed64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.repeatedSfixed64Array.data;
    for (NSUInteger i = 0; i < repeatedSfixed64ArrayCount; ++i) {
      [output writeSFixed64:40 value:values[i]];
    }
  }
  const NSUInteger repeatedFloatArrayCount = self.repeatedFloatArray.count;
  if (repeatedFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.repeatedFloatArray.data;
    for (NSUInteger i = 0; i < repeatedFloatArrayCount; ++i) {
      [output writeFloat:41 value:values[i]];
    }
  }
  const NSUInteger repeatedDoubleArrayCount = self.repeatedDoubleArray.count;
  if (repeatedDoubleArrayCount > 0) {
    const Float64 *values = (const Float64 *)self.repeatedDoubleArray.data;
    for (NSUInteger i = 0; i < repeatedDoubleArrayCount; ++i) {
      [output writeDouble:42 value:values[i]];
    }
  }
  const NSUInteger repeatedBoolArrayCount = self.repeatedBoolArray.count;
  if (repeatedBoolArrayCount > 0) {
    const BOOL *values = (const BOOL *)self.repeatedBoolArray.data;
    for (NSUInteger i = 0; i < repeatedBoolArrayCount; ++i) {
      [output writeBool:43 value:values[i]];
    }
  }
  [self.repeatedStringArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:44 value:element];
  }];
  [self.repeatedBytesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    [output writeData:45 value:element];
  }];
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    [output writeGroup:46 value:element];
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:48 value:element];
  }];
  [self.repeatedForeignMessageArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:49 value:element];
  }];
  [self.repeatedImportMessageArray enumerateObjectsUsingBlock:^(ImportMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:50 value:element];
  }];
  const NSUInteger repeatedNestedEnumArrayCount = self.repeatedNestedEnumArray.count;
  const TestAllTypesNestedEnum *repeatedNestedEnumArrayValues = (const TestAllTypesNestedEnum *)self.repeatedNestedEnumArray.data;
  for (NSUInteger i = 0; i < repeatedNestedEnumArrayCount; ++i) {
    [output writeEnum:51 value:repeatedNestedEnumArrayValues[i]];
  }
  const NSUInteger repeatedForeignEnumArrayCount = self.repeatedForeignEnumArray.count;
  const ForeignEnum *repeatedForeignEnumArrayValues = (const ForeignEnum *)self.repeatedForeignEnumArray.data;
  for (NSUInteger i = 0; i < repeatedForeignEnumArrayCount; ++i) {
    [output writeEnum:52 value:repeatedForeignEnumArrayValues[i]];
  }
  const NSUInteger repeatedImportEnumArrayCount = self.repeatedImportEnumArray.count;
  const ImportEnum *repeatedImportEnumArrayValues = (const ImportEnum *)self.repeatedImportEnumArray.data;
  for (NSUInteger i = 0; i < repeatedImportEnumArrayCount; ++i) {
    [output writeEnum:53 value:repeatedImportEnumArrayValues[i]];
  }
  [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:54 value:element];
  }];
  [self.repeatedCordArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:55 value:element];
  }];
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:57 value:element];
  }];
  if (self.hasDefaultInt32) {
    [output writeInt32:61 value:self.defaultInt32];
  }
  if (self.hasDefaultInt64) {
    [output writeInt64:62 value:self.defaultInt64];
  }
  if (self.hasDefaultUint32) {
    [output writeUInt32:63 value:self.defaultUint32];
  }
  if (self.hasDefaultUint64) {
    [output writeUInt64:64 value:self.defaultUint64];
  }
  if (self.hasDefaultSint32) {
    [output writeSInt32:65 value:self.defaultSint32];
  }
  if (self.hasDefaultSint64) {
    [output writeSInt64:66 value:self.defaultSint64];
  }
  if (self.hasDefaultFixed32) {
    [output writeFixed32:67 value:self.defaultFixed32];
  }
  if (self.hasDefaultFixed64) {
    [output writeFixed64:68 value:self.defaultFixed64];
  }
  if (self.hasDefaultSfixed32) {
    [output writeSFixed32:69 value:self.defaultSfixed32];
  }
  if (self.hasDefaultSfixed64) {
    [output writeSFixed64:70 value:self.defaultSfixed64];
  }
  if (self.hasDefaultFloat) {
    [output writeFloat:71 value:self.defaultFloat];
  }
  if (self.hasDefaultDouble) {
    [output writeDouble:72 value:self.defaultDouble];
  }
  if (self.hasDefaultBool) {
    [output writeBool:73 value:self.defaultBool];
  }
  if (self.hasDefaultString) {
    [output writeString:74 value:self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output writeData:75 value:self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output writeEnum:81 value:self.defaultNestedEnum];
  }
  if (self.hasDefaultForeignEnum) {
    [output writeEnum:82 value:self.defaultForeignEnum];
  }
  if (self.hasDefaultImportEnum) {
    [output writeEnum:83 value:self.defaultImportEnum];
  }
  if (self.hasDefaultStringPiece) {
    [output writeString:84 value:self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output writeString:85 value:self.defaultCord];
  }
  if (self.hasOneofUint32) {
    [output writeUInt32:111 value:self.oneofUint32];
  }
  if (self.hasOneofNestedMessage) {
    [output writeMessage:112 value:self.oneofNestedMessage];
  }
  if (self.hasOneofString) {
    [output writeString:113 value:self.oneofString];
  }
  if (self.hasOneofBytes) {
    [output writeData:114 value:self.oneofBytes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptionalInt32) {
    size_ += computeInt32Size(1, self.optionalInt32);
  }
  if (self.hasOptionalInt64) {
    size_ += computeInt64Size(2, self.optionalInt64);
  }
  if (self.hasOptionalUint32) {
    size_ += computeUInt32Size(3, self.optionalUint32);
  }
  if (self.hasOptionalUint64) {
    size_ += computeUInt64Size(4, self.optionalUint64);
  }
  if (self.hasOptionalSint32) {
    size_ += computeSInt32Size(5, self.optionalSint32);
  }
  if (self.hasOptionalSint64) {
    size_ += computeSInt64Size(6, self.optionalSint64);
  }
  if (self.hasOptionalFixed32) {
    size_ += computeFixed32Size(7, self.optionalFixed32);
  }
  if (self.hasOptionalFixed64) {
    size_ += computeFixed64Size(8, self.optionalFixed64);
  }
  if (self.hasOptionalSfixed32) {
    size_ += computeSFixed32Size(9, self.optionalSfixed32);
  }
  if (self.hasOptionalSfixed64) {
    size_ += computeSFixed64Size(10, self.optionalSfixed64);
  }
  if (self.hasOptionalFloat) {
    size_ += computeFloatSize(11, self.optionalFloat);
  }
  if (self.hasOptionalDouble) {
    size_ += computeDoubleSize(12, self.optionalDouble);
  }
  if (self.hasOptionalBool) {
    size_ += computeBoolSize(13, self.optionalBool);
  }
  if (self.hasOptionalString) {
    size_ += computeStringSize(14, self.optionalString);
  }
  if (self.hasOptionalBytes) {
    size_ += computeDataSize(15, self.optionalBytes);
  }
  if (self.hasOptionalGroup) {
    size_ += computeGroupSize(16, self.optionalGroup);
  }
  if (self.hasOptionalNestedMessage) {
    size_ += computeMessageSize(18, self.optionalNestedMessage);
  }
  if (self.hasOptionalForeignMessage) {
    size_ += computeMessageSize(19, self.optionalForeignMessage);
  }
  if (self.hasOptionalImportMessage) {
    size_ += computeMessageSize(20, self.optionalImportMessage);
  }
  if (self.hasOptionalNestedEnum) {
    size_ += computeEnumSize(21, self.optionalNestedEnum);
  }
  if (self.hasOptionalForeignEnum) {
    size_ += computeEnumSize(22, self.optionalForeignEnum);
  }
  if (self.hasOptionalImportEnum) {
    size_ += computeEnumSize(23, self.optionalImportEnum);
  }
  if (self.hasOptionalStringPiece) {
    size_ += computeStringSize(24, self.optionalStringPiece);
  }
  if (self.hasOptionalCord) {
    size_ += computeStringSize(25, self.optionalCord);
  }
  if (self.hasOptionalPublicImportMessage) {
    size_ += computeMessageSize(26, self.optionalPublicImportMessage);
  }
  if (self.hasOptionalLazyMessage) {
    size_ += computeMessageSize(27, self.optionalLazyMessage);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedInt32Array.count;
    const SInt32 *values = (const SInt32 *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedInt64Array.count;
    const SInt64 *values = (const SInt64 *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedUint32Array.count;
    const UInt32 *values = (const UInt32 *)self.repeatedUint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedUint64Array.count;
    const UInt64 *values = (const UInt64 *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSint32Array.count;
    const SInt32 *values = (const SInt32 *)self.repeatedSint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSint64Array.count;
    const SInt64 *values = (const SInt64 *)self.repeatedSint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSfixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSfixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFloatArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedDoubleArray.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedBoolArray.count;
    dataSize = (SInt32)(1 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedStringArray.count;
    [self.repeatedStringArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedBytesArray.count;
    [self.repeatedBytesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeDataSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    size_ += computeGroupSize(46, element);
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(48, element);
  }];
  [self.repeatedForeignMessageArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(49, element);
  }];
  [self.repeatedImportMessageArray enumerateObjectsUsingBlock:^(ImportMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(50, element);
  }];
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedNestedEnumArray.count;
    const TestAllTypesNestedEnum *values = (const TestAllTypesNestedEnum *)self.repeatedNestedEnumArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedForeignEnumArray.count;
    const ForeignEnum *values = (const ForeignEnum *)self.repeatedForeignEnumArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedImportEnumArray.count;
    const ImportEnum *values = (const ImportEnum *)self.repeatedImportEnumArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedStringPieceArray.count;
    [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedCordArray.count;
    [self.repeatedCordArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(57, element);
  }];
  if (self.hasDefaultInt32) {
    size_ += computeInt32Size(61, self.defaultInt32);
  }
  if (self.hasDefaultInt64) {
    size_ += computeInt64Size(62, self.defaultInt64);
  }
  if (self.hasDefaultUint32) {
    size_ += computeUInt32Size(63, self.defaultUint32);
  }
  if (self.hasDefaultUint64) {
    size_ += computeUInt64Size(64, self.defaultUint64);
  }
  if (self.hasDefaultSint32) {
    size_ += computeSInt32Size(65, self.defaultSint32);
  }
  if (self.hasDefaultSint64) {
    size_ += computeSInt64Size(66, self.defaultSint64);
  }
  if (self.hasDefaultFixed32) {
    size_ += computeFixed32Size(67, self.defaultFixed32);
  }
  if (self.hasDefaultFixed64) {
    size_ += computeFixed64Size(68, self.defaultFixed64);
  }
  if (self.hasDefaultSfixed32) {
    size_ += computeSFixed32Size(69, self.defaultSfixed32);
  }
  if (self.hasDefaultSfixed64) {
    size_ += computeSFixed64Size(70, self.defaultSfixed64);
  }
  if (self.hasDefaultFloat) {
    size_ += computeFloatSize(71, self.defaultFloat);
  }
  if (self.hasDefaultDouble) {
    size_ += computeDoubleSize(72, self.defaultDouble);
  }
  if (self.hasDefaultBool) {
    size_ += computeBoolSize(73, self.defaultBool);
  }
  if (self.hasDefaultString) {
    size_ += computeStringSize(74, self.defaultString);
  }
  if (self.hasDefaultBytes) {
    size_ += computeDataSize(75, self.defaultBytes);
  }
  if (self.hasDefaultNestedEnum) {
    size_ += computeEnumSize(81, self.defaultNestedEnum);
  }
  if (self.hasDefaultForeignEnum) {
    size_ += computeEnumSize(82, self.defaultForeignEnum);
  }
  if (self.hasDefaultImportEnum) {
    size_ += computeEnumSize(83, self.defaultImportEnum);
  }
  if (self.hasDefaultStringPiece) {
    size_ += computeStringSize(84, self.defaultStringPiece);
  }
  if (self.hasDefaultCord) {
    size_ += computeStringSize(85, self.defaultCord);
  }
  if (self.hasOneofUint32) {
    size_ += computeUInt32Size(111, self.oneofUint32);
  }
  if (self.hasOneofNestedMessage) {
    size_ += computeMessageSize(112, self.oneofNestedMessage);
  }
  if (self.hasOneofString) {
    size_ += computeStringSize(113, self.oneofString);
  }
  if (self.hasOneofBytes) {
    size_ += computeDataSize(114, self.oneofBytes);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypes*) parseFromData:(NSData*) data {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromData:data] build];
}
+ (TestAllTypes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypes*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromInputStream:input] build];
}
+ (TestAllTypes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypes*)[[[TestAllTypes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesBuilder*) builder {
  return [[TestAllTypesBuilder alloc] init];
}
+ (TestAllTypesBuilder*) builderWithPrototype:(TestAllTypes*) prototype {
  return [[TestAllTypes builder] mergeFrom:prototype];
}
- (TestAllTypesBuilder*) builder {
  return [TestAllTypes builder];
}
- (TestAllTypesBuilder*) toBuilder {
  return [TestAllTypes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOptionalInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt32", [NSNumber numberWithInteger:self.optionalInt32]];
  }
  if (self.hasOptionalInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt64", [NSNumber numberWithLongLong:self.optionalInt64]];
  }
  if (self.hasOptionalUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint32", [NSNumber numberWithInteger:self.optionalUint32]];
  }
  if (self.hasOptionalUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint64", [NSNumber numberWithLongLong:self.optionalUint64]];
  }
  if (self.hasOptionalSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint32", [NSNumber numberWithInteger:self.optionalSint32]];
  }
  if (self.hasOptionalSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint64", [NSNumber numberWithLongLong:self.optionalSint64]];
  }
  if (self.hasOptionalFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed32", [NSNumber numberWithInteger:self.optionalFixed32]];
  }
  if (self.hasOptionalFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed64", [NSNumber numberWithLongLong:self.optionalFixed64]];
  }
  if (self.hasOptionalSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed32", [NSNumber numberWithInteger:self.optionalSfixed32]];
  }
  if (self.hasOptionalSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed64", [NSNumber numberWithLongLong:self.optionalSfixed64]];
  }
  if (self.hasOptionalFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFloat", [NSNumber numberWithFloat:self.optionalFloat]];
  }
  if (self.hasOptionalDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalDouble", [NSNumber numberWithDouble:self.optionalDouble]];
  }
  if (self.hasOptionalBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBool", [NSNumber numberWithBool:self.optionalBool]];
  }
  if (self.hasOptionalString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalString", self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBytes", self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalGroup"];
    [self.optionalGroup writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalNestedMessage"];
    [self.optionalNestedMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalForeignMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalForeignMessage"];
    [self.optionalForeignMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalImportMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalImportMessage"];
    [self.optionalImportMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalNestedEnum", NSStringFromTestAllTypesNestedEnum(self.optionalNestedEnum)];
  }
  if (self.hasOptionalForeignEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalForeignEnum", NSStringFromForeignEnum(self.optionalForeignEnum)];
  }
  if (self.hasOptionalImportEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalImportEnum", NSStringFromImportEnum(self.optionalImportEnum)];
  }
  if (self.hasOptionalStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalStringPiece", self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalCord", self.optionalCord];
  }
  if (self.hasOptionalPublicImportMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalPublicImportMessage"];
    [self.optionalPublicImportMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalLazyMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalLazyMessage"];
    [self.optionalLazyMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.repeatedInt32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt32", obj];
  }];
  [self.repeatedInt64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt64", obj];
  }];
  [self.repeatedUint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint32", obj];
  }];
  [self.repeatedUint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint64", obj];
  }];
  [self.repeatedSint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint32", obj];
  }];
  [self.repeatedSint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint64", obj];
  }];
  [self.repeatedFixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed32", obj];
  }];
  [self.repeatedFixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed64", obj];
  }];
  [self.repeatedSfixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed32", obj];
  }];
  [self.repeatedSfixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed64", obj];
  }];
  [self.repeatedFloatArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFloat", obj];
  }];
  [self.repeatedDoubleArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedDouble", obj];
  }];
  [self.repeatedBoolArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBool", obj];
  }];
  [self.repeatedStringArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedString", obj];
  }];
  [self.repeatedBytesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBytes", obj];
  }];
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedGroup"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedNestedMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repeatedForeignMessageArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedForeignMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repeatedImportMessageArray enumerateObjectsUsingBlock:^(ImportMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedImportMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repeatedNestedEnumArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedNestedEnum", NSStringFromTestAllTypesNestedEnum([(NSNumber *)element intValue])];
  }];
  [self.repeatedForeignEnumArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedForeignEnum", NSStringFromForeignEnum([(NSNumber *)element intValue])];
  }];
  [self.repeatedImportEnumArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedImportEnum", NSStringFromImportEnum([(NSNumber *)element intValue])];
  }];
  [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedStringPiece", obj];
  }];
  [self.repeatedCordArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedCord", obj];
  }];
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedLazyMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDefaultInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt32", [NSNumber numberWithInteger:self.defaultInt32]];
  }
  if (self.hasDefaultInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt64", [NSNumber numberWithLongLong:self.defaultInt64]];
  }
  if (self.hasDefaultUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint32", [NSNumber numberWithInteger:self.defaultUint32]];
  }
  if (self.hasDefaultUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint64", [NSNumber numberWithLongLong:self.defaultUint64]];
  }
  if (self.hasDefaultSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint32", [NSNumber numberWithInteger:self.defaultSint32]];
  }
  if (self.hasDefaultSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint64", [NSNumber numberWithLongLong:self.defaultSint64]];
  }
  if (self.hasDefaultFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed32", [NSNumber numberWithInteger:self.defaultFixed32]];
  }
  if (self.hasDefaultFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed64", [NSNumber numberWithLongLong:self.defaultFixed64]];
  }
  if (self.hasDefaultSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed32", [NSNumber numberWithInteger:self.defaultSfixed32]];
  }
  if (self.hasDefaultSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed64", [NSNumber numberWithLongLong:self.defaultSfixed64]];
  }
  if (self.hasDefaultFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFloat", [NSNumber numberWithFloat:self.defaultFloat]];
  }
  if (self.hasDefaultDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultDouble", [NSNumber numberWithDouble:self.defaultDouble]];
  }
  if (self.hasDefaultBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBool", [NSNumber numberWithBool:self.defaultBool]];
  }
  if (self.hasDefaultString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultString", self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBytes", self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultNestedEnum", NSStringFromTestAllTypesNestedEnum(self.defaultNestedEnum)];
  }
  if (self.hasDefaultForeignEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultForeignEnum", NSStringFromForeignEnum(self.defaultForeignEnum)];
  }
  if (self.hasDefaultImportEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultImportEnum", NSStringFromImportEnum(self.defaultImportEnum)];
  }
  if (self.hasDefaultStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultStringPiece", self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultCord", self.defaultCord];
  }
  if (self.hasOneofUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneofUint32", [NSNumber numberWithInteger:self.oneofUint32]];
  }
  if (self.hasOneofNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"oneofNestedMessage"];
    [self.oneofNestedMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOneofString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneofString", self.oneofString];
  }
  if (self.hasOneofBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneofBytes", self.oneofBytes];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOptionalInt32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalInt32] forKey: @"optionalInt32"];
  }
  if (self.hasOptionalInt64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalInt64] forKey: @"optionalInt64"];
  }
  if (self.hasOptionalUint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalUint32] forKey: @"optionalUint32"];
  }
  if (self.hasOptionalUint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalUint64] forKey: @"optionalUint64"];
  }
  if (self.hasOptionalSint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalSint32] forKey: @"optionalSint32"];
  }
  if (self.hasOptionalSint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalSint64] forKey: @"optionalSint64"];
  }
  if (self.hasOptionalFixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalFixed32] forKey: @"optionalFixed32"];
  }
  if (self.hasOptionalFixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalFixed64] forKey: @"optionalFixed64"];
  }
  if (self.hasOptionalSfixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalSfixed32] forKey: @"optionalSfixed32"];
  }
  if (self.hasOptionalSfixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalSfixed64] forKey: @"optionalSfixed64"];
  }
  if (self.hasOptionalFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.optionalFloat] forKey: @"optionalFloat"];
  }
  if (self.hasOptionalDouble) {
    [dictionary setObject: [NSNumber numberWithDouble:self.optionalDouble] forKey: @"optionalDouble"];
  }
  if (self.hasOptionalBool) {
    [dictionary setObject: [NSNumber numberWithBool:self.optionalBool] forKey: @"optionalBool"];
  }
  if (self.hasOptionalString) {
    [dictionary setObject: self.optionalString forKey: @"optionalString"];
  }
  if (self.hasOptionalBytes) {
    [dictionary setObject: self.optionalBytes forKey: @"optionalBytes"];
  }
  if (self.hasOptionalGroup) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalGroup storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalGroup"];
  }
  if (self.hasOptionalNestedMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalNestedMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalNestedMessage"];
  }
  if (self.hasOptionalForeignMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalForeignMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalForeignMessage"];
  }
  if (self.hasOptionalImportMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalImportMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalImportMessage"];
  }
  if (self.hasOptionalNestedEnum) {
    [dictionary setObject: @(self.optionalNestedEnum) forKey: @"optionalNestedEnum"];
  }
  if (self.hasOptionalForeignEnum) {
    [dictionary setObject: @(self.optionalForeignEnum) forKey: @"optionalForeignEnum"];
  }
  if (self.hasOptionalImportEnum) {
    [dictionary setObject: @(self.optionalImportEnum) forKey: @"optionalImportEnum"];
  }
  if (self.hasOptionalStringPiece) {
    [dictionary setObject: self.optionalStringPiece forKey: @"optionalStringPiece"];
  }
  if (self.hasOptionalCord) {
    [dictionary setObject: self.optionalCord forKey: @"optionalCord"];
  }
  if (self.hasOptionalPublicImportMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalPublicImportMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalPublicImportMessage"];
  }
  if (self.hasOptionalLazyMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalLazyMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalLazyMessage"];
  }
  NSMutableArray * repeatedInt32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedInt32ArrayCount=self.repeatedInt32Array.count;
  for(int i=0;i<repeatedInt32ArrayCount;i++){
    [repeatedInt32ArrayArray addObject: @([self.repeatedInt32Array int32AtIndex:i])];
  }
  [dictionary setObject: repeatedInt32ArrayArray forKey: @"repeatedInt32"];
  NSMutableArray * repeatedInt64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedInt64ArrayCount=self.repeatedInt64Array.count;
  for(int i=0;i<repeatedInt64ArrayCount;i++){
    [repeatedInt64ArrayArray addObject: @([self.repeatedInt64Array int64AtIndex:i])];
  }
  [dictionary setObject: repeatedInt64ArrayArray forKey: @"repeatedInt64"];
  NSMutableArray * repeatedUint32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedUint32ArrayCount=self.repeatedUint32Array.count;
  for(int i=0;i<repeatedUint32ArrayCount;i++){
    [repeatedUint32ArrayArray addObject: @([self.repeatedUint32Array uint32AtIndex:i])];
  }
  [dictionary setObject: repeatedUint32ArrayArray forKey: @"repeatedUint32"];
  NSMutableArray * repeatedUint64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedUint64ArrayCount=self.repeatedUint64Array.count;
  for(int i=0;i<repeatedUint64ArrayCount;i++){
    [repeatedUint64ArrayArray addObject: @([self.repeatedUint64Array uint64AtIndex:i])];
  }
  [dictionary setObject: repeatedUint64ArrayArray forKey: @"repeatedUint64"];
  NSMutableArray * repeatedSint32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSint32ArrayCount=self.repeatedSint32Array.count;
  for(int i=0;i<repeatedSint32ArrayCount;i++){
    [repeatedSint32ArrayArray addObject: @([self.repeatedSint32Array int32AtIndex:i])];
  }
  [dictionary setObject: repeatedSint32ArrayArray forKey: @"repeatedSint32"];
  NSMutableArray * repeatedSint64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSint64ArrayCount=self.repeatedSint64Array.count;
  for(int i=0;i<repeatedSint64ArrayCount;i++){
    [repeatedSint64ArrayArray addObject: @([self.repeatedSint64Array int64AtIndex:i])];
  }
  [dictionary setObject: repeatedSint64ArrayArray forKey: @"repeatedSint64"];
  NSMutableArray * repeatedFixed32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedFixed32ArrayCount=self.repeatedFixed32Array.count;
  for(int i=0;i<repeatedFixed32ArrayCount;i++){
    [repeatedFixed32ArrayArray addObject: @([self.repeatedFixed32Array uint32AtIndex:i])];
  }
  [dictionary setObject: repeatedFixed32ArrayArray forKey: @"repeatedFixed32"];
  NSMutableArray * repeatedFixed64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedFixed64ArrayCount=self.repeatedFixed64Array.count;
  for(int i=0;i<repeatedFixed64ArrayCount;i++){
    [repeatedFixed64ArrayArray addObject: @([self.repeatedFixed64Array uint64AtIndex:i])];
  }
  [dictionary setObject: repeatedFixed64ArrayArray forKey: @"repeatedFixed64"];
  NSMutableArray * repeatedSfixed32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSfixed32ArrayCount=self.repeatedSfixed32Array.count;
  for(int i=0;i<repeatedSfixed32ArrayCount;i++){
    [repeatedSfixed32ArrayArray addObject: @([self.repeatedSfixed32Array int32AtIndex:i])];
  }
  [dictionary setObject: repeatedSfixed32ArrayArray forKey: @"repeatedSfixed32"];
  NSMutableArray * repeatedSfixed64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSfixed64ArrayCount=self.repeatedSfixed64Array.count;
  for(int i=0;i<repeatedSfixed64ArrayCount;i++){
    [repeatedSfixed64ArrayArray addObject: @([self.repeatedSfixed64Array int64AtIndex:i])];
  }
  [dictionary setObject: repeatedSfixed64ArrayArray forKey: @"repeatedSfixed64"];
  NSMutableArray * repeatedFloatArrayArray = [NSMutableArray new];
  NSUInteger repeatedFloatArrayCount=self.repeatedFloatArray.count;
  for(int i=0;i<repeatedFloatArrayCount;i++){
    [repeatedFloatArrayArray addObject: @([self.repeatedFloatArray floatAtIndex:i])];
  }
  [dictionary setObject: repeatedFloatArrayArray forKey: @"repeatedFloat"];
  NSMutableArray * repeatedDoubleArrayArray = [NSMutableArray new];
  NSUInteger repeatedDoubleArrayCount=self.repeatedDoubleArray.count;
  for(int i=0;i<repeatedDoubleArrayCount;i++){
    [repeatedDoubleArrayArray addObject: @([self.repeatedDoubleArray doubleAtIndex:i])];
  }
  [dictionary setObject: repeatedDoubleArrayArray forKey: @"repeatedDouble"];
  NSMutableArray * repeatedBoolArrayArray = [NSMutableArray new];
  NSUInteger repeatedBoolArrayCount=self.repeatedBoolArray.count;
  for(int i=0;i<repeatedBoolArrayCount;i++){
    [repeatedBoolArrayArray addObject: @([self.repeatedBoolArray boolAtIndex:i])];
  }
  [dictionary setObject: repeatedBoolArrayArray forKey: @"repeatedBool"];
  [dictionary setObject:self.repeatedString forKey: @"repeatedString"];
  [dictionary setObject:self.repeatedBytes forKey: @"repeatedBytes"];
  for (TestAllTypesRepeatedGroup* element in self.repeatedGroupArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedGroup"];
  }
  for (TestAllTypesNestedMessage* element in self.repeatedNestedMessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedNestedMessage"];
  }
  for (ForeignMessage* element in self.repeatedForeignMessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedForeignMessage"];
  }
  for (ImportMessage* element in self.repeatedImportMessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedImportMessage"];
  }
  const NSUInteger repeatedNestedEnumArrayCount = self.repeatedNestedEnumArray.count;
  if (repeatedNestedEnumArrayCount > 0) {
    const TestAllTypesNestedEnum *repeatedNestedEnumArrayValues = (const TestAllTypesNestedEnum *)self.repeatedNestedEnumArray.data;
    NSMutableArray * repeatedNestedEnumArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < repeatedNestedEnumArrayCount; ++i) {
      [repeatedNestedEnumArrayArray addObject: @(repeatedNestedEnumArrayValues[i])];
    }
    [dictionary setObject: repeatedNestedEnumArrayArray forKey: @"repeatedNestedEnum"];
  }
  const NSUInteger repeatedForeignEnumArrayCount = self.repeatedForeignEnumArray.count;
  if (repeatedForeignEnumArrayCount > 0) {
    const ForeignEnum *repeatedForeignEnumArrayValues = (const ForeignEnum *)self.repeatedForeignEnumArray.data;
    NSMutableArray * repeatedForeignEnumArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < repeatedForeignEnumArrayCount; ++i) {
      [repeatedForeignEnumArrayArray addObject: @(repeatedForeignEnumArrayValues[i])];
    }
    [dictionary setObject: repeatedForeignEnumArrayArray forKey: @"repeatedForeignEnum"];
  }
  const NSUInteger repeatedImportEnumArrayCount = self.repeatedImportEnumArray.count;
  if (repeatedImportEnumArrayCount > 0) {
    const ImportEnum *repeatedImportEnumArrayValues = (const ImportEnum *)self.repeatedImportEnumArray.data;
    NSMutableArray * repeatedImportEnumArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < repeatedImportEnumArrayCount; ++i) {
      [repeatedImportEnumArrayArray addObject: @(repeatedImportEnumArrayValues[i])];
    }
    [dictionary setObject: repeatedImportEnumArrayArray forKey: @"repeatedImportEnum"];
  }
  [dictionary setObject:self.repeatedStringPiece forKey: @"repeatedStringPiece"];
  [dictionary setObject:self.repeatedCord forKey: @"repeatedCord"];
  for (TestAllTypesNestedMessage* element in self.repeatedLazyMessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedLazyMessage"];
  }
  if (self.hasDefaultInt32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultInt32] forKey: @"defaultInt32"];
  }
  if (self.hasDefaultInt64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultInt64] forKey: @"defaultInt64"];
  }
  if (self.hasDefaultUint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultUint32] forKey: @"defaultUint32"];
  }
  if (self.hasDefaultUint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultUint64] forKey: @"defaultUint64"];
  }
  if (self.hasDefaultSint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultSint32] forKey: @"defaultSint32"];
  }
  if (self.hasDefaultSint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultSint64] forKey: @"defaultSint64"];
  }
  if (self.hasDefaultFixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultFixed32] forKey: @"defaultFixed32"];
  }
  if (self.hasDefaultFixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultFixed64] forKey: @"defaultFixed64"];
  }
  if (self.hasDefaultSfixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultSfixed32] forKey: @"defaultSfixed32"];
  }
  if (self.hasDefaultSfixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultSfixed64] forKey: @"defaultSfixed64"];
  }
  if (self.hasDefaultFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.defaultFloat] forKey: @"defaultFloat"];
  }
  if (self.hasDefaultDouble) {
    [dictionary setObject: [NSNumber numberWithDouble:self.defaultDouble] forKey: @"defaultDouble"];
  }
  if (self.hasDefaultBool) {
    [dictionary setObject: [NSNumber numberWithBool:self.defaultBool] forKey: @"defaultBool"];
  }
  if (self.hasDefaultString) {
    [dictionary setObject: self.defaultString forKey: @"defaultString"];
  }
  if (self.hasDefaultBytes) {
    [dictionary setObject: self.defaultBytes forKey: @"defaultBytes"];
  }
  if (self.hasDefaultNestedEnum) {
    [dictionary setObject: @(self.defaultNestedEnum) forKey: @"defaultNestedEnum"];
  }
  if (self.hasDefaultForeignEnum) {
    [dictionary setObject: @(self.defaultForeignEnum) forKey: @"defaultForeignEnum"];
  }
  if (self.hasDefaultImportEnum) {
    [dictionary setObject: @(self.defaultImportEnum) forKey: @"defaultImportEnum"];
  }
  if (self.hasDefaultStringPiece) {
    [dictionary setObject: self.defaultStringPiece forKey: @"defaultStringPiece"];
  }
  if (self.hasDefaultCord) {
    [dictionary setObject: self.defaultCord forKey: @"defaultCord"];
  }
  if (self.hasOneofUint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.oneofUint32] forKey: @"oneofUint32"];
  }
  if (self.hasOneofNestedMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.oneofNestedMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"oneofNestedMessage"];
  }
  if (self.hasOneofString) {
    [dictionary setObject: self.oneofString forKey: @"oneofString"];
  }
  if (self.hasOneofBytes) {
    [dictionary setObject: self.oneofBytes forKey: @"oneofBytes"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypes class]]) {
    return NO;
  }
  TestAllTypes *otherMessage = other;
  return
      self.hasOptionalInt32 == otherMessage.hasOptionalInt32 &&
      (!self.hasOptionalInt32 || self.optionalInt32 == otherMessage.optionalInt32) &&
      self.hasOptionalInt64 == otherMessage.hasOptionalInt64 &&
      (!self.hasOptionalInt64 || self.optionalInt64 == otherMessage.optionalInt64) &&
      self.hasOptionalUint32 == otherMessage.hasOptionalUint32 &&
      (!self.hasOptionalUint32 || self.optionalUint32 == otherMessage.optionalUint32) &&
      self.hasOptionalUint64 == otherMessage.hasOptionalUint64 &&
      (!self.hasOptionalUint64 || self.optionalUint64 == otherMessage.optionalUint64) &&
      self.hasOptionalSint32 == otherMessage.hasOptionalSint32 &&
      (!self.hasOptionalSint32 || self.optionalSint32 == otherMessage.optionalSint32) &&
      self.hasOptionalSint64 == otherMessage.hasOptionalSint64 &&
      (!self.hasOptionalSint64 || self.optionalSint64 == otherMessage.optionalSint64) &&
      self.hasOptionalFixed32 == otherMessage.hasOptionalFixed32 &&
      (!self.hasOptionalFixed32 || self.optionalFixed32 == otherMessage.optionalFixed32) &&
      self.hasOptionalFixed64 == otherMessage.hasOptionalFixed64 &&
      (!self.hasOptionalFixed64 || self.optionalFixed64 == otherMessage.optionalFixed64) &&
      self.hasOptionalSfixed32 == otherMessage.hasOptionalSfixed32 &&
      (!self.hasOptionalSfixed32 || self.optionalSfixed32 == otherMessage.optionalSfixed32) &&
      self.hasOptionalSfixed64 == otherMessage.hasOptionalSfixed64 &&
      (!self.hasOptionalSfixed64 || self.optionalSfixed64 == otherMessage.optionalSfixed64) &&
      self.hasOptionalFloat == otherMessage.hasOptionalFloat &&
      (!self.hasOptionalFloat || self.optionalFloat == otherMessage.optionalFloat) &&
      self.hasOptionalDouble == otherMessage.hasOptionalDouble &&
      (!self.hasOptionalDouble || self.optionalDouble == otherMessage.optionalDouble) &&
      self.hasOptionalBool == otherMessage.hasOptionalBool &&
      (!self.hasOptionalBool || self.optionalBool == otherMessage.optionalBool) &&
      self.hasOptionalString == otherMessage.hasOptionalString &&
      (!self.hasOptionalString || [self.optionalString isEqual:otherMessage.optionalString]) &&
      self.hasOptionalBytes == otherMessage.hasOptionalBytes &&
      (!self.hasOptionalBytes || [self.optionalBytes isEqual:otherMessage.optionalBytes]) &&
      self.hasOptionalGroup == otherMessage.hasOptionalGroup &&
      (!self.hasOptionalGroup || [self.optionalGroup isEqual:otherMessage.optionalGroup]) &&
      self.hasOptionalNestedMessage == otherMessage.hasOptionalNestedMessage &&
      (!self.hasOptionalNestedMessage || [self.optionalNestedMessage isEqual:otherMessage.optionalNestedMessage]) &&
      self.hasOptionalForeignMessage == otherMessage.hasOptionalForeignMessage &&
      (!self.hasOptionalForeignMessage || [self.optionalForeignMessage isEqual:otherMessage.optionalForeignMessage]) &&
      self.hasOptionalImportMessage == otherMessage.hasOptionalImportMessage &&
      (!self.hasOptionalImportMessage || [self.optionalImportMessage isEqual:otherMessage.optionalImportMessage]) &&
      self.hasOptionalNestedEnum == otherMessage.hasOptionalNestedEnum &&
      (!self.hasOptionalNestedEnum || self.optionalNestedEnum == otherMessage.optionalNestedEnum) &&
      self.hasOptionalForeignEnum == otherMessage.hasOptionalForeignEnum &&
      (!self.hasOptionalForeignEnum || self.optionalForeignEnum == otherMessage.optionalForeignEnum) &&
      self.hasOptionalImportEnum == otherMessage.hasOptionalImportEnum &&
      (!self.hasOptionalImportEnum || self.optionalImportEnum == otherMessage.optionalImportEnum) &&
      self.hasOptionalStringPiece == otherMessage.hasOptionalStringPiece &&
      (!self.hasOptionalStringPiece || [self.optionalStringPiece isEqual:otherMessage.optionalStringPiece]) &&
      self.hasOptionalCord == otherMessage.hasOptionalCord &&
      (!self.hasOptionalCord || [self.optionalCord isEqual:otherMessage.optionalCord]) &&
      self.hasOptionalPublicImportMessage == otherMessage.hasOptionalPublicImportMessage &&
      (!self.hasOptionalPublicImportMessage || [self.optionalPublicImportMessage isEqual:otherMessage.optionalPublicImportMessage]) &&
      self.hasOptionalLazyMessage == otherMessage.hasOptionalLazyMessage &&
      (!self.hasOptionalLazyMessage || [self.optionalLazyMessage isEqual:otherMessage.optionalLazyMessage]) &&
      [self.repeatedInt32Array isEqualToArray:otherMessage.repeatedInt32Array] &&
      [self.repeatedInt64Array isEqualToArray:otherMessage.repeatedInt64Array] &&
      [self.repeatedUint32Array isEqualToArray:otherMessage.repeatedUint32Array] &&
      [self.repeatedUint64Array isEqualToArray:otherMessage.repeatedUint64Array] &&
      [self.repeatedSint32Array isEqualToArray:otherMessage.repeatedSint32Array] &&
      [self.repeatedSint64Array isEqualToArray:otherMessage.repeatedSint64Array] &&
      [self.repeatedFixed32Array isEqualToArray:otherMessage.repeatedFixed32Array] &&
      [self.repeatedFixed64Array isEqualToArray:otherMessage.repeatedFixed64Array] &&
      [self.repeatedSfixed32Array isEqualToArray:otherMessage.repeatedSfixed32Array] &&
      [self.repeatedSfixed64Array isEqualToArray:otherMessage.repeatedSfixed64Array] &&
      [self.repeatedFloatArray isEqualToArray:otherMessage.repeatedFloatArray] &&
      [self.repeatedDoubleArray isEqualToArray:otherMessage.repeatedDoubleArray] &&
      [self.repeatedBoolArray isEqualToArray:otherMessage.repeatedBoolArray] &&
      [self.repeatedStringArray isEqualToArray:otherMessage.repeatedStringArray] &&
      [self.repeatedBytesArray isEqualToArray:otherMessage.repeatedBytesArray] &&
      [self.repeatedGroupArray isEqualToArray:otherMessage.repeatedGroupArray] &&
      [self.repeatedNestedMessageArray isEqualToArray:otherMessage.repeatedNestedMessageArray] &&
      [self.repeatedForeignMessageArray isEqualToArray:otherMessage.repeatedForeignMessageArray] &&
      [self.repeatedImportMessageArray isEqualToArray:otherMessage.repeatedImportMessageArray] &&
      [self.repeatedNestedEnumArray isEqualToArray:otherMessage.repeatedNestedEnumArray] &&
      [self.repeatedForeignEnumArray isEqualToArray:otherMessage.repeatedForeignEnumArray] &&
      [self.repeatedImportEnumArray isEqualToArray:otherMessage.repeatedImportEnumArray] &&
      [self.repeatedStringPieceArray isEqualToArray:otherMessage.repeatedStringPieceArray] &&
      [self.repeatedCordArray isEqualToArray:otherMessage.repeatedCordArray] &&
      [self.repeatedLazyMessageArray isEqualToArray:otherMessage.repeatedLazyMessageArray] &&
      self.hasDefaultInt32 == otherMessage.hasDefaultInt32 &&
      (!self.hasDefaultInt32 || self.defaultInt32 == otherMessage.defaultInt32) &&
      self.hasDefaultInt64 == otherMessage.hasDefaultInt64 &&
      (!self.hasDefaultInt64 || self.defaultInt64 == otherMessage.defaultInt64) &&
      self.hasDefaultUint32 == otherMessage.hasDefaultUint32 &&
      (!self.hasDefaultUint32 || self.defaultUint32 == otherMessage.defaultUint32) &&
      self.hasDefaultUint64 == otherMessage.hasDefaultUint64 &&
      (!self.hasDefaultUint64 || self.defaultUint64 == otherMessage.defaultUint64) &&
      self.hasDefaultSint32 == otherMessage.hasDefaultSint32 &&
      (!self.hasDefaultSint32 || self.defaultSint32 == otherMessage.defaultSint32) &&
      self.hasDefaultSint64 == otherMessage.hasDefaultSint64 &&
      (!self.hasDefaultSint64 || self.defaultSint64 == otherMessage.defaultSint64) &&
      self.hasDefaultFixed32 == otherMessage.hasDefaultFixed32 &&
      (!self.hasDefaultFixed32 || self.defaultFixed32 == otherMessage.defaultFixed32) &&
      self.hasDefaultFixed64 == otherMessage.hasDefaultFixed64 &&
      (!self.hasDefaultFixed64 || self.defaultFixed64 == otherMessage.defaultFixed64) &&
      self.hasDefaultSfixed32 == otherMessage.hasDefaultSfixed32 &&
      (!self.hasDefaultSfixed32 || self.defaultSfixed32 == otherMessage.defaultSfixed32) &&
      self.hasDefaultSfixed64 == otherMessage.hasDefaultSfixed64 &&
      (!self.hasDefaultSfixed64 || self.defaultSfixed64 == otherMessage.defaultSfixed64) &&
      self.hasDefaultFloat == otherMessage.hasDefaultFloat &&
      (!self.hasDefaultFloat || self.defaultFloat == otherMessage.defaultFloat) &&
      self.hasDefaultDouble == otherMessage.hasDefaultDouble &&
      (!self.hasDefaultDouble || self.defaultDouble == otherMessage.defaultDouble) &&
      self.hasDefaultBool == otherMessage.hasDefaultBool &&
      (!self.hasDefaultBool || self.defaultBool == otherMessage.defaultBool) &&
      self.hasDefaultString == otherMessage.hasDefaultString &&
      (!self.hasDefaultString || [self.defaultString isEqual:otherMessage.defaultString]) &&
      self.hasDefaultBytes == otherMessage.hasDefaultBytes &&
      (!self.hasDefaultBytes || [self.defaultBytes isEqual:otherMessage.defaultBytes]) &&
      self.hasDefaultNestedEnum == otherMessage.hasDefaultNestedEnum &&
      (!self.hasDefaultNestedEnum || self.defaultNestedEnum == otherMessage.defaultNestedEnum) &&
      self.hasDefaultForeignEnum == otherMessage.hasDefaultForeignEnum &&
      (!self.hasDefaultForeignEnum || self.defaultForeignEnum == otherMessage.defaultForeignEnum) &&
      self.hasDefaultImportEnum == otherMessage.hasDefaultImportEnum &&
      (!self.hasDefaultImportEnum || self.defaultImportEnum == otherMessage.defaultImportEnum) &&
      self.hasDefaultStringPiece == otherMessage.hasDefaultStringPiece &&
      (!self.hasDefaultStringPiece || [self.defaultStringPiece isEqual:otherMessage.defaultStringPiece]) &&
      self.hasDefaultCord == otherMessage.hasDefaultCord &&
      (!self.hasDefaultCord || [self.defaultCord isEqual:otherMessage.defaultCord]) &&
      self.hasOneofUint32 == otherMessage.hasOneofUint32 &&
      (!self.hasOneofUint32 || self.oneofUint32 == otherMessage.oneofUint32) &&
      self.hasOneofNestedMessage == otherMessage.hasOneofNestedMessage &&
      (!self.hasOneofNestedMessage || [self.oneofNestedMessage isEqual:otherMessage.oneofNestedMessage]) &&
      self.hasOneofString == otherMessage.hasOneofString &&
      (!self.hasOneofString || [self.oneofString isEqual:otherMessage.oneofString]) &&
      self.hasOneofBytes == otherMessage.hasOneofBytes &&
      (!self.hasOneofBytes || [self.oneofBytes isEqual:otherMessage.oneofBytes]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOptionalInt32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalInt32] hash];
  }
  if (self.hasOptionalInt64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalInt64] hash];
  }
  if (self.hasOptionalUint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalUint32] hash];
  }
  if (self.hasOptionalUint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalUint64] hash];
  }
  if (self.hasOptionalSint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalSint32] hash];
  }
  if (self.hasOptionalSint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalSint64] hash];
  }
  if (self.hasOptionalFixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalFixed32] hash];
  }
  if (self.hasOptionalFixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalFixed64] hash];
  }
  if (self.hasOptionalSfixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalSfixed32] hash];
  }
  if (self.hasOptionalSfixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalSfixed64] hash];
  }
  if (self.hasOptionalFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.optionalFloat] hash];
  }
  if (self.hasOptionalDouble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.optionalDouble] hash];
  }
  if (self.hasOptionalBool) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.optionalBool] hash];
  }
  if (self.hasOptionalString) {
    hashCode = hashCode * 31 + [self.optionalString hash];
  }
  if (self.hasOptionalBytes) {
    hashCode = hashCode * 31 + [self.optionalBytes hash];
  }
  if (self.hasOptionalGroup) {
    hashCode = hashCode * 31 + [self.optionalGroup hash];
  }
  if (self.hasOptionalNestedMessage) {
    hashCode = hashCode * 31 + [self.optionalNestedMessage hash];
  }
  if (self.hasOptionalForeignMessage) {
    hashCode = hashCode * 31 + [self.optionalForeignMessage hash];
  }
  if (self.hasOptionalImportMessage) {
    hashCode = hashCode * 31 + [self.optionalImportMessage hash];
  }
  if (self.hasOptionalNestedEnum) {
    hashCode = hashCode * 31 + self.optionalNestedEnum;
  }
  if (self.hasOptionalForeignEnum) {
    hashCode = hashCode * 31 + self.optionalForeignEnum;
  }
  if (self.hasOptionalImportEnum) {
    hashCode = hashCode * 31 + self.optionalImportEnum;
  }
  if (self.hasOptionalStringPiece) {
    hashCode = hashCode * 31 + [self.optionalStringPiece hash];
  }
  if (self.hasOptionalCord) {
    hashCode = hashCode * 31 + [self.optionalCord hash];
  }
  if (self.hasOptionalPublicImportMessage) {
    hashCode = hashCode * 31 + [self.optionalPublicImportMessage hash];
  }
  if (self.hasOptionalLazyMessage) {
    hashCode = hashCode * 31 + [self.optionalLazyMessage hash];
  }
  [self.repeatedInt32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedInt64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedUint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedUint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedFixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedFixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSfixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSfixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedFloatArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedDoubleArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedBoolArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedStringArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedBytesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedForeignMessageArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedImportMessageArray enumerateObjectsUsingBlock:^(ImportMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedNestedEnumArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  [self.repeatedForeignEnumArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  [self.repeatedImportEnumArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedCordArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesNestedMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDefaultInt32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultInt32] hash];
  }
  if (self.hasDefaultInt64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultInt64] hash];
  }
  if (self.hasDefaultUint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultUint32] hash];
  }
  if (self.hasDefaultUint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultUint64] hash];
  }
  if (self.hasDefaultSint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultSint32] hash];
  }
  if (self.hasDefaultSint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultSint64] hash];
  }
  if (self.hasDefaultFixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultFixed32] hash];
  }
  if (self.hasDefaultFixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultFixed64] hash];
  }
  if (self.hasDefaultSfixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultSfixed32] hash];
  }
  if (self.hasDefaultSfixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultSfixed64] hash];
  }
  if (self.hasDefaultFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.defaultFloat] hash];
  }
  if (self.hasDefaultDouble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.defaultDouble] hash];
  }
  if (self.hasDefaultBool) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.defaultBool] hash];
  }
  if (self.hasDefaultString) {
    hashCode = hashCode * 31 + [self.defaultString hash];
  }
  if (self.hasDefaultBytes) {
    hashCode = hashCode * 31 + [self.defaultBytes hash];
  }
  if (self.hasDefaultNestedEnum) {
    hashCode = hashCode * 31 + self.defaultNestedEnum;
  }
  if (self.hasDefaultForeignEnum) {
    hashCode = hashCode * 31 + self.defaultForeignEnum;
  }
  if (self.hasDefaultImportEnum) {
    hashCode = hashCode * 31 + self.defaultImportEnum;
  }
  if (self.hasDefaultStringPiece) {
    hashCode = hashCode * 31 + [self.defaultStringPiece hash];
  }
  if (self.hasDefaultCord) {
    hashCode = hashCode * 31 + [self.defaultCord hash];
  }
  if (self.hasOneofUint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oneofUint32] hash];
  }
  if (self.hasOneofNestedMessage) {
    hashCode = hashCode * 31 + [self.oneofNestedMessage hash];
  }
  if (self.hasOneofString) {
    hashCode = hashCode * 31 + [self.oneofString hash];
  }
  if (self.hasOneofBytes) {
    hashCode = hashCode * 31 + [self.oneofBytes hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL TestAllTypesNestedEnumIsValidValue(TestAllTypesNestedEnum value) {
  switch (value) {
    case TestAllTypesNestedEnumFoo:
    case TestAllTypesNestedEnumBar:
    case TestAllTypesNestedEnumBaz:
    case TestAllTypesNestedEnumNeg:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromTestAllTypesNestedEnum(TestAllTypesNestedEnum value) {
  switch (value) {
    case TestAllTypesNestedEnumFoo:
      return @"TestAllTypesNestedEnumFoo";
    case TestAllTypesNestedEnumBar:
      return @"TestAllTypesNestedEnumBar";
    case TestAllTypesNestedEnumBaz:
      return @"TestAllTypesNestedEnumBaz";
    case TestAllTypesNestedEnumNeg:
      return @"TestAllTypesNestedEnumNeg";
    default:
      return nil;
  }
}

@interface TestAllTypesNestedMessage ()
@property SInt32 bb;
@end

@implementation TestAllTypesNestedMessage

- (BOOL) hasBb {
  return !!hasBb_;
}
- (void) setHasBb:(BOOL) _value_ {
  hasBb_ = !!_value_;
}
@synthesize bb;
- (instancetype) init {
  if ((self = [super init])) {
    self.bb = 0;
  }
  return self;
}
static TestAllTypesNestedMessage* defaultTestAllTypesNestedMessageInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypesNestedMessage class]) {
    defaultTestAllTypesNestedMessageInstance = [[TestAllTypesNestedMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesNestedMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesNestedMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBb) {
    [output writeInt32:1 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBb) {
    size_ += computeInt32Size(1, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypesNestedMessage*) parseFromData:(NSData*) data {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromData:data] build];
}
+ (TestAllTypesNestedMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesNestedMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromInputStream:input] build];
}
+ (TestAllTypesNestedMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesNestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypesNestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesNestedMessage*)[[[TestAllTypesNestedMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesNestedMessageBuilder*) builder {
  return [[TestAllTypesNestedMessageBuilder alloc] init];
}
+ (TestAllTypesNestedMessageBuilder*) builderWithPrototype:(TestAllTypesNestedMessage*) prototype {
  return [[TestAllTypesNestedMessage builder] mergeFrom:prototype];
}
- (TestAllTypesNestedMessageBuilder*) builder {
  return [TestAllTypesNestedMessage builder];
}
- (TestAllTypesNestedMessageBuilder*) toBuilder {
  return [TestAllTypesNestedMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bb", [NSNumber numberWithInteger:self.bb]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBb) {
    [dictionary setObject: [NSNumber numberWithInteger:self.bb] forKey: @"bb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesNestedMessage class]]) {
    return NO;
  }
  TestAllTypesNestedMessage *otherMessage = other;
  return
      self.hasBb == otherMessage.hasBb &&
      (!self.hasBb || self.bb == otherMessage.bb) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBb) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bb] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestAllTypesNestedMessageBuilder()
@property (strong) TestAllTypesNestedMessage* resultNestedMessage;
@end

@implementation TestAllTypesNestedMessageBuilder
@synthesize resultNestedMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNestedMessage = [[TestAllTypesNestedMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNestedMessage;
}
- (TestAllTypesNestedMessageBuilder*) clear {
  self.resultNestedMessage = [[TestAllTypesNestedMessage alloc] init];
  return self;
}
- (TestAllTypesNestedMessageBuilder*) clone {
  return [TestAllTypesNestedMessage builderWithPrototype:resultNestedMessage];
}
- (TestAllTypesNestedMessage*) defaultInstance {
  return [TestAllTypesNestedMessage defaultInstance];
}
- (TestAllTypesNestedMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypesNestedMessage*) buildPartial {
  TestAllTypesNestedMessage* returnMe = resultNestedMessage;
  self.resultNestedMessage = nil;
  return returnMe;
}
- (TestAllTypesNestedMessageBuilder*) mergeFrom:(TestAllTypesNestedMessage*) other {
  if (other == [TestAllTypesNestedMessage defaultInstance]) {
    return self;
  }
  if (other.hasBb) {
    [self setBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesNestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesNestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setBb:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasBb {
  return resultNestedMessage.hasBb;
}
- (SInt32) bb {
  return resultNestedMessage.bb;
}
- (TestAllTypesNestedMessageBuilder*) setBb:(SInt32) value {
  resultNestedMessage.hasBb = YES;
  resultNestedMessage.bb = value;
  return self;
}
- (TestAllTypesNestedMessageBuilder*) clearBb {
  resultNestedMessage.hasBb = NO;
  resultNestedMessage.bb = 0;
  return self;
}
@end

@interface TestAllTypesOptionalGroup ()
@property SInt32 a;
@end

@implementation TestAllTypesOptionalGroup

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static TestAllTypesOptionalGroup* defaultTestAllTypesOptionalGroupInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypesOptionalGroup class]) {
    defaultTestAllTypesOptionalGroupInstance = [[TestAllTypesOptionalGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesOptionalGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesOptionalGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:17 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(17, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypesOptionalGroup*) parseFromData:(NSData*) data {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromData:data] build];
}
+ (TestAllTypesOptionalGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesOptionalGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromInputStream:input] build];
}
+ (TestAllTypesOptionalGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesOptionalGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypesOptionalGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesOptionalGroup*)[[[TestAllTypesOptionalGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesOptionalGroupBuilder*) builder {
  return [[TestAllTypesOptionalGroupBuilder alloc] init];
}
+ (TestAllTypesOptionalGroupBuilder*) builderWithPrototype:(TestAllTypesOptionalGroup*) prototype {
  return [[TestAllTypesOptionalGroup builder] mergeFrom:prototype];
}
- (TestAllTypesOptionalGroupBuilder*) builder {
  return [TestAllTypesOptionalGroup builder];
}
- (TestAllTypesOptionalGroupBuilder*) toBuilder {
  return [TestAllTypesOptionalGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesOptionalGroup class]]) {
    return NO;
  }
  TestAllTypesOptionalGroup *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestAllTypesOptionalGroupBuilder()
@property (strong) TestAllTypesOptionalGroup* resultOptionalGroup;
@end

@implementation TestAllTypesOptionalGroupBuilder
@synthesize resultOptionalGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOptionalGroup = [[TestAllTypesOptionalGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOptionalGroup;
}
- (TestAllTypesOptionalGroupBuilder*) clear {
  self.resultOptionalGroup = [[TestAllTypesOptionalGroup alloc] init];
  return self;
}
- (TestAllTypesOptionalGroupBuilder*) clone {
  return [TestAllTypesOptionalGroup builderWithPrototype:resultOptionalGroup];
}
- (TestAllTypesOptionalGroup*) defaultInstance {
  return [TestAllTypesOptionalGroup defaultInstance];
}
- (TestAllTypesOptionalGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypesOptionalGroup*) buildPartial {
  TestAllTypesOptionalGroup* returnMe = resultOptionalGroup;
  self.resultOptionalGroup = nil;
  return returnMe;
}
- (TestAllTypesOptionalGroupBuilder*) mergeFrom:(TestAllTypesOptionalGroup*) other {
  if (other == [TestAllTypesOptionalGroup defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesOptionalGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesOptionalGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 136: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultOptionalGroup.hasA;
}
- (SInt32) a {
  return resultOptionalGroup.a;
}
- (TestAllTypesOptionalGroupBuilder*) setA:(SInt32) value {
  resultOptionalGroup.hasA = YES;
  resultOptionalGroup.a = value;
  return self;
}
- (TestAllTypesOptionalGroupBuilder*) clearA {
  resultOptionalGroup.hasA = NO;
  resultOptionalGroup.a = 0;
  return self;
}
@end

@interface TestAllTypesRepeatedGroup ()
@property SInt32 a;
@end

@implementation TestAllTypesRepeatedGroup

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static TestAllTypesRepeatedGroup* defaultTestAllTypesRepeatedGroupInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypesRepeatedGroup class]) {
    defaultTestAllTypesRepeatedGroupInstance = [[TestAllTypesRepeatedGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesRepeatedGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesRepeatedGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:47 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(47, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypesRepeatedGroup*) parseFromData:(NSData*) data {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromData:data] build];
}
+ (TestAllTypesRepeatedGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesRepeatedGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromInputStream:input] build];
}
+ (TestAllTypesRepeatedGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesRepeatedGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypesRepeatedGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesRepeatedGroup*)[[[TestAllTypesRepeatedGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesRepeatedGroupBuilder*) builder {
  return [[TestAllTypesRepeatedGroupBuilder alloc] init];
}
+ (TestAllTypesRepeatedGroupBuilder*) builderWithPrototype:(TestAllTypesRepeatedGroup*) prototype {
  return [[TestAllTypesRepeatedGroup builder] mergeFrom:prototype];
}
- (TestAllTypesRepeatedGroupBuilder*) builder {
  return [TestAllTypesRepeatedGroup builder];
}
- (TestAllTypesRepeatedGroupBuilder*) toBuilder {
  return [TestAllTypesRepeatedGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesRepeatedGroup class]]) {
    return NO;
  }
  TestAllTypesRepeatedGroup *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestAllTypesRepeatedGroupBuilder()
@property (strong) TestAllTypesRepeatedGroup* resultRepeatedGroup;
@end

@implementation TestAllTypesRepeatedGroupBuilder
@synthesize resultRepeatedGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepeatedGroup = [[TestAllTypesRepeatedGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepeatedGroup;
}
- (TestAllTypesRepeatedGroupBuilder*) clear {
  self.resultRepeatedGroup = [[TestAllTypesRepeatedGroup alloc] init];
  return self;
}
- (TestAllTypesRepeatedGroupBuilder*) clone {
  return [TestAllTypesRepeatedGroup builderWithPrototype:resultRepeatedGroup];
}
- (TestAllTypesRepeatedGroup*) defaultInstance {
  return [TestAllTypesRepeatedGroup defaultInstance];
}
- (TestAllTypesRepeatedGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypesRepeatedGroup*) buildPartial {
  TestAllTypesRepeatedGroup* returnMe = resultRepeatedGroup;
  self.resultRepeatedGroup = nil;
  return returnMe;
}
- (TestAllTypesRepeatedGroupBuilder*) mergeFrom:(TestAllTypesRepeatedGroup*) other {
  if (other == [TestAllTypesRepeatedGroup defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesRepeatedGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesRepeatedGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 376: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultRepeatedGroup.hasA;
}
- (SInt32) a {
  return resultRepeatedGroup.a;
}
- (TestAllTypesRepeatedGroupBuilder*) setA:(SInt32) value {
  resultRepeatedGroup.hasA = YES;
  resultRepeatedGroup.a = value;
  return self;
}
- (TestAllTypesRepeatedGroupBuilder*) clearA {
  resultRepeatedGroup.hasA = NO;
  resultRepeatedGroup.a = 0;
  return self;
}
@end

@interface TestAllTypesBuilder()
@property (strong) TestAllTypes* resultTestAllTypes;
@end

@implementation TestAllTypesBuilder
@synthesize resultTestAllTypes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestAllTypes = [[TestAllTypes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestAllTypes;
}
- (TestAllTypesBuilder*) clear {
  self.resultTestAllTypes = [[TestAllTypes alloc] init];
  return self;
}
- (TestAllTypesBuilder*) clone {
  return [TestAllTypes builderWithPrototype:resultTestAllTypes];
}
- (TestAllTypes*) defaultInstance {
  return [TestAllTypes defaultInstance];
}
- (TestAllTypes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypes*) buildPartial {
  TestAllTypes* returnMe = resultTestAllTypes;
  self.resultTestAllTypes = nil;
  return returnMe;
}
- (TestAllTypesBuilder*) mergeFrom:(TestAllTypes*) other {
  if (other == [TestAllTypes defaultInstance]) {
    return self;
  }
  if (other.hasOptionalInt32) {
    [self setOptionalInt32:other.optionalInt32];
  }
  if (other.hasOptionalInt64) {
    [self setOptionalInt64:other.optionalInt64];
  }
  if (other.hasOptionalUint32) {
    [self setOptionalUint32:other.optionalUint32];
  }
  if (other.hasOptionalUint64) {
    [self setOptionalUint64:other.optionalUint64];
  }
  if (other.hasOptionalSint32) {
    [self setOptionalSint32:other.optionalSint32];
  }
  if (other.hasOptionalSint64) {
    [self setOptionalSint64:other.optionalSint64];
  }
  if (other.hasOptionalFixed32) {
    [self setOptionalFixed32:other.optionalFixed32];
  }
  if (other.hasOptionalFixed64) {
    [self setOptionalFixed64:other.optionalFixed64];
  }
  if (other.hasOptionalSfixed32) {
    [self setOptionalSfixed32:other.optionalSfixed32];
  }
  if (other.hasOptionalSfixed64) {
    [self setOptionalSfixed64:other.optionalSfixed64];
  }
  if (other.hasOptionalFloat) {
    [self setOptionalFloat:other.optionalFloat];
  }
  if (other.hasOptionalDouble) {
    [self setOptionalDouble:other.optionalDouble];
  }
  if (other.hasOptionalBool) {
    [self setOptionalBool:other.optionalBool];
  }
  if (other.hasOptionalString) {
    [self setOptionalString:other.optionalString];
  }
  if (other.hasOptionalBytes) {
    [self setOptionalBytes:other.optionalBytes];
  }
  if (other.hasOptionalGroup) {
    [self mergeOptionalGroup:other.optionalGroup];
  }
  if (other.hasOptionalNestedMessage) {
    [self mergeOptionalNestedMessage:other.optionalNestedMessage];
  }
  if (other.hasOptionalForeignMessage) {
    [self mergeOptionalForeignMessage:other.optionalForeignMessage];
  }
  if (other.hasOptionalImportMessage) {
    [self mergeOptionalImportMessage:other.optionalImportMessage];
  }
  if (other.hasOptionalNestedEnum) {
    [self setOptionalNestedEnum:other.optionalNestedEnum];
  }
  if (other.hasOptionalForeignEnum) {
    [self setOptionalForeignEnum:other.optionalForeignEnum];
  }
  if (other.hasOptionalImportEnum) {
    [self setOptionalImportEnum:other.optionalImportEnum];
  }
  if (other.hasOptionalStringPiece) {
    [self setOptionalStringPiece:other.optionalStringPiece];
  }
  if (other.hasOptionalCord) {
    [self setOptionalCord:other.optionalCord];
  }
  if (other.hasOptionalPublicImportMessage) {
    [self mergeOptionalPublicImportMessage:other.optionalPublicImportMessage];
  }
  if (other.hasOptionalLazyMessage) {
    [self mergeOptionalLazyMessage:other.optionalLazyMessage];
  }
  if (other.repeatedInt32Array.count > 0) {
    if (resultTestAllTypes.repeatedInt32Array == nil) {
      resultTestAllTypes.repeatedInt32Array = [other.repeatedInt32Array copy];
    } else {
      [resultTestAllTypes.repeatedInt32Array appendArray:other.repeatedInt32Array];
    }
  }
  if (other.repeatedInt64Array.count > 0) {
    if (resultTestAllTypes.repeatedInt64Array == nil) {
      resultTestAllTypes.repeatedInt64Array = [other.repeatedInt64Array copy];
    } else {
      [resultTestAllTypes.repeatedInt64Array appendArray:other.repeatedInt64Array];
    }
  }
  if (other.repeatedUint32Array.count > 0) {
    if (resultTestAllTypes.repeatedUint32Array == nil) {
      resultTestAllTypes.repeatedUint32Array = [other.repeatedUint32Array copy];
    } else {
      [resultTestAllTypes.repeatedUint32Array appendArray:other.repeatedUint32Array];
    }
  }
  if (other.repeatedUint64Array.count > 0) {
    if (resultTestAllTypes.repeatedUint64Array == nil) {
      resultTestAllTypes.repeatedUint64Array = [other.repeatedUint64Array copy];
    } else {
      [resultTestAllTypes.repeatedUint64Array appendArray:other.repeatedUint64Array];
    }
  }
  if (other.repeatedSint32Array.count > 0) {
    if (resultTestAllTypes.repeatedSint32Array == nil) {
      resultTestAllTypes.repeatedSint32Array = [other.repeatedSint32Array copy];
    } else {
      [resultTestAllTypes.repeatedSint32Array appendArray:other.repeatedSint32Array];
    }
  }
  if (other.repeatedSint64Array.count > 0) {
    if (resultTestAllTypes.repeatedSint64Array == nil) {
      resultTestAllTypes.repeatedSint64Array = [other.repeatedSint64Array copy];
    } else {
      [resultTestAllTypes.repeatedSint64Array appendArray:other.repeatedSint64Array];
    }
  }
  if (other.repeatedFixed32Array.count > 0) {
    if (resultTestAllTypes.repeatedFixed32Array == nil) {
      resultTestAllTypes.repeatedFixed32Array = [other.repeatedFixed32Array copy];
    } else {
      [resultTestAllTypes.repeatedFixed32Array appendArray:other.repeatedFixed32Array];
    }
  }
  if (other.repeatedFixed64Array.count > 0) {
    if (resultTestAllTypes.repeatedFixed64Array == nil) {
      resultTestAllTypes.repeatedFixed64Array = [other.repeatedFixed64Array copy];
    } else {
      [resultTestAllTypes.repeatedFixed64Array appendArray:other.repeatedFixed64Array];
    }
  }
  if (other.repeatedSfixed32Array.count > 0) {
    if (resultTestAllTypes.repeatedSfixed32Array == nil) {
      resultTestAllTypes.repeatedSfixed32Array = [other.repeatedSfixed32Array copy];
    } else {
      [resultTestAllTypes.repeatedSfixed32Array appendArray:other.repeatedSfixed32Array];
    }
  }
  if (other.repeatedSfixed64Array.count > 0) {
    if (resultTestAllTypes.repeatedSfixed64Array == nil) {
      resultTestAllTypes.repeatedSfixed64Array = [other.repeatedSfixed64Array copy];
    } else {
      [resultTestAllTypes.repeatedSfixed64Array appendArray:other.repeatedSfixed64Array];
    }
  }
  if (other.repeatedFloatArray.count > 0) {
    if (resultTestAllTypes.repeatedFloatArray == nil) {
      resultTestAllTypes.repeatedFloatArray = [other.repeatedFloatArray copy];
    } else {
      [resultTestAllTypes.repeatedFloatArray appendArray:other.repeatedFloatArray];
    }
  }
  if (other.repeatedDoubleArray.count > 0) {
    if (resultTestAllTypes.repeatedDoubleArray == nil) {
      resultTestAllTypes.repeatedDoubleArray = [other.repeatedDoubleArray copy];
    } else {
      [resultTestAllTypes.repeatedDoubleArray appendArray:other.repeatedDoubleArray];
    }
  }
  if (other.repeatedBoolArray.count > 0) {
    if (resultTestAllTypes.repeatedBoolArray == nil) {
      resultTestAllTypes.repeatedBoolArray = [other.repeatedBoolArray copy];
    } else {
      [resultTestAllTypes.repeatedBoolArray appendArray:other.repeatedBoolArray];
    }
  }
  if (other.repeatedStringArray.count > 0) {
    if (resultTestAllTypes.repeatedStringArray == nil) {
      resultTestAllTypes.repeatedStringArray = [[NSMutableArray alloc] initWithArray:other.repeatedStringArray];
    } else {
      [resultTestAllTypes.repeatedStringArray addObjectsFromArray:other.repeatedStringArray];
    }
  }
  if (other.repeatedBytesArray.count > 0) {
    if (resultTestAllTypes.repeatedBytesArray == nil) {
      resultTestAllTypes.repeatedBytesArray = [[NSMutableArray alloc] initWithArray:other.repeatedBytesArray];
    } else {
      [resultTestAllTypes.repeatedBytesArray addObjectsFromArray:other.repeatedBytesArray];
    }
  }
  if (other.repeatedGroupArray.count > 0) {
    if (resultTestAllTypes.repeatedGroupArray == nil) {
      resultTestAllTypes.repeatedGroupArray = [[NSMutableArray alloc] initWithArray:other.repeatedGroupArray];
    } else {
      [resultTestAllTypes.repeatedGroupArray addObjectsFromArray:other.repeatedGroupArray];
    }
  }
  if (other.repeatedNestedMessageArray.count > 0) {
    if (resultTestAllTypes.repeatedNestedMessageArray == nil) {
      resultTestAllTypes.repeatedNestedMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedNestedMessageArray];
    } else {
      [resultTestAllTypes.repeatedNestedMessageArray addObjectsFromArray:other.repeatedNestedMessageArray];
    }
  }
  if (other.repeatedForeignMessageArray.count > 0) {
    if (resultTestAllTypes.repeatedForeignMessageArray == nil) {
      resultTestAllTypes.repeatedForeignMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedForeignMessageArray];
    } else {
      [resultTestAllTypes.repeatedForeignMessageArray addObjectsFromArray:other.repeatedForeignMessageArray];
    }
  }
  if (other.repeatedImportMessageArray.count > 0) {
    if (resultTestAllTypes.repeatedImportMessageArray == nil) {
      resultTestAllTypes.repeatedImportMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedImportMessageArray];
    } else {
      [resultTestAllTypes.repeatedImportMessageArray addObjectsFromArray:other.repeatedImportMessageArray];
    }
  }
  if (other.repeatedNestedEnumArray.count > 0) {
    if (resultTestAllTypes.repeatedNestedEnumArray == nil) {
      resultTestAllTypes.repeatedNestedEnumArray = [other.repeatedNestedEnumArray copy];
    } else {
      [resultTestAllTypes.repeatedNestedEnumArray appendArray:other.repeatedNestedEnumArray];
    }
  }
  if (other.repeatedForeignEnumArray.count > 0) {
    if (resultTestAllTypes.repeatedForeignEnumArray == nil) {
      resultTestAllTypes.repeatedForeignEnumArray = [other.repeatedForeignEnumArray copy];
    } else {
      [resultTestAllTypes.repeatedForeignEnumArray appendArray:other.repeatedForeignEnumArray];
    }
  }
  if (other.repeatedImportEnumArray.count > 0) {
    if (resultTestAllTypes.repeatedImportEnumArray == nil) {
      resultTestAllTypes.repeatedImportEnumArray = [other.repeatedImportEnumArray copy];
    } else {
      [resultTestAllTypes.repeatedImportEnumArray appendArray:other.repeatedImportEnumArray];
    }
  }
  if (other.repeatedStringPieceArray.count > 0) {
    if (resultTestAllTypes.repeatedStringPieceArray == nil) {
      resultTestAllTypes.repeatedStringPieceArray = [[NSMutableArray alloc] initWithArray:other.repeatedStringPieceArray];
    } else {
      [resultTestAllTypes.repeatedStringPieceArray addObjectsFromArray:other.repeatedStringPieceArray];
    }
  }
  if (other.repeatedCordArray.count > 0) {
    if (resultTestAllTypes.repeatedCordArray == nil) {
      resultTestAllTypes.repeatedCordArray = [[NSMutableArray alloc] initWithArray:other.repeatedCordArray];
    } else {
      [resultTestAllTypes.repeatedCordArray addObjectsFromArray:other.repeatedCordArray];
    }
  }
  if (other.repeatedLazyMessageArray.count > 0) {
    if (resultTestAllTypes.repeatedLazyMessageArray == nil) {
      resultTestAllTypes.repeatedLazyMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedLazyMessageArray];
    } else {
      [resultTestAllTypes.repeatedLazyMessageArray addObjectsFromArray:other.repeatedLazyMessageArray];
    }
  }
  if (other.hasDefaultInt32) {
    [self setDefaultInt32:other.defaultInt32];
  }
  if (other.hasDefaultInt64) {
    [self setDefaultInt64:other.defaultInt64];
  }
  if (other.hasDefaultUint32) {
    [self setDefaultUint32:other.defaultUint32];
  }
  if (other.hasDefaultUint64) {
    [self setDefaultUint64:other.defaultUint64];
  }
  if (other.hasDefaultSint32) {
    [self setDefaultSint32:other.defaultSint32];
  }
  if (other.hasDefaultSint64) {
    [self setDefaultSint64:other.defaultSint64];
  }
  if (other.hasDefaultFixed32) {
    [self setDefaultFixed32:other.defaultFixed32];
  }
  if (other.hasDefaultFixed64) {
    [self setDefaultFixed64:other.defaultFixed64];
  }
  if (other.hasDefaultSfixed32) {
    [self setDefaultSfixed32:other.defaultSfixed32];
  }
  if (other.hasDefaultSfixed64) {
    [self setDefaultSfixed64:other.defaultSfixed64];
  }
  if (other.hasDefaultFloat) {
    [self setDefaultFloat:other.defaultFloat];
  }
  if (other.hasDefaultDouble) {
    [self setDefaultDouble:other.defaultDouble];
  }
  if (other.hasDefaultBool) {
    [self setDefaultBool:other.defaultBool];
  }
  if (other.hasDefaultString) {
    [self setDefaultString:other.defaultString];
  }
  if (other.hasDefaultBytes) {
    [self setDefaultBytes:other.defaultBytes];
  }
  if (other.hasDefaultNestedEnum) {
    [self setDefaultNestedEnum:other.defaultNestedEnum];
  }
  if (other.hasDefaultForeignEnum) {
    [self setDefaultForeignEnum:other.defaultForeignEnum];
  }
  if (other.hasDefaultImportEnum) {
    [self setDefaultImportEnum:other.defaultImportEnum];
  }
  if (other.hasDefaultStringPiece) {
    [self setDefaultStringPiece:other.defaultStringPiece];
  }
  if (other.hasDefaultCord) {
    [self setDefaultCord:other.defaultCord];
  }
  if (other.hasOneofUint32) {
    [self setOneofUint32:other.oneofUint32];
  }
  if (other.hasOneofNestedMessage) {
    [self mergeOneofNestedMessage:other.oneofNestedMessage];
  }
  if (other.hasOneofString) {
    [self setOneofString:other.oneofString];
  }
  if (other.hasOneofBytes) {
    [self setOneofBytes:other.oneofBytes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOptionalInt32:[input readInt32]];
        break;
      }
      case 16: {
        [self setOptionalInt64:[input readInt64]];
        break;
      }
      case 24: {
        [self setOptionalUint32:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOptionalUint64:[input readUInt64]];
        break;
      }
      case 40: {
        [self setOptionalSint32:[input readSInt32]];
        break;
      }
      case 48: {
        [self setOptionalSint64:[input readSInt64]];
        break;
      }
      case 61: {
        [self setOptionalFixed32:[input readFixed32]];
        break;
      }
      case 65: {
        [self setOptionalFixed64:[input readFixed64]];
        break;
      }
      case 77: {
        [self setOptionalSfixed32:[input readSFixed32]];
        break;
      }
      case 81: {
        [self setOptionalSfixed64:[input readSFixed64]];
        break;
      }
      case 93: {
        [self setOptionalFloat:[input readFloat]];
        break;
      }
      case 97: {
        [self setOptionalDouble:[input readDouble]];
        break;
      }
      case 104: {
        [self setOptionalBool:[input readBool]];
        break;
      }
      case 114: {
        [self setOptionalString:[input readString]];
        break;
      }
      case 122: {
        [self setOptionalBytes:[input readData]];
        break;
      }
      case 131: {
        TestAllTypesOptionalGroupBuilder* subBuilder = [TestAllTypesOptionalGroup builder];
        if (self.hasOptionalGroup) {
          [subBuilder mergeFrom:self.optionalGroup];
        }
        [input readGroup:16 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroup:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        TestAllTypesNestedMessageBuilder* subBuilder = [TestAllTypesNestedMessage builder];
        if (self.hasOptionalNestedMessage) {
          [subBuilder mergeFrom:self.optionalNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        ForeignMessageBuilder* subBuilder = [ForeignMessage builder];
        if (self.hasOptionalForeignMessage) {
          [subBuilder mergeFrom:self.optionalForeignMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalForeignMessage:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        ImportMessageBuilder* subBuilder = [ImportMessage builder];
        if (self.hasOptionalImportMessage) {
          [subBuilder mergeFrom:self.optionalImportMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 168: {
        TestAllTypesNestedEnum value = (TestAllTypesNestedEnum)[input readEnum];
        if (TestAllTypesNestedEnumIsValidValue(value)) {
          [self setOptionalNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:21 value:value];
        }
        break;
      }
      case 176: {
        ForeignEnum value = (ForeignEnum)[input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self setOptionalForeignEnum:value];
        } else {
          [unknownFields mergeVarintField:22 value:value];
        }
        break;
      }
      case 184: {
        ImportEnum value = (ImportEnum)[input readEnum];
        if (ImportEnumIsValidValue(value)) {
          [self setOptionalImportEnum:value];
        } else {
          [unknownFields mergeVarintField:23 value:value];
        }
        break;
      }
      case 194: {
        [self setOptionalStringPiece:[input readString]];
        break;
      }
      case 202: {
        [self setOptionalCord:[input readString]];
        break;
      }
      case 210: {
        PublicImportMessageBuilder* subBuilder = [PublicImportMessage builder];
        if (self.hasOptionalPublicImportMessage) {
          [subBuilder mergeFrom:self.optionalPublicImportMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalPublicImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 218: {
        TestAllTypesNestedMessageBuilder* subBuilder = [TestAllTypesNestedMessage builder];
        if (self.hasOptionalLazyMessage) {
          [subBuilder mergeFrom:self.optionalLazyMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalLazyMessage:[subBuilder buildPartial]];
        break;
      }
      case 248: {
        [self addRepeatedInt32:[input readInt32]];
        break;
      }
      case 256: {
        [self addRepeatedInt64:[input readInt64]];
        break;
      }
      case 264: {
        [self addRepeatedUint32:[input readUInt32]];
        break;
      }
      case 272: {
        [self addRepeatedUint64:[input readUInt64]];
        break;
      }
      case 280: {
        [self addRepeatedSint32:[input readSInt32]];
        break;
      }
      case 288: {
        [self addRepeatedSint64:[input readSInt64]];
        break;
      }
      case 301: {
        [self addRepeatedFixed32:[input readFixed32]];
        break;
      }
      case 305: {
        [self addRepeatedFixed64:[input readFixed64]];
        break;
      }
      case 317: {
        [self addRepeatedSfixed32:[input readSFixed32]];
        break;
      }
      case 321: {
        [self addRepeatedSfixed64:[input readSFixed64]];
        break;
      }
      case 333: {
        [self addRepeatedFloat:[input readFloat]];
        break;
      }
      case 337: {
        [self addRepeatedDouble:[input readDouble]];
        break;
      }
      case 344: {
        [self addRepeatedBool:[input readBool]];
        break;
      }
      case 354: {
        [self addRepeatedString:[input readString]];
        break;
      }
      case 362: {
        [self addRepeatedBytes:[input readData]];
        break;
      }
      case 371: {
        TestAllTypesRepeatedGroupBuilder* subBuilder = [TestAllTypesRepeatedGroup builder];
        [input readGroup:46 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedGroup:[subBuilder buildPartial]];
        break;
      }
      case 386: {
        TestAllTypesNestedMessageBuilder* subBuilder = [TestAllTypesNestedMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 394: {
        ForeignMessageBuilder* subBuilder = [ForeignMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedForeignMessage:[subBuilder buildPartial]];
        break;
      }
      case 402: {
        ImportMessageBuilder* subBuilder = [ImportMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 408: {
        TestAllTypesNestedEnum value = (TestAllTypesNestedEnum)[input readEnum];
        if (TestAllTypesNestedEnumIsValidValue(value)) {
          [self addRepeatedNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:51 value:value];
        }
        break;
      }
      case 416: {
        ForeignEnum value = (ForeignEnum)[input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self addRepeatedForeignEnum:value];
        } else {
          [unknownFields mergeVarintField:52 value:value];
        }
        break;
      }
      case 424: {
        ImportEnum value = (ImportEnum)[input readEnum];
        if (ImportEnumIsValidValue(value)) {
          [self addRepeatedImportEnum:value];
        } else {
          [unknownFields mergeVarintField:53 value:value];
        }
        break;
      }
      case 434: {
        [self addRepeatedStringPiece:[input readString]];
        break;
      }
      case 442: {
        [self addRepeatedCord:[input readString]];
        break;
      }
      case 458: {
        TestAllTypesNestedMessageBuilder* subBuilder = [TestAllTypesNestedMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedLazyMessage:[subBuilder buildPartial]];
        break;
      }
      case 488: {
        [self setDefaultInt32:[input readInt32]];
        break;
      }
      case 496: {
        [self setDefaultInt64:[input readInt64]];
        break;
      }
      case 504: {
        [self setDefaultUint32:[input readUInt32]];
        break;
      }
      case 512: {
        [self setDefaultUint64:[input readUInt64]];
        break;
      }
      case 520: {
        [self setDefaultSint32:[input readSInt32]];
        break;
      }
      case 528: {
        [self setDefaultSint64:[input readSInt64]];
        break;
      }
      case 541: {
        [self setDefaultFixed32:[input readFixed32]];
        break;
      }
      case 545: {
        [self setDefaultFixed64:[input readFixed64]];
        break;
      }
      case 557: {
        [self setDefaultSfixed32:[input readSFixed32]];
        break;
      }
      case 561: {
        [self setDefaultSfixed64:[input readSFixed64]];
        break;
      }
      case 573: {
        [self setDefaultFloat:[input readFloat]];
        break;
      }
      case 577: {
        [self setDefaultDouble:[input readDouble]];
        break;
      }
      case 584: {
        [self setDefaultBool:[input readBool]];
        break;
      }
      case 594: {
        [self setDefaultString:[input readString]];
        break;
      }
      case 602: {
        [self setDefaultBytes:[input readData]];
        break;
      }
      case 648: {
        TestAllTypesNestedEnum value = (TestAllTypesNestedEnum)[input readEnum];
        if (TestAllTypesNestedEnumIsValidValue(value)) {
          [self setDefaultNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:81 value:value];
        }
        break;
      }
      case 656: {
        ForeignEnum value = (ForeignEnum)[input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self setDefaultForeignEnum:value];
        } else {
          [unknownFields mergeVarintField:82 value:value];
        }
        break;
      }
      case 664: {
        ImportEnum value = (ImportEnum)[input readEnum];
        if (ImportEnumIsValidValue(value)) {
          [self setDefaultImportEnum:value];
        } else {
          [unknownFields mergeVarintField:83 value:value];
        }
        break;
      }
      case 674: {
        [self setDefaultStringPiece:[input readString]];
        break;
      }
      case 682: {
        [self setDefaultCord:[input readString]];
        break;
      }
      case 888: {
        [self setOneofUint32:[input readUInt32]];
        break;
      }
      case 898: {
        TestAllTypesNestedMessageBuilder* subBuilder = [TestAllTypesNestedMessage builder];
        if (self.hasOneofNestedMessage) {
          [subBuilder mergeFrom:self.oneofNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOneofNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 906: {
        [self setOneofString:[input readString]];
        break;
      }
      case 914: {
        [self setOneofBytes:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasOptionalInt32 {
  return resultTestAllTypes.hasOptionalInt32;
}
- (SInt32) optionalInt32 {
  return resultTestAllTypes.optionalInt32;
}
- (TestAllTypesBuilder*) setOptionalInt32:(SInt32) value {
  resultTestAllTypes.hasOptionalInt32 = YES;
  resultTestAllTypes.optionalInt32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalInt32 {
  resultTestAllTypes.hasOptionalInt32 = NO;
  resultTestAllTypes.optionalInt32 = 0;
  return self;
}
- (BOOL) hasOptionalInt64 {
  return resultTestAllTypes.hasOptionalInt64;
}
- (SInt64) optionalInt64 {
  return resultTestAllTypes.optionalInt64;
}
- (TestAllTypesBuilder*) setOptionalInt64:(SInt64) value {
  resultTestAllTypes.hasOptionalInt64 = YES;
  resultTestAllTypes.optionalInt64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalInt64 {
  resultTestAllTypes.hasOptionalInt64 = NO;
  resultTestAllTypes.optionalInt64 = 0L;
  return self;
}
- (BOOL) hasOptionalUint32 {
  return resultTestAllTypes.hasOptionalUint32;
}
- (UInt32) optionalUint32 {
  return resultTestAllTypes.optionalUint32;
}
- (TestAllTypesBuilder*) setOptionalUint32:(UInt32) value {
  resultTestAllTypes.hasOptionalUint32 = YES;
  resultTestAllTypes.optionalUint32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalUint32 {
  resultTestAllTypes.hasOptionalUint32 = NO;
  resultTestAllTypes.optionalUint32 = 0;
  return self;
}
- (BOOL) hasOptionalUint64 {
  return resultTestAllTypes.hasOptionalUint64;
}
- (UInt64) optionalUint64 {
  return resultTestAllTypes.optionalUint64;
}
- (TestAllTypesBuilder*) setOptionalUint64:(UInt64) value {
  resultTestAllTypes.hasOptionalUint64 = YES;
  resultTestAllTypes.optionalUint64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalUint64 {
  resultTestAllTypes.hasOptionalUint64 = NO;
  resultTestAllTypes.optionalUint64 = 0L;
  return self;
}
- (BOOL) hasOptionalSint32 {
  return resultTestAllTypes.hasOptionalSint32;
}
- (SInt32) optionalSint32 {
  return resultTestAllTypes.optionalSint32;
}
- (TestAllTypesBuilder*) setOptionalSint32:(SInt32) value {
  resultTestAllTypes.hasOptionalSint32 = YES;
  resultTestAllTypes.optionalSint32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalSint32 {
  resultTestAllTypes.hasOptionalSint32 = NO;
  resultTestAllTypes.optionalSint32 = 0;
  return self;
}
- (BOOL) hasOptionalSint64 {
  return resultTestAllTypes.hasOptionalSint64;
}
- (SInt64) optionalSint64 {
  return resultTestAllTypes.optionalSint64;
}
- (TestAllTypesBuilder*) setOptionalSint64:(SInt64) value {
  resultTestAllTypes.hasOptionalSint64 = YES;
  resultTestAllTypes.optionalSint64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalSint64 {
  resultTestAllTypes.hasOptionalSint64 = NO;
  resultTestAllTypes.optionalSint64 = 0L;
  return self;
}
- (BOOL) hasOptionalFixed32 {
  return resultTestAllTypes.hasOptionalFixed32;
}
- (UInt32) optionalFixed32 {
  return resultTestAllTypes.optionalFixed32;
}
- (TestAllTypesBuilder*) setOptionalFixed32:(UInt32) value {
  resultTestAllTypes.hasOptionalFixed32 = YES;
  resultTestAllTypes.optionalFixed32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalFixed32 {
  resultTestAllTypes.hasOptionalFixed32 = NO;
  resultTestAllTypes.optionalFixed32 = 0;
  return self;
}
- (BOOL) hasOptionalFixed64 {
  return resultTestAllTypes.hasOptionalFixed64;
}
- (UInt64) optionalFixed64 {
  return resultTestAllTypes.optionalFixed64;
}
- (TestAllTypesBuilder*) setOptionalFixed64:(UInt64) value {
  resultTestAllTypes.hasOptionalFixed64 = YES;
  resultTestAllTypes.optionalFixed64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalFixed64 {
  resultTestAllTypes.hasOptionalFixed64 = NO;
  resultTestAllTypes.optionalFixed64 = 0L;
  return self;
}
- (BOOL) hasOptionalSfixed32 {
  return resultTestAllTypes.hasOptionalSfixed32;
}
- (SInt32) optionalSfixed32 {
  return resultTestAllTypes.optionalSfixed32;
}
- (TestAllTypesBuilder*) setOptionalSfixed32:(SInt32) value {
  resultTestAllTypes.hasOptionalSfixed32 = YES;
  resultTestAllTypes.optionalSfixed32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalSfixed32 {
  resultTestAllTypes.hasOptionalSfixed32 = NO;
  resultTestAllTypes.optionalSfixed32 = 0;
  return self;
}
- (BOOL) hasOptionalSfixed64 {
  return resultTestAllTypes.hasOptionalSfixed64;
}
- (SInt64) optionalSfixed64 {
  return resultTestAllTypes.optionalSfixed64;
}
- (TestAllTypesBuilder*) setOptionalSfixed64:(SInt64) value {
  resultTestAllTypes.hasOptionalSfixed64 = YES;
  resultTestAllTypes.optionalSfixed64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalSfixed64 {
  resultTestAllTypes.hasOptionalSfixed64 = NO;
  resultTestAllTypes.optionalSfixed64 = 0L;
  return self;
}
- (BOOL) hasOptionalFloat {
  return resultTestAllTypes.hasOptionalFloat;
}
- (Float32) optionalFloat {
  return resultTestAllTypes.optionalFloat;
}
- (TestAllTypesBuilder*) setOptionalFloat:(Float32) value {
  resultTestAllTypes.hasOptionalFloat = YES;
  resultTestAllTypes.optionalFloat = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalFloat {
  resultTestAllTypes.hasOptionalFloat = NO;
  resultTestAllTypes.optionalFloat = 0;
  return self;
}
- (BOOL) hasOptionalDouble {
  return resultTestAllTypes.hasOptionalDouble;
}
- (Float64) optionalDouble {
  return resultTestAllTypes.optionalDouble;
}
- (TestAllTypesBuilder*) setOptionalDouble:(Float64) value {
  resultTestAllTypes.hasOptionalDouble = YES;
  resultTestAllTypes.optionalDouble = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalDouble {
  resultTestAllTypes.hasOptionalDouble = NO;
  resultTestAllTypes.optionalDouble = 0;
  return self;
}
- (BOOL) hasOptionalBool {
  return resultTestAllTypes.hasOptionalBool;
}
- (BOOL) optionalBool {
  return resultTestAllTypes.optionalBool;
}
- (TestAllTypesBuilder*) setOptionalBool:(BOOL) value {
  resultTestAllTypes.hasOptionalBool = YES;
  resultTestAllTypes.optionalBool = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalBool {
  resultTestAllTypes.hasOptionalBool = NO;
  resultTestAllTypes.optionalBool = NO;
  return self;
}
- (BOOL) hasOptionalString {
  return resultTestAllTypes.hasOptionalString;
}
- (NSString*) optionalString {
  return resultTestAllTypes.optionalString;
}
- (TestAllTypesBuilder*) setOptionalString:(NSString*) value {
  resultTestAllTypes.hasOptionalString = YES;
  resultTestAllTypes.optionalString = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalString {
  resultTestAllTypes.hasOptionalString = NO;
  resultTestAllTypes.optionalString = @"";
  return self;
}
- (BOOL) hasOptionalBytes {
  return resultTestAllTypes.hasOptionalBytes;
}
- (NSData*) optionalBytes {
  return resultTestAllTypes.optionalBytes;
}
- (TestAllTypesBuilder*) setOptionalBytes:(NSData*) value {
  resultTestAllTypes.hasOptionalBytes = YES;
  resultTestAllTypes.optionalBytes = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalBytes {
  resultTestAllTypes.hasOptionalBytes = NO;
  resultTestAllTypes.optionalBytes = [NSData data];
  return self;
}
- (BOOL) hasOptionalGroup {
  return resultTestAllTypes.hasOptionalGroup;
}
- (TestAllTypesOptionalGroup*) optionalGroup {
  return resultTestAllTypes.optionalGroup;
}
- (TestAllTypesBuilder*) setOptionalGroup:(TestAllTypesOptionalGroup*) value {
  resultTestAllTypes.hasOptionalGroup = YES;
  resultTestAllTypes.optionalGroup = value;
  return self;
}
- (TestAllTypesBuilder*) setOptionalGroupBuilder:(TestAllTypesOptionalGroupBuilder*) builderForValue {
  return [self setOptionalGroup:[builderForValue build]];
}
- (TestAllTypesBuilder*) mergeOptionalGroup:(TestAllTypesOptionalGroup*) value {
  if (resultTestAllTypes.hasOptionalGroup &&
      resultTestAllTypes.optionalGroup != [TestAllTypesOptionalGroup defaultInstance]) {
    resultTestAllTypes.optionalGroup =
      [[[TestAllTypesOptionalGroup builderWithPrototype:resultTestAllTypes.optionalGroup] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypes.optionalGroup = value;
  }
  resultTestAllTypes.hasOptionalGroup = YES;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalGroup {
  resultTestAllTypes.hasOptionalGroup = NO;
  resultTestAllTypes.optionalGroup = [TestAllTypesOptionalGroup defaultInstance];
  return self;
}
- (BOOL) hasOptionalNestedMessage {
  return resultTestAllTypes.hasOptionalNestedMessage;
}
- (TestAllTypesNestedMessage*) optionalNestedMessage {
  return resultTestAllTypes.optionalNestedMessage;
}
- (TestAllTypesBuilder*) setOptionalNestedMessage:(TestAllTypesNestedMessage*) value {
  resultTestAllTypes.hasOptionalNestedMessage = YES;
  resultTestAllTypes.optionalNestedMessage = value;
  return self;
}
- (TestAllTypesBuilder*) setOptionalNestedMessageBuilder:(TestAllTypesNestedMessageBuilder*) builderForValue {
  return [self setOptionalNestedMessage:[builderForValue build]];
}
- (TestAllTypesBuilder*) mergeOptionalNestedMessage:(TestAllTypesNestedMessage*) value {
  if (resultTestAllTypes.hasOptionalNestedMessage &&
      resultTestAllTypes.optionalNestedMessage != [TestAllTypesNestedMessage defaultInstance]) {
    resultTestAllTypes.optionalNestedMessage =
      [[[TestAllTypesNestedMessage builderWithPrototype:resultTestAllTypes.optionalNestedMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypes.optionalNestedMessage = value;
  }
  resultTestAllTypes.hasOptionalNestedMessage = YES;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalNestedMessage {
  resultTestAllTypes.hasOptionalNestedMessage = NO;
  resultTestAllTypes.optionalNestedMessage = [TestAllTypesNestedMessage defaultInstance];
  return self;
}
- (BOOL) hasOptionalForeignMessage {
  return resultTestAllTypes.hasOptionalForeignMessage;
}
- (ForeignMessage*) optionalForeignMessage {
  return resultTestAllTypes.optionalForeignMessage;
}
- (TestAllTypesBuilder*) setOptionalForeignMessage:(ForeignMessage*) value {
  resultTestAllTypes.hasOptionalForeignMessage = YES;
  resultTestAllTypes.optionalForeignMessage = value;
  return self;
}
- (TestAllTypesBuilder*) setOptionalForeignMessageBuilder:(ForeignMessageBuilder*) builderForValue {
  return [self setOptionalForeignMessage:[builderForValue build]];
}
- (TestAllTypesBuilder*) mergeOptionalForeignMessage:(ForeignMessage*) value {
  if (resultTestAllTypes.hasOptionalForeignMessage &&
      resultTestAllTypes.optionalForeignMessage != [ForeignMessage defaultInstance]) {
    resultTestAllTypes.optionalForeignMessage =
      [[[ForeignMessage builderWithPrototype:resultTestAllTypes.optionalForeignMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypes.optionalForeignMessage = value;
  }
  resultTestAllTypes.hasOptionalForeignMessage = YES;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalForeignMessage {
  resultTestAllTypes.hasOptionalForeignMessage = NO;
  resultTestAllTypes.optionalForeignMessage = [ForeignMessage defaultInstance];
  return self;
}
- (BOOL) hasOptionalImportMessage {
  return resultTestAllTypes.hasOptionalImportMessage;
}
- (ImportMessage*) optionalImportMessage {
  return resultTestAllTypes.optionalImportMessage;
}
- (TestAllTypesBuilder*) setOptionalImportMessage:(ImportMessage*) value {
  resultTestAllTypes.hasOptionalImportMessage = YES;
  resultTestAllTypes.optionalImportMessage = value;
  return self;
}
- (TestAllTypesBuilder*) setOptionalImportMessageBuilder:(ImportMessageBuilder*) builderForValue {
  return [self setOptionalImportMessage:[builderForValue build]];
}
- (TestAllTypesBuilder*) mergeOptionalImportMessage:(ImportMessage*) value {
  if (resultTestAllTypes.hasOptionalImportMessage &&
      resultTestAllTypes.optionalImportMessage != [ImportMessage defaultInstance]) {
    resultTestAllTypes.optionalImportMessage =
      [[[ImportMessage builderWithPrototype:resultTestAllTypes.optionalImportMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypes.optionalImportMessage = value;
  }
  resultTestAllTypes.hasOptionalImportMessage = YES;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalImportMessage {
  resultTestAllTypes.hasOptionalImportMessage = NO;
  resultTestAllTypes.optionalImportMessage = [ImportMessage defaultInstance];
  return self;
}
- (BOOL) hasOptionalNestedEnum {
  return resultTestAllTypes.hasOptionalNestedEnum;
}
- (TestAllTypesNestedEnum) optionalNestedEnum {
  return resultTestAllTypes.optionalNestedEnum;
}
- (TestAllTypesBuilder*) setOptionalNestedEnum:(TestAllTypesNestedEnum) value {
  resultTestAllTypes.hasOptionalNestedEnum = YES;
  resultTestAllTypes.optionalNestedEnum = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalNestedEnum {
  resultTestAllTypes.hasOptionalNestedEnum = NO;
  resultTestAllTypes.optionalNestedEnum = TestAllTypesNestedEnumFoo;
  return self;
}
- (BOOL) hasOptionalForeignEnum {
  return resultTestAllTypes.hasOptionalForeignEnum;
}
- (ForeignEnum) optionalForeignEnum {
  return resultTestAllTypes.optionalForeignEnum;
}
- (TestAllTypesBuilder*) setOptionalForeignEnum:(ForeignEnum) value {
  resultTestAllTypes.hasOptionalForeignEnum = YES;
  resultTestAllTypes.optionalForeignEnum = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalForeignEnum {
  resultTestAllTypes.hasOptionalForeignEnum = NO;
  resultTestAllTypes.optionalForeignEnum = ForeignEnumForeignFoo;
  return self;
}
- (BOOL) hasOptionalImportEnum {
  return resultTestAllTypes.hasOptionalImportEnum;
}
- (ImportEnum) optionalImportEnum {
  return resultTestAllTypes.optionalImportEnum;
}
- (TestAllTypesBuilder*) setOptionalImportEnum:(ImportEnum) value {
  resultTestAllTypes.hasOptionalImportEnum = YES;
  resultTestAllTypes.optionalImportEnum = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalImportEnum {
  resultTestAllTypes.hasOptionalImportEnum = NO;
  resultTestAllTypes.optionalImportEnum = ImportEnumImportFoo;
  return self;
}
- (BOOL) hasOptionalStringPiece {
  return resultTestAllTypes.hasOptionalStringPiece;
}
- (NSString*) optionalStringPiece {
  return resultTestAllTypes.optionalStringPiece;
}
- (TestAllTypesBuilder*) setOptionalStringPiece:(NSString*) value {
  resultTestAllTypes.hasOptionalStringPiece = YES;
  resultTestAllTypes.optionalStringPiece = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalStringPiece {
  resultTestAllTypes.hasOptionalStringPiece = NO;
  resultTestAllTypes.optionalStringPiece = @"";
  return self;
}
- (BOOL) hasOptionalCord {
  return resultTestAllTypes.hasOptionalCord;
}
- (NSString*) optionalCord {
  return resultTestAllTypes.optionalCord;
}
- (TestAllTypesBuilder*) setOptionalCord:(NSString*) value {
  resultTestAllTypes.hasOptionalCord = YES;
  resultTestAllTypes.optionalCord = value;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalCord {
  resultTestAllTypes.hasOptionalCord = NO;
  resultTestAllTypes.optionalCord = @"";
  return self;
}
- (BOOL) hasOptionalPublicImportMessage {
  return resultTestAllTypes.hasOptionalPublicImportMessage;
}
- (PublicImportMessage*) optionalPublicImportMessage {
  return resultTestAllTypes.optionalPublicImportMessage;
}
- (TestAllTypesBuilder*) setOptionalPublicImportMessage:(PublicImportMessage*) value {
  resultTestAllTypes.hasOptionalPublicImportMessage = YES;
  resultTestAllTypes.optionalPublicImportMessage = value;
  return self;
}
- (TestAllTypesBuilder*) setOptionalPublicImportMessageBuilder:(PublicImportMessageBuilder*) builderForValue {
  return [self setOptionalPublicImportMessage:[builderForValue build]];
}
- (TestAllTypesBuilder*) mergeOptionalPublicImportMessage:(PublicImportMessage*) value {
  if (resultTestAllTypes.hasOptionalPublicImportMessage &&
      resultTestAllTypes.optionalPublicImportMessage != [PublicImportMessage defaultInstance]) {
    resultTestAllTypes.optionalPublicImportMessage =
      [[[PublicImportMessage builderWithPrototype:resultTestAllTypes.optionalPublicImportMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypes.optionalPublicImportMessage = value;
  }
  resultTestAllTypes.hasOptionalPublicImportMessage = YES;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalPublicImportMessage {
  resultTestAllTypes.hasOptionalPublicImportMessage = NO;
  resultTestAllTypes.optionalPublicImportMessage = [PublicImportMessage defaultInstance];
  return self;
}
- (BOOL) hasOptionalLazyMessage {
  return resultTestAllTypes.hasOptionalLazyMessage;
}
- (TestAllTypesNestedMessage*) optionalLazyMessage {
  return resultTestAllTypes.optionalLazyMessage;
}
- (TestAllTypesBuilder*) setOptionalLazyMessage:(TestAllTypesNestedMessage*) value {
  resultTestAllTypes.hasOptionalLazyMessage = YES;
  resultTestAllTypes.optionalLazyMessage = value;
  return self;
}
- (TestAllTypesBuilder*) setOptionalLazyMessageBuilder:(TestAllTypesNestedMessageBuilder*) builderForValue {
  return [self setOptionalLazyMessage:[builderForValue build]];
}
- (TestAllTypesBuilder*) mergeOptionalLazyMessage:(TestAllTypesNestedMessage*) value {
  if (resultTestAllTypes.hasOptionalLazyMessage &&
      resultTestAllTypes.optionalLazyMessage != [TestAllTypesNestedMessage defaultInstance]) {
    resultTestAllTypes.optionalLazyMessage =
      [[[TestAllTypesNestedMessage builderWithPrototype:resultTestAllTypes.optionalLazyMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypes.optionalLazyMessage = value;
  }
  resultTestAllTypes.hasOptionalLazyMessage = YES;
  return self;
}
- (TestAllTypesBuilder*) clearOptionalLazyMessage {
  resultTestAllTypes.hasOptionalLazyMessage = NO;
  resultTestAllTypes.optionalLazyMessage = [TestAllTypesNestedMessage defaultInstance];
  return self;
}
- (PBAppendableArray *)repeatedInt32 {
  return resultTestAllTypes.repeatedInt32Array;
}
- (SInt32)repeatedInt32AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedInt32AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedInt32:(SInt32)value {
  if (resultTestAllTypes.repeatedInt32Array == nil) {
    resultTestAllTypes.repeatedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypes.repeatedInt32Array addInt32:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedInt32Array:(NSArray *)array {
  resultTestAllTypes.repeatedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedInt32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedInt32 {
  resultTestAllTypes.repeatedInt32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedInt64 {
  return resultTestAllTypes.repeatedInt64Array;
}
- (SInt64)repeatedInt64AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedInt64AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedInt64:(SInt64)value {
  if (resultTestAllTypes.repeatedInt64Array == nil) {
    resultTestAllTypes.repeatedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestAllTypes.repeatedInt64Array addInt64:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedInt64Array:(NSArray *)array {
  resultTestAllTypes.repeatedInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedInt64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedInt64 {
  resultTestAllTypes.repeatedInt64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedUint32 {
  return resultTestAllTypes.repeatedUint32Array;
}
- (UInt32)repeatedUint32AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedUint32AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedUint32:(UInt32)value {
  if (resultTestAllTypes.repeatedUint32Array == nil) {
    resultTestAllTypes.repeatedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestAllTypes.repeatedUint32Array addUint32:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedUint32Array:(NSArray *)array {
  resultTestAllTypes.repeatedUint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedUint32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedUint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedUint32 {
  resultTestAllTypes.repeatedUint32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedUint64 {
  return resultTestAllTypes.repeatedUint64Array;
}
- (UInt64)repeatedUint64AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedUint64AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedUint64:(UInt64)value {
  if (resultTestAllTypes.repeatedUint64Array == nil) {
    resultTestAllTypes.repeatedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestAllTypes.repeatedUint64Array addUint64:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedUint64Array:(NSArray *)array {
  resultTestAllTypes.repeatedUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedUint64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedUint64 {
  resultTestAllTypes.repeatedUint64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSint32 {
  return resultTestAllTypes.repeatedSint32Array;
}
- (SInt32)repeatedSint32AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedSint32AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedSint32:(SInt32)value {
  if (resultTestAllTypes.repeatedSint32Array == nil) {
    resultTestAllTypes.repeatedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypes.repeatedSint32Array addInt32:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSint32Array:(NSArray *)array {
  resultTestAllTypes.repeatedSint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSint32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedSint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedSint32 {
  resultTestAllTypes.repeatedSint32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSint64 {
  return resultTestAllTypes.repeatedSint64Array;
}
- (SInt64)repeatedSint64AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedSint64AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedSint64:(SInt64)value {
  if (resultTestAllTypes.repeatedSint64Array == nil) {
    resultTestAllTypes.repeatedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestAllTypes.repeatedSint64Array addInt64:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSint64Array:(NSArray *)array {
  resultTestAllTypes.repeatedSint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSint64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedSint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedSint64 {
  resultTestAllTypes.repeatedSint64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFixed32 {
  return resultTestAllTypes.repeatedFixed32Array;
}
- (UInt32)repeatedFixed32AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedFixed32AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedFixed32:(UInt32)value {
  if (resultTestAllTypes.repeatedFixed32Array == nil) {
    resultTestAllTypes.repeatedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestAllTypes.repeatedFixed32Array addUint32:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFixed32Array:(NSArray *)array {
  resultTestAllTypes.repeatedFixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFixed32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedFixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedFixed32 {
  resultTestAllTypes.repeatedFixed32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFixed64 {
  return resultTestAllTypes.repeatedFixed64Array;
}
- (UInt64)repeatedFixed64AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedFixed64AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedFixed64:(UInt64)value {
  if (resultTestAllTypes.repeatedFixed64Array == nil) {
    resultTestAllTypes.repeatedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestAllTypes.repeatedFixed64Array addUint64:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFixed64Array:(NSArray *)array {
  resultTestAllTypes.repeatedFixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFixed64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedFixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedFixed64 {
  resultTestAllTypes.repeatedFixed64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSfixed32 {
  return resultTestAllTypes.repeatedSfixed32Array;
}
- (SInt32)repeatedSfixed32AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedSfixed32AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedSfixed32:(SInt32)value {
  if (resultTestAllTypes.repeatedSfixed32Array == nil) {
    resultTestAllTypes.repeatedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypes.repeatedSfixed32Array addInt32:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSfixed32Array:(NSArray *)array {
  resultTestAllTypes.repeatedSfixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSfixed32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedSfixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedSfixed32 {
  resultTestAllTypes.repeatedSfixed32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSfixed64 {
  return resultTestAllTypes.repeatedSfixed64Array;
}
- (SInt64)repeatedSfixed64AtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedSfixed64AtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedSfixed64:(SInt64)value {
  if (resultTestAllTypes.repeatedSfixed64Array == nil) {
    resultTestAllTypes.repeatedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestAllTypes.repeatedSfixed64Array addInt64:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSfixed64Array:(NSArray *)array {
  resultTestAllTypes.repeatedSfixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedSfixed64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedSfixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedSfixed64 {
  resultTestAllTypes.repeatedSfixed64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFloat {
  return resultTestAllTypes.repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedFloatAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedFloat:(Float32)value {
  if (resultTestAllTypes.repeatedFloatArray == nil) {
    resultTestAllTypes.repeatedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultTestAllTypes.repeatedFloatArray addFloat:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFloatArray:(NSArray *)array {
  resultTestAllTypes.repeatedFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedFloat {
  resultTestAllTypes.repeatedFloatArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedDouble {
  return resultTestAllTypes.repeatedDoubleArray;
}
- (Float64)repeatedDoubleAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedDoubleAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedDouble:(Float64)value {
  if (resultTestAllTypes.repeatedDoubleArray == nil) {
    resultTestAllTypes.repeatedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [resultTestAllTypes.repeatedDoubleArray addDouble:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedDoubleArray:(NSArray *)array {
  resultTestAllTypes.repeatedDoubleArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedDoubleValues:(const Float64 *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedDoubleArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedDouble {
  resultTestAllTypes.repeatedDoubleArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedBool {
  return resultTestAllTypes.repeatedBoolArray;
}
- (BOOL)repeatedBoolAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedBoolAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedBool:(BOOL)value {
  if (resultTestAllTypes.repeatedBoolArray == nil) {
    resultTestAllTypes.repeatedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [resultTestAllTypes.repeatedBoolArray addBool:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedBoolArray:(NSArray *)array {
  resultTestAllTypes.repeatedBoolArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedBoolValues:(const BOOL *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedBoolArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedBool {
  resultTestAllTypes.repeatedBoolArray = nil;
  return self;
}
- (NSMutableArray *)repeatedString {
  return resultTestAllTypes.repeatedStringArray;
}
- (NSString*)repeatedStringAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedStringAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedString:(NSString*)value {
  if (resultTestAllTypes.repeatedStringArray == nil) {
    resultTestAllTypes.repeatedStringArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedStringArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedStringArray:(NSArray *)array {
  resultTestAllTypes.repeatedStringArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedString {
  resultTestAllTypes.repeatedStringArray = nil;
  return self;
}
- (NSMutableArray *)repeatedBytes {
  return resultTestAllTypes.repeatedBytesArray;
}
- (NSData*)repeatedBytesAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedBytesAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedBytes:(NSData*)value {
  if (resultTestAllTypes.repeatedBytesArray == nil) {
    resultTestAllTypes.repeatedBytesArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedBytesArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedBytesArray:(NSArray *)array {
  resultTestAllTypes.repeatedBytesArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedBytes {
  resultTestAllTypes.repeatedBytesArray = nil;
  return self;
}
- (NSMutableArray *)repeatedGroup {
  return resultTestAllTypes.repeatedGroupArray;
}
- (TestAllTypesRepeatedGroup*)repeatedGroupAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedGroupAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedGroup:(TestAllTypesRepeatedGroup*)value {
  if (resultTestAllTypes.repeatedGroupArray == nil) {
    resultTestAllTypes.repeatedGroupArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedGroupArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedGroupArray:(NSArray *)array {
  resultTestAllTypes.repeatedGroupArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedGroup {
  resultTestAllTypes.repeatedGroupArray = nil;
  return self;
}
- (NSMutableArray *)repeatedNestedMessage {
  return resultTestAllTypes.repeatedNestedMessageArray;
}
- (TestAllTypesNestedMessage*)repeatedNestedMessageAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedNestedMessageAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedNestedMessage:(TestAllTypesNestedMessage*)value {
  if (resultTestAllTypes.repeatedNestedMessageArray == nil) {
    resultTestAllTypes.repeatedNestedMessageArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedNestedMessageArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedNestedMessageArray:(NSArray *)array {
  resultTestAllTypes.repeatedNestedMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedNestedMessage {
  resultTestAllTypes.repeatedNestedMessageArray = nil;
  return self;
}
- (NSMutableArray *)repeatedForeignMessage {
  return resultTestAllTypes.repeatedForeignMessageArray;
}
- (ForeignMessage*)repeatedForeignMessageAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedForeignMessageAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedForeignMessage:(ForeignMessage*)value {
  if (resultTestAllTypes.repeatedForeignMessageArray == nil) {
    resultTestAllTypes.repeatedForeignMessageArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedForeignMessageArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedForeignMessageArray:(NSArray *)array {
  resultTestAllTypes.repeatedForeignMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedForeignMessage {
  resultTestAllTypes.repeatedForeignMessageArray = nil;
  return self;
}
- (NSMutableArray *)repeatedImportMessage {
  return resultTestAllTypes.repeatedImportMessageArray;
}
- (ImportMessage*)repeatedImportMessageAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedImportMessageAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedImportMessage:(ImportMessage*)value {
  if (resultTestAllTypes.repeatedImportMessageArray == nil) {
    resultTestAllTypes.repeatedImportMessageArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedImportMessageArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedImportMessageArray:(NSArray *)array {
  resultTestAllTypes.repeatedImportMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedImportMessage {
  resultTestAllTypes.repeatedImportMessageArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedNestedEnum {
  return resultTestAllTypes.repeatedNestedEnumArray;
}
- (TestAllTypesNestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedNestedEnumAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedNestedEnum:(TestAllTypesNestedEnum)value {
  if (resultTestAllTypes.repeatedNestedEnumArray == nil) {
    resultTestAllTypes.repeatedNestedEnumArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypes.repeatedNestedEnumArray addEnum:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedNestedEnumArray:(NSArray *)array {
  resultTestAllTypes.repeatedNestedEnumArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedNestedEnumValues:(const TestAllTypesNestedEnum *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedNestedEnumArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedNestedEnum {
  resultTestAllTypes.repeatedNestedEnumArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedForeignEnum {
  return resultTestAllTypes.repeatedForeignEnumArray;
}
- (ForeignEnum)repeatedForeignEnumAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedForeignEnumAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedForeignEnum:(ForeignEnum)value {
  if (resultTestAllTypes.repeatedForeignEnumArray == nil) {
    resultTestAllTypes.repeatedForeignEnumArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypes.repeatedForeignEnumArray addEnum:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedForeignEnumArray:(NSArray *)array {
  resultTestAllTypes.repeatedForeignEnumArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedForeignEnumValues:(const ForeignEnum *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedForeignEnumArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedForeignEnum {
  resultTestAllTypes.repeatedForeignEnumArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedImportEnum {
  return resultTestAllTypes.repeatedImportEnumArray;
}
- (ImportEnum)repeatedImportEnumAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedImportEnumAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedImportEnum:(ImportEnum)value {
  if (resultTestAllTypes.repeatedImportEnumArray == nil) {
    resultTestAllTypes.repeatedImportEnumArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypes.repeatedImportEnumArray addEnum:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedImportEnumArray:(NSArray *)array {
  resultTestAllTypes.repeatedImportEnumArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedImportEnumValues:(const ImportEnum *)values count:(NSUInteger)count {
  resultTestAllTypes.repeatedImportEnumArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedImportEnum {
  resultTestAllTypes.repeatedImportEnumArray = nil;
  return self;
}
- (NSMutableArray *)repeatedStringPiece {
  return resultTestAllTypes.repeatedStringPieceArray;
}
- (NSString*)repeatedStringPieceAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedStringPieceAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedStringPiece:(NSString*)value {
  if (resultTestAllTypes.repeatedStringPieceArray == nil) {
    resultTestAllTypes.repeatedStringPieceArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedStringPieceArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedStringPieceArray:(NSArray *)array {
  resultTestAllTypes.repeatedStringPieceArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedStringPiece {
  resultTestAllTypes.repeatedStringPieceArray = nil;
  return self;
}
- (NSMutableArray *)repeatedCord {
  return resultTestAllTypes.repeatedCordArray;
}
- (NSString*)repeatedCordAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedCordAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedCord:(NSString*)value {
  if (resultTestAllTypes.repeatedCordArray == nil) {
    resultTestAllTypes.repeatedCordArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedCordArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedCordArray:(NSArray *)array {
  resultTestAllTypes.repeatedCordArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedCord {
  resultTestAllTypes.repeatedCordArray = nil;
  return self;
}
- (NSMutableArray *)repeatedLazyMessage {
  return resultTestAllTypes.repeatedLazyMessageArray;
}
- (TestAllTypesNestedMessage*)repeatedLazyMessageAtIndex:(NSUInteger)index {
  return [resultTestAllTypes repeatedLazyMessageAtIndex:index];
}
- (TestAllTypesBuilder *)addRepeatedLazyMessage:(TestAllTypesNestedMessage*)value {
  if (resultTestAllTypes.repeatedLazyMessageArray == nil) {
    resultTestAllTypes.repeatedLazyMessageArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypes.repeatedLazyMessageArray addObject:value];
  return self;
}
- (TestAllTypesBuilder *)setRepeatedLazyMessageArray:(NSArray *)array {
  resultTestAllTypes.repeatedLazyMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesBuilder *)clearRepeatedLazyMessage {
  resultTestAllTypes.repeatedLazyMessageArray = nil;
  return self;
}
- (BOOL) hasDefaultInt32 {
  return resultTestAllTypes.hasDefaultInt32;
}
- (SInt32) defaultInt32 {
  return resultTestAllTypes.defaultInt32;
}
- (TestAllTypesBuilder*) setDefaultInt32:(SInt32) value {
  resultTestAllTypes.hasDefaultInt32 = YES;
  resultTestAllTypes.defaultInt32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultInt32 {
  resultTestAllTypes.hasDefaultInt32 = NO;
  resultTestAllTypes.defaultInt32 = 41;
  return self;
}
- (BOOL) hasDefaultInt64 {
  return resultTestAllTypes.hasDefaultInt64;
}
- (SInt64) defaultInt64 {
  return resultTestAllTypes.defaultInt64;
}
- (TestAllTypesBuilder*) setDefaultInt64:(SInt64) value {
  resultTestAllTypes.hasDefaultInt64 = YES;
  resultTestAllTypes.defaultInt64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultInt64 {
  resultTestAllTypes.hasDefaultInt64 = NO;
  resultTestAllTypes.defaultInt64 = 42L;
  return self;
}
- (BOOL) hasDefaultUint32 {
  return resultTestAllTypes.hasDefaultUint32;
}
- (UInt32) defaultUint32 {
  return resultTestAllTypes.defaultUint32;
}
- (TestAllTypesBuilder*) setDefaultUint32:(UInt32) value {
  resultTestAllTypes.hasDefaultUint32 = YES;
  resultTestAllTypes.defaultUint32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultUint32 {
  resultTestAllTypes.hasDefaultUint32 = NO;
  resultTestAllTypes.defaultUint32 = 43;
  return self;
}
- (BOOL) hasDefaultUint64 {
  return resultTestAllTypes.hasDefaultUint64;
}
- (UInt64) defaultUint64 {
  return resultTestAllTypes.defaultUint64;
}
- (TestAllTypesBuilder*) setDefaultUint64:(UInt64) value {
  resultTestAllTypes.hasDefaultUint64 = YES;
  resultTestAllTypes.defaultUint64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultUint64 {
  resultTestAllTypes.hasDefaultUint64 = NO;
  resultTestAllTypes.defaultUint64 = 44L;
  return self;
}
- (BOOL) hasDefaultSint32 {
  return resultTestAllTypes.hasDefaultSint32;
}
- (SInt32) defaultSint32 {
  return resultTestAllTypes.defaultSint32;
}
- (TestAllTypesBuilder*) setDefaultSint32:(SInt32) value {
  resultTestAllTypes.hasDefaultSint32 = YES;
  resultTestAllTypes.defaultSint32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultSint32 {
  resultTestAllTypes.hasDefaultSint32 = NO;
  resultTestAllTypes.defaultSint32 = -45;
  return self;
}
- (BOOL) hasDefaultSint64 {
  return resultTestAllTypes.hasDefaultSint64;
}
- (SInt64) defaultSint64 {
  return resultTestAllTypes.defaultSint64;
}
- (TestAllTypesBuilder*) setDefaultSint64:(SInt64) value {
  resultTestAllTypes.hasDefaultSint64 = YES;
  resultTestAllTypes.defaultSint64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultSint64 {
  resultTestAllTypes.hasDefaultSint64 = NO;
  resultTestAllTypes.defaultSint64 = 46L;
  return self;
}
- (BOOL) hasDefaultFixed32 {
  return resultTestAllTypes.hasDefaultFixed32;
}
- (UInt32) defaultFixed32 {
  return resultTestAllTypes.defaultFixed32;
}
- (TestAllTypesBuilder*) setDefaultFixed32:(UInt32) value {
  resultTestAllTypes.hasDefaultFixed32 = YES;
  resultTestAllTypes.defaultFixed32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultFixed32 {
  resultTestAllTypes.hasDefaultFixed32 = NO;
  resultTestAllTypes.defaultFixed32 = 47;
  return self;
}
- (BOOL) hasDefaultFixed64 {
  return resultTestAllTypes.hasDefaultFixed64;
}
- (UInt64) defaultFixed64 {
  return resultTestAllTypes.defaultFixed64;
}
- (TestAllTypesBuilder*) setDefaultFixed64:(UInt64) value {
  resultTestAllTypes.hasDefaultFixed64 = YES;
  resultTestAllTypes.defaultFixed64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultFixed64 {
  resultTestAllTypes.hasDefaultFixed64 = NO;
  resultTestAllTypes.defaultFixed64 = 48L;
  return self;
}
- (BOOL) hasDefaultSfixed32 {
  return resultTestAllTypes.hasDefaultSfixed32;
}
- (SInt32) defaultSfixed32 {
  return resultTestAllTypes.defaultSfixed32;
}
- (TestAllTypesBuilder*) setDefaultSfixed32:(SInt32) value {
  resultTestAllTypes.hasDefaultSfixed32 = YES;
  resultTestAllTypes.defaultSfixed32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultSfixed32 {
  resultTestAllTypes.hasDefaultSfixed32 = NO;
  resultTestAllTypes.defaultSfixed32 = 49;
  return self;
}
- (BOOL) hasDefaultSfixed64 {
  return resultTestAllTypes.hasDefaultSfixed64;
}
- (SInt64) defaultSfixed64 {
  return resultTestAllTypes.defaultSfixed64;
}
- (TestAllTypesBuilder*) setDefaultSfixed64:(SInt64) value {
  resultTestAllTypes.hasDefaultSfixed64 = YES;
  resultTestAllTypes.defaultSfixed64 = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultSfixed64 {
  resultTestAllTypes.hasDefaultSfixed64 = NO;
  resultTestAllTypes.defaultSfixed64 = -50L;
  return self;
}
- (BOOL) hasDefaultFloat {
  return resultTestAllTypes.hasDefaultFloat;
}
- (Float32) defaultFloat {
  return resultTestAllTypes.defaultFloat;
}
- (TestAllTypesBuilder*) setDefaultFloat:(Float32) value {
  resultTestAllTypes.hasDefaultFloat = YES;
  resultTestAllTypes.defaultFloat = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultFloat {
  resultTestAllTypes.hasDefaultFloat = NO;
  resultTestAllTypes.defaultFloat = 51.5;
  return self;
}
- (BOOL) hasDefaultDouble {
  return resultTestAllTypes.hasDefaultDouble;
}
- (Float64) defaultDouble {
  return resultTestAllTypes.defaultDouble;
}
- (TestAllTypesBuilder*) setDefaultDouble:(Float64) value {
  resultTestAllTypes.hasDefaultDouble = YES;
  resultTestAllTypes.defaultDouble = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultDouble {
  resultTestAllTypes.hasDefaultDouble = NO;
  resultTestAllTypes.defaultDouble = 52000;
  return self;
}
- (BOOL) hasDefaultBool {
  return resultTestAllTypes.hasDefaultBool;
}
- (BOOL) defaultBool {
  return resultTestAllTypes.defaultBool;
}
- (TestAllTypesBuilder*) setDefaultBool:(BOOL) value {
  resultTestAllTypes.hasDefaultBool = YES;
  resultTestAllTypes.defaultBool = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultBool {
  resultTestAllTypes.hasDefaultBool = NO;
  resultTestAllTypes.defaultBool = YES;
  return self;
}
- (BOOL) hasDefaultString {
  return resultTestAllTypes.hasDefaultString;
}
- (NSString*) defaultString {
  return resultTestAllTypes.defaultString;
}
- (TestAllTypesBuilder*) setDefaultString:(NSString*) value {
  resultTestAllTypes.hasDefaultString = YES;
  resultTestAllTypes.defaultString = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultString {
  resultTestAllTypes.hasDefaultString = NO;
  resultTestAllTypes.defaultString = @"hello";
  return self;
}
- (BOOL) hasDefaultBytes {
  return resultTestAllTypes.hasDefaultBytes;
}
- (NSData*) defaultBytes {
  return resultTestAllTypes.defaultBytes;
}
- (TestAllTypesBuilder*) setDefaultBytes:(NSData*) value {
  resultTestAllTypes.hasDefaultBytes = YES;
  resultTestAllTypes.defaultBytes = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultBytes {
  resultTestAllTypes.hasDefaultBytes = NO;
  resultTestAllTypes.defaultBytes = [NSData dataWithBytes:"world" length:5];
  return self;
}
- (BOOL) hasDefaultNestedEnum {
  return resultTestAllTypes.hasDefaultNestedEnum;
}
- (TestAllTypesNestedEnum) defaultNestedEnum {
  return resultTestAllTypes.defaultNestedEnum;
}
- (TestAllTypesBuilder*) setDefaultNestedEnum:(TestAllTypesNestedEnum) value {
  resultTestAllTypes.hasDefaultNestedEnum = YES;
  resultTestAllTypes.defaultNestedEnum = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultNestedEnum {
  resultTestAllTypes.hasDefaultNestedEnum = NO;
  resultTestAllTypes.defaultNestedEnum = TestAllTypesNestedEnumBar;
  return self;
}
- (BOOL) hasDefaultForeignEnum {
  return resultTestAllTypes.hasDefaultForeignEnum;
}
- (ForeignEnum) defaultForeignEnum {
  return resultTestAllTypes.defaultForeignEnum;
}
- (TestAllTypesBuilder*) setDefaultForeignEnum:(ForeignEnum) value {
  resultTestAllTypes.hasDefaultForeignEnum = YES;
  resultTestAllTypes.defaultForeignEnum = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultForeignEnum {
  resultTestAllTypes.hasDefaultForeignEnum = NO;
  resultTestAllTypes.defaultForeignEnum = ForeignEnumForeignBar;
  return self;
}
- (BOOL) hasDefaultImportEnum {
  return resultTestAllTypes.hasDefaultImportEnum;
}
- (ImportEnum) defaultImportEnum {
  return resultTestAllTypes.defaultImportEnum;
}
- (TestAllTypesBuilder*) setDefaultImportEnum:(ImportEnum) value {
  resultTestAllTypes.hasDefaultImportEnum = YES;
  resultTestAllTypes.defaultImportEnum = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultImportEnum {
  resultTestAllTypes.hasDefaultImportEnum = NO;
  resultTestAllTypes.defaultImportEnum = ImportEnumImportBar;
  return self;
}
- (BOOL) hasDefaultStringPiece {
  return resultTestAllTypes.hasDefaultStringPiece;
}
- (NSString*) defaultStringPiece {
  return resultTestAllTypes.defaultStringPiece;
}
- (TestAllTypesBuilder*) setDefaultStringPiece:(NSString*) value {
  resultTestAllTypes.hasDefaultStringPiece = YES;
  resultTestAllTypes.defaultStringPiece = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultStringPiece {
  resultTestAllTypes.hasDefaultStringPiece = NO;
  resultTestAllTypes.defaultStringPiece = @"abc";
  return self;
}
- (BOOL) hasDefaultCord {
  return resultTestAllTypes.hasDefaultCord;
}
- (NSString*) defaultCord {
  return resultTestAllTypes.defaultCord;
}
- (TestAllTypesBuilder*) setDefaultCord:(NSString*) value {
  resultTestAllTypes.hasDefaultCord = YES;
  resultTestAllTypes.defaultCord = value;
  return self;
}
- (TestAllTypesBuilder*) clearDefaultCord {
  resultTestAllTypes.hasDefaultCord = NO;
  resultTestAllTypes.defaultCord = @"123";
  return self;
}
- (BOOL) hasOneofUint32 {
  return resultTestAllTypes.hasOneofUint32;
}
- (UInt32) oneofUint32 {
  return resultTestAllTypes.oneofUint32;
}
- (TestAllTypesBuilder*) setOneofUint32:(UInt32) value {
  resultTestAllTypes.hasOneofUint32 = YES;
  resultTestAllTypes.oneofUint32 = value;
  return self;
}
- (TestAllTypesBuilder*) clearOneofUint32 {
  resultTestAllTypes.hasOneofUint32 = NO;
  resultTestAllTypes.oneofUint32 = 0;
  return self;
}
- (BOOL) hasOneofNestedMessage {
  return resultTestAllTypes.hasOneofNestedMessage;
}
- (TestAllTypesNestedMessage*) oneofNestedMessage {
  return resultTestAllTypes.oneofNestedMessage;
}
- (TestAllTypesBuilder*) setOneofNestedMessage:(TestAllTypesNestedMessage*) value {
  resultTestAllTypes.hasOneofNestedMessage = YES;
  resultTestAllTypes.oneofNestedMessage = value;
  return self;
}
- (TestAllTypesBuilder*) setOneofNestedMessageBuilder:(TestAllTypesNestedMessageBuilder*) builderForValue {
  return [self setOneofNestedMessage:[builderForValue build]];
}
- (TestAllTypesBuilder*) mergeOneofNestedMessage:(TestAllTypesNestedMessage*) value {
  if (resultTestAllTypes.hasOneofNestedMessage &&
      resultTestAllTypes.oneofNestedMessage != [TestAllTypesNestedMessage defaultInstance]) {
    resultTestAllTypes.oneofNestedMessage =
      [[[TestAllTypesNestedMessage builderWithPrototype:resultTestAllTypes.oneofNestedMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypes.oneofNestedMessage = value;
  }
  resultTestAllTypes.hasOneofNestedMessage = YES;
  return self;
}
- (TestAllTypesBuilder*) clearOneofNestedMessage {
  resultTestAllTypes.hasOneofNestedMessage = NO;
  resultTestAllTypes.oneofNestedMessage = [TestAllTypesNestedMessage defaultInstance];
  return self;
}
- (BOOL) hasOneofString {
  return resultTestAllTypes.hasOneofString;
}
- (NSString*) oneofString {
  return resultTestAllTypes.oneofString;
}
- (TestAllTypesBuilder*) setOneofString:(NSString*) value {
  resultTestAllTypes.hasOneofString = YES;
  resultTestAllTypes.oneofString = value;
  return self;
}
- (TestAllTypesBuilder*) clearOneofString {
  resultTestAllTypes.hasOneofString = NO;
  resultTestAllTypes.oneofString = @"";
  return self;
}
- (BOOL) hasOneofBytes {
  return resultTestAllTypes.hasOneofBytes;
}
- (NSData*) oneofBytes {
  return resultTestAllTypes.oneofBytes;
}
- (TestAllTypesBuilder*) setOneofBytes:(NSData*) value {
  resultTestAllTypes.hasOneofBytes = YES;
  resultTestAllTypes.oneofBytes = value;
  return self;
}
- (TestAllTypesBuilder*) clearOneofBytes {
  resultTestAllTypes.hasOneofBytes = NO;
  resultTestAllTypes.oneofBytes = [NSData data];
  return self;
}
@end

@interface NestedTestAllTypes ()
@property (strong) NestedTestAllTypes* child;
@property (strong) TestAllTypes* payload;
@end

@implementation NestedTestAllTypes

- (BOOL) hasChild {
  return !!hasChild_;
}
- (void) setHasChild:(BOOL) _value_ {
  hasChild_ = !!_value_;
}
@synthesize child;
- (BOOL) hasPayload {
  return !!hasPayload_;
}
- (void) setHasPayload:(BOOL) _value_ {
  hasPayload_ = !!_value_;
}
@synthesize payload;
- (instancetype) init {
  if ((self = [super init])) {
    self.child = [NestedTestAllTypes defaultInstance];
    self.payload = [TestAllTypes defaultInstance];
  }
  return self;
}
static NestedTestAllTypes* defaultNestedTestAllTypesInstance = nil;
+ (void) initialize {
  if (self == [NestedTestAllTypes class]) {
    defaultNestedTestAllTypesInstance = [[NestedTestAllTypes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultNestedTestAllTypesInstance;
}
- (instancetype) defaultInstance {
  return defaultNestedTestAllTypesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasChild) {
    [output writeMessage:1 value:self.child];
  }
  if (self.hasPayload) {
    [output writeMessage:2 value:self.payload];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasChild) {
    size_ += computeMessageSize(1, self.child);
  }
  if (self.hasPayload) {
    size_ += computeMessageSize(2, self.payload);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (NestedTestAllTypes*) parseFromData:(NSData*) data {
  return (NestedTestAllTypes*)[[[NestedTestAllTypes builder] mergeFromData:data] build];
}
+ (NestedTestAllTypes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NestedTestAllTypes*)[[[NestedTestAllTypes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NestedTestAllTypes*) parseFromInputStream:(NSInputStream*) input {
  return (NestedTestAllTypes*)[[[NestedTestAllTypes builder] mergeFromInputStream:input] build];
}
+ (NestedTestAllTypes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NestedTestAllTypes*)[[[NestedTestAllTypes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NestedTestAllTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NestedTestAllTypes*)[[[NestedTestAllTypes builder] mergeFromCodedInputStream:input] build];
}
+ (NestedTestAllTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NestedTestAllTypes*)[[[NestedTestAllTypes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NestedTestAllTypesBuilder*) builder {
  return [[NestedTestAllTypesBuilder alloc] init];
}
+ (NestedTestAllTypesBuilder*) builderWithPrototype:(NestedTestAllTypes*) prototype {
  return [[NestedTestAllTypes builder] mergeFrom:prototype];
}
- (NestedTestAllTypesBuilder*) builder {
  return [NestedTestAllTypes builder];
}
- (NestedTestAllTypesBuilder*) toBuilder {
  return [NestedTestAllTypes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasChild) {
    [output appendFormat:@"%@%@ {\n", indent, @"child"];
    [self.child writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPayload) {
    [output appendFormat:@"%@%@ {\n", indent, @"payload"];
    [self.payload writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasChild) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.child storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"child"];
  }
  if (self.hasPayload) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.payload storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"payload"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[NestedTestAllTypes class]]) {
    return NO;
  }
  NestedTestAllTypes *otherMessage = other;
  return
      self.hasChild == otherMessage.hasChild &&
      (!self.hasChild || [self.child isEqual:otherMessage.child]) &&
      self.hasPayload == otherMessage.hasPayload &&
      (!self.hasPayload || [self.payload isEqual:otherMessage.payload]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasChild) {
    hashCode = hashCode * 31 + [self.child hash];
  }
  if (self.hasPayload) {
    hashCode = hashCode * 31 + [self.payload hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface NestedTestAllTypesBuilder()
@property (strong) NestedTestAllTypes* resultNestedTestAllTypes;
@end

@implementation NestedTestAllTypesBuilder
@synthesize resultNestedTestAllTypes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNestedTestAllTypes = [[NestedTestAllTypes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNestedTestAllTypes;
}
- (NestedTestAllTypesBuilder*) clear {
  self.resultNestedTestAllTypes = [[NestedTestAllTypes alloc] init];
  return self;
}
- (NestedTestAllTypesBuilder*) clone {
  return [NestedTestAllTypes builderWithPrototype:resultNestedTestAllTypes];
}
- (NestedTestAllTypes*) defaultInstance {
  return [NestedTestAllTypes defaultInstance];
}
- (NestedTestAllTypes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NestedTestAllTypes*) buildPartial {
  NestedTestAllTypes* returnMe = resultNestedTestAllTypes;
  self.resultNestedTestAllTypes = nil;
  return returnMe;
}
- (NestedTestAllTypesBuilder*) mergeFrom:(NestedTestAllTypes*) other {
  if (other == [NestedTestAllTypes defaultInstance]) {
    return self;
  }
  if (other.hasChild) {
    [self mergeChild:other.child];
  }
  if (other.hasPayload) {
    [self mergePayload:other.payload];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NestedTestAllTypesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NestedTestAllTypesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        NestedTestAllTypesBuilder* subBuilder = [NestedTestAllTypes builder];
        if (self.hasChild) {
          [subBuilder mergeFrom:self.child];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChild:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        if (self.hasPayload) {
          [subBuilder mergeFrom:self.payload];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPayload:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasChild {
  return resultNestedTestAllTypes.hasChild;
}
- (NestedTestAllTypes*) child {
  return resultNestedTestAllTypes.child;
}
- (NestedTestAllTypesBuilder*) setChild:(NestedTestAllTypes*) value {
  resultNestedTestAllTypes.hasChild = YES;
  resultNestedTestAllTypes.child = value;
  return self;
}
- (NestedTestAllTypesBuilder*) setChildBuilder:(NestedTestAllTypesBuilder*) builderForValue {
  return [self setChild:[builderForValue build]];
}
- (NestedTestAllTypesBuilder*) mergeChild:(NestedTestAllTypes*) value {
  if (resultNestedTestAllTypes.hasChild &&
      resultNestedTestAllTypes.child != [NestedTestAllTypes defaultInstance]) {
    resultNestedTestAllTypes.child =
      [[[NestedTestAllTypes builderWithPrototype:resultNestedTestAllTypes.child] mergeFrom:value] buildPartial];
  } else {
    resultNestedTestAllTypes.child = value;
  }
  resultNestedTestAllTypes.hasChild = YES;
  return self;
}
- (NestedTestAllTypesBuilder*) clearChild {
  resultNestedTestAllTypes.hasChild = NO;
  resultNestedTestAllTypes.child = [NestedTestAllTypes defaultInstance];
  return self;
}
- (BOOL) hasPayload {
  return resultNestedTestAllTypes.hasPayload;
}
- (TestAllTypes*) payload {
  return resultNestedTestAllTypes.payload;
}
- (NestedTestAllTypesBuilder*) setPayload:(TestAllTypes*) value {
  resultNestedTestAllTypes.hasPayload = YES;
  resultNestedTestAllTypes.payload = value;
  return self;
}
- (NestedTestAllTypesBuilder*) setPayloadBuilder:(TestAllTypesBuilder*) builderForValue {
  return [self setPayload:[builderForValue build]];
}
- (NestedTestAllTypesBuilder*) mergePayload:(TestAllTypes*) value {
  if (resultNestedTestAllTypes.hasPayload &&
      resultNestedTestAllTypes.payload != [TestAllTypes defaultInstance]) {
    resultNestedTestAllTypes.payload =
      [[[TestAllTypes builderWithPrototype:resultNestedTestAllTypes.payload] mergeFrom:value] buildPartial];
  } else {
    resultNestedTestAllTypes.payload = value;
  }
  resultNestedTestAllTypes.hasPayload = YES;
  return self;
}
- (NestedTestAllTypesBuilder*) clearPayload {
  resultNestedTestAllTypes.hasPayload = NO;
  resultNestedTestAllTypes.payload = [TestAllTypes defaultInstance];
  return self;
}
@end

@interface TestDeprecatedFields ()
@property SInt32 deprecatedInt32;
@end

@implementation TestDeprecatedFields

- (BOOL) hasDeprecatedInt32 {
  return !!hasDeprecatedInt32_;
}
- (void) setHasDeprecatedInt32:(BOOL) _value_ {
  hasDeprecatedInt32_ = !!_value_;
}
@synthesize deprecatedInt32;
- (instancetype) init {
  if ((self = [super init])) {
    self.deprecatedInt32 = 0;
  }
  return self;
}
static TestDeprecatedFields* defaultTestDeprecatedFieldsInstance = nil;
+ (void) initialize {
  if (self == [TestDeprecatedFields class]) {
    defaultTestDeprecatedFieldsInstance = [[TestDeprecatedFields alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestDeprecatedFieldsInstance;
}
- (instancetype) defaultInstance {
  return defaultTestDeprecatedFieldsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDeprecatedInt32) {
    [output writeInt32:1 value:self.deprecatedInt32];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDeprecatedInt32) {
    size_ += computeInt32Size(1, self.deprecatedInt32);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestDeprecatedFields*) parseFromData:(NSData*) data {
  return (TestDeprecatedFields*)[[[TestDeprecatedFields builder] mergeFromData:data] build];
}
+ (TestDeprecatedFields*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDeprecatedFields*)[[[TestDeprecatedFields builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestDeprecatedFields*) parseFromInputStream:(NSInputStream*) input {
  return (TestDeprecatedFields*)[[[TestDeprecatedFields builder] mergeFromInputStream:input] build];
}
+ (TestDeprecatedFields*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDeprecatedFields*)[[[TestDeprecatedFields builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDeprecatedFields*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestDeprecatedFields*)[[[TestDeprecatedFields builder] mergeFromCodedInputStream:input] build];
}
+ (TestDeprecatedFields*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDeprecatedFields*)[[[TestDeprecatedFields builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDeprecatedFieldsBuilder*) builder {
  return [[TestDeprecatedFieldsBuilder alloc] init];
}
+ (TestDeprecatedFieldsBuilder*) builderWithPrototype:(TestDeprecatedFields*) prototype {
  return [[TestDeprecatedFields builder] mergeFrom:prototype];
}
- (TestDeprecatedFieldsBuilder*) builder {
  return [TestDeprecatedFields builder];
}
- (TestDeprecatedFieldsBuilder*) toBuilder {
  return [TestDeprecatedFields builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDeprecatedInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deprecatedInt32", [NSNumber numberWithInteger:self.deprecatedInt32]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDeprecatedInt32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.deprecatedInt32] forKey: @"deprecatedInt32"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDeprecatedFields class]]) {
    return NO;
  }
  TestDeprecatedFields *otherMessage = other;
  return
      self.hasDeprecatedInt32 == otherMessage.hasDeprecatedInt32 &&
      (!self.hasDeprecatedInt32 || self.deprecatedInt32 == otherMessage.deprecatedInt32) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDeprecatedInt32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.deprecatedInt32] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestDeprecatedFieldsBuilder()
@property (strong) TestDeprecatedFields* resultTestDeprecatedFields;
@end

@implementation TestDeprecatedFieldsBuilder
@synthesize resultTestDeprecatedFields;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestDeprecatedFields = [[TestDeprecatedFields alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestDeprecatedFields;
}
- (TestDeprecatedFieldsBuilder*) clear {
  self.resultTestDeprecatedFields = [[TestDeprecatedFields alloc] init];
  return self;
}
- (TestDeprecatedFieldsBuilder*) clone {
  return [TestDeprecatedFields builderWithPrototype:resultTestDeprecatedFields];
}
- (TestDeprecatedFields*) defaultInstance {
  return [TestDeprecatedFields defaultInstance];
}
- (TestDeprecatedFields*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDeprecatedFields*) buildPartial {
  TestDeprecatedFields* returnMe = resultTestDeprecatedFields;
  self.resultTestDeprecatedFields = nil;
  return returnMe;
}
- (TestDeprecatedFieldsBuilder*) mergeFrom:(TestDeprecatedFields*) other {
  if (other == [TestDeprecatedFields defaultInstance]) {
    return self;
  }
  if (other.hasDeprecatedInt32) {
    [self setDeprecatedInt32:other.deprecatedInt32];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestDeprecatedFieldsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestDeprecatedFieldsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDeprecatedInt32:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDeprecatedInt32 {
  return resultTestDeprecatedFields.hasDeprecatedInt32;
}
- (SInt32) deprecatedInt32 {
  return resultTestDeprecatedFields.deprecatedInt32;
}
- (TestDeprecatedFieldsBuilder*) setDeprecatedInt32:(SInt32) value {
  resultTestDeprecatedFields.hasDeprecatedInt32 = YES;
  resultTestDeprecatedFields.deprecatedInt32 = value;
  return self;
}
- (TestDeprecatedFieldsBuilder*) clearDeprecatedInt32 {
  resultTestDeprecatedFields.hasDeprecatedInt32 = NO;
  resultTestDeprecatedFields.deprecatedInt32 = 0;
  return self;
}
@end

@interface ForeignMessage ()
@property SInt32 c;
@end

@implementation ForeignMessage

- (BOOL) hasC {
  return !!hasC_;
}
- (void) setHasC:(BOOL) _value_ {
  hasC_ = !!_value_;
}
@synthesize c;
- (instancetype) init {
  if ((self = [super init])) {
    self.c = 0;
  }
  return self;
}
static ForeignMessage* defaultForeignMessageInstance = nil;
+ (void) initialize {
  if (self == [ForeignMessage class]) {
    defaultForeignMessageInstance = [[ForeignMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultForeignMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultForeignMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasC) {
    [output writeInt32:1 value:self.c];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasC) {
    size_ += computeInt32Size(1, self.c);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ForeignMessage*) parseFromData:(NSData*) data {
  return (ForeignMessage*)[[[ForeignMessage builder] mergeFromData:data] build];
}
+ (ForeignMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignMessage*)[[[ForeignMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ForeignMessage*) parseFromInputStream:(NSInputStream*) input {
  return (ForeignMessage*)[[[ForeignMessage builder] mergeFromInputStream:input] build];
}
+ (ForeignMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignMessage*)[[[ForeignMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ForeignMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ForeignMessage*)[[[ForeignMessage builder] mergeFromCodedInputStream:input] build];
}
+ (ForeignMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignMessage*)[[[ForeignMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ForeignMessageBuilder*) builder {
  return [[ForeignMessageBuilder alloc] init];
}
+ (ForeignMessageBuilder*) builderWithPrototype:(ForeignMessage*) prototype {
  return [[ForeignMessage builder] mergeFrom:prototype];
}
- (ForeignMessageBuilder*) builder {
  return [ForeignMessage builder];
}
- (ForeignMessageBuilder*) toBuilder {
  return [ForeignMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasC) {
    [output appendFormat:@"%@%@: %@\n", indent, @"c", [NSNumber numberWithInteger:self.c]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasC) {
    [dictionary setObject: [NSNumber numberWithInteger:self.c] forKey: @"c"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ForeignMessage class]]) {
    return NO;
  }
  ForeignMessage *otherMessage = other;
  return
      self.hasC == otherMessage.hasC &&
      (!self.hasC || self.c == otherMessage.c) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasC) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.c] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ForeignMessageBuilder()
@property (strong) ForeignMessage* resultForeignMessage;
@end

@implementation ForeignMessageBuilder
@synthesize resultForeignMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultForeignMessage = [[ForeignMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultForeignMessage;
}
- (ForeignMessageBuilder*) clear {
  self.resultForeignMessage = [[ForeignMessage alloc] init];
  return self;
}
- (ForeignMessageBuilder*) clone {
  return [ForeignMessage builderWithPrototype:resultForeignMessage];
}
- (ForeignMessage*) defaultInstance {
  return [ForeignMessage defaultInstance];
}
- (ForeignMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ForeignMessage*) buildPartial {
  ForeignMessage* returnMe = resultForeignMessage;
  self.resultForeignMessage = nil;
  return returnMe;
}
- (ForeignMessageBuilder*) mergeFrom:(ForeignMessage*) other {
  if (other == [ForeignMessage defaultInstance]) {
    return self;
  }
  if (other.hasC) {
    [self setC:other.c];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ForeignMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ForeignMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setC:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasC {
  return resultForeignMessage.hasC;
}
- (SInt32) c {
  return resultForeignMessage.c;
}
- (ForeignMessageBuilder*) setC:(SInt32) value {
  resultForeignMessage.hasC = YES;
  resultForeignMessage.c = value;
  return self;
}
- (ForeignMessageBuilder*) clearC {
  resultForeignMessage.hasC = NO;
  resultForeignMessage.c = 0;
  return self;
}
@end

@interface TestAllExtensions ()
@end

@implementation TestAllExtensions

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestAllExtensions* defaultTestAllExtensionsInstance = nil;
+ (void) initialize {
  if (self == [TestAllExtensions class]) {
    defaultTestAllExtensionsInstance = [[TestAllExtensions alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllExtensionsInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllExtensionsInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:1
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllExtensions*) parseFromData:(NSData*) data {
  return (TestAllExtensions*)[[[TestAllExtensions builder] mergeFromData:data] build];
}
+ (TestAllExtensions*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllExtensions*)[[[TestAllExtensions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllExtensions*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllExtensions*)[[[TestAllExtensions builder] mergeFromInputStream:input] build];
}
+ (TestAllExtensions*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllExtensions*)[[[TestAllExtensions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllExtensions*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllExtensions*)[[[TestAllExtensions builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllExtensions*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllExtensions*)[[[TestAllExtensions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllExtensionsBuilder*) builder {
  return [[TestAllExtensionsBuilder alloc] init];
}
+ (TestAllExtensionsBuilder*) builderWithPrototype:(TestAllExtensions*) prototype {
  return [[TestAllExtensions builder] mergeFrom:prototype];
}
- (TestAllExtensionsBuilder*) builder {
  return [TestAllExtensions builder];
}
- (TestAllExtensionsBuilder*) toBuilder {
  return [TestAllExtensions builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllExtensions class]]) {
    return NO;
  }
  TestAllExtensions *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestAllExtensionsBuilder()
@property (strong) TestAllExtensions* resultTestAllExtensions;
@end

@implementation TestAllExtensionsBuilder
@synthesize resultTestAllExtensions;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestAllExtensions = [[TestAllExtensions alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return resultTestAllExtensions;
}
- (TestAllExtensionsBuilder*) clear {
  self.resultTestAllExtensions = [[TestAllExtensions alloc] init];
  return self;
}
- (TestAllExtensionsBuilder*) clone {
  return [TestAllExtensions builderWithPrototype:resultTestAllExtensions];
}
- (TestAllExtensions*) defaultInstance {
  return [TestAllExtensions defaultInstance];
}
- (TestAllExtensions*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllExtensions*) buildPartial {
  TestAllExtensions* returnMe = resultTestAllExtensions;
  self.resultTestAllExtensions = nil;
  return returnMe;
}
- (TestAllExtensionsBuilder*) mergeFrom:(TestAllExtensions*) other {
  if (other == [TestAllExtensions defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllExtensionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllExtensionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface OptionalGroup_extension ()
@property SInt32 a;
@end

@implementation OptionalGroup_extension

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static OptionalGroup_extension* defaultOptionalGroup_extensionInstance = nil;
+ (void) initialize {
  if (self == [OptionalGroup_extension class]) {
    defaultOptionalGroup_extensionInstance = [[OptionalGroup_extension alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOptionalGroup_extensionInstance;
}
- (instancetype) defaultInstance {
  return defaultOptionalGroup_extensionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:17 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(17, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OptionalGroup_extension*) parseFromData:(NSData*) data {
  return (OptionalGroup_extension*)[[[OptionalGroup_extension builder] mergeFromData:data] build];
}
+ (OptionalGroup_extension*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OptionalGroup_extension*)[[[OptionalGroup_extension builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OptionalGroup_extension*) parseFromInputStream:(NSInputStream*) input {
  return (OptionalGroup_extension*)[[[OptionalGroup_extension builder] mergeFromInputStream:input] build];
}
+ (OptionalGroup_extension*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OptionalGroup_extension*)[[[OptionalGroup_extension builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OptionalGroup_extension*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OptionalGroup_extension*)[[[OptionalGroup_extension builder] mergeFromCodedInputStream:input] build];
}
+ (OptionalGroup_extension*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OptionalGroup_extension*)[[[OptionalGroup_extension builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OptionalGroup_extensionBuilder*) builder {
  return [[OptionalGroup_extensionBuilder alloc] init];
}
+ (OptionalGroup_extensionBuilder*) builderWithPrototype:(OptionalGroup_extension*) prototype {
  return [[OptionalGroup_extension builder] mergeFrom:prototype];
}
- (OptionalGroup_extensionBuilder*) builder {
  return [OptionalGroup_extension builder];
}
- (OptionalGroup_extensionBuilder*) toBuilder {
  return [OptionalGroup_extension builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OptionalGroup_extension class]]) {
    return NO;
  }
  OptionalGroup_extension *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OptionalGroup_extensionBuilder()
@property (strong) OptionalGroup_extension* resultOptionalGroupExtension;
@end

@implementation OptionalGroup_extensionBuilder
@synthesize resultOptionalGroupExtension;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOptionalGroupExtension = [[OptionalGroup_extension alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOptionalGroupExtension;
}
- (OptionalGroup_extensionBuilder*) clear {
  self.resultOptionalGroupExtension = [[OptionalGroup_extension alloc] init];
  return self;
}
- (OptionalGroup_extensionBuilder*) clone {
  return [OptionalGroup_extension builderWithPrototype:resultOptionalGroupExtension];
}
- (OptionalGroup_extension*) defaultInstance {
  return [OptionalGroup_extension defaultInstance];
}
- (OptionalGroup_extension*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OptionalGroup_extension*) buildPartial {
  OptionalGroup_extension* returnMe = resultOptionalGroupExtension;
  self.resultOptionalGroupExtension = nil;
  return returnMe;
}
- (OptionalGroup_extensionBuilder*) mergeFrom:(OptionalGroup_extension*) other {
  if (other == [OptionalGroup_extension defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OptionalGroup_extensionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OptionalGroup_extensionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 136: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultOptionalGroupExtension.hasA;
}
- (SInt32) a {
  return resultOptionalGroupExtension.a;
}
- (OptionalGroup_extensionBuilder*) setA:(SInt32) value {
  resultOptionalGroupExtension.hasA = YES;
  resultOptionalGroupExtension.a = value;
  return self;
}
- (OptionalGroup_extensionBuilder*) clearA {
  resultOptionalGroupExtension.hasA = NO;
  resultOptionalGroupExtension.a = 0;
  return self;
}
@end

@interface RepeatedGroup_extension ()
@property SInt32 a;
@end

@implementation RepeatedGroup_extension

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static RepeatedGroup_extension* defaultRepeatedGroup_extensionInstance = nil;
+ (void) initialize {
  if (self == [RepeatedGroup_extension class]) {
    defaultRepeatedGroup_extensionInstance = [[RepeatedGroup_extension alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRepeatedGroup_extensionInstance;
}
- (instancetype) defaultInstance {
  return defaultRepeatedGroup_extensionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:47 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(47, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RepeatedGroup_extension*) parseFromData:(NSData*) data {
  return (RepeatedGroup_extension*)[[[RepeatedGroup_extension builder] mergeFromData:data] build];
}
+ (RepeatedGroup_extension*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RepeatedGroup_extension*)[[[RepeatedGroup_extension builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RepeatedGroup_extension*) parseFromInputStream:(NSInputStream*) input {
  return (RepeatedGroup_extension*)[[[RepeatedGroup_extension builder] mergeFromInputStream:input] build];
}
+ (RepeatedGroup_extension*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RepeatedGroup_extension*)[[[RepeatedGroup_extension builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RepeatedGroup_extension*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RepeatedGroup_extension*)[[[RepeatedGroup_extension builder] mergeFromCodedInputStream:input] build];
}
+ (RepeatedGroup_extension*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RepeatedGroup_extension*)[[[RepeatedGroup_extension builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RepeatedGroup_extensionBuilder*) builder {
  return [[RepeatedGroup_extensionBuilder alloc] init];
}
+ (RepeatedGroup_extensionBuilder*) builderWithPrototype:(RepeatedGroup_extension*) prototype {
  return [[RepeatedGroup_extension builder] mergeFrom:prototype];
}
- (RepeatedGroup_extensionBuilder*) builder {
  return [RepeatedGroup_extension builder];
}
- (RepeatedGroup_extensionBuilder*) toBuilder {
  return [RepeatedGroup_extension builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RepeatedGroup_extension class]]) {
    return NO;
  }
  RepeatedGroup_extension *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RepeatedGroup_extensionBuilder()
@property (strong) RepeatedGroup_extension* resultRepeatedGroupExtension;
@end

@implementation RepeatedGroup_extensionBuilder
@synthesize resultRepeatedGroupExtension;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepeatedGroupExtension = [[RepeatedGroup_extension alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepeatedGroupExtension;
}
- (RepeatedGroup_extensionBuilder*) clear {
  self.resultRepeatedGroupExtension = [[RepeatedGroup_extension alloc] init];
  return self;
}
- (RepeatedGroup_extensionBuilder*) clone {
  return [RepeatedGroup_extension builderWithPrototype:resultRepeatedGroupExtension];
}
- (RepeatedGroup_extension*) defaultInstance {
  return [RepeatedGroup_extension defaultInstance];
}
- (RepeatedGroup_extension*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RepeatedGroup_extension*) buildPartial {
  RepeatedGroup_extension* returnMe = resultRepeatedGroupExtension;
  self.resultRepeatedGroupExtension = nil;
  return returnMe;
}
- (RepeatedGroup_extensionBuilder*) mergeFrom:(RepeatedGroup_extension*) other {
  if (other == [RepeatedGroup_extension defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RepeatedGroup_extensionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RepeatedGroup_extensionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 376: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultRepeatedGroupExtension.hasA;
}
- (SInt32) a {
  return resultRepeatedGroupExtension.a;
}
- (RepeatedGroup_extensionBuilder*) setA:(SInt32) value {
  resultRepeatedGroupExtension.hasA = YES;
  resultRepeatedGroupExtension.a = value;
  return self;
}
- (RepeatedGroup_extensionBuilder*) clearA {
  resultRepeatedGroupExtension.hasA = NO;
  resultRepeatedGroupExtension.a = 0;
  return self;
}
@end

@interface TestNestedExtension ()
@end

@implementation TestNestedExtension

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
+ (id<PBExtensionField>) test {
  return TestNestedExtension_test;
}
+ (id<PBExtensionField>) nestedStringExtension {
  return TestNestedExtension_nestedStringExtension;
}
static TestNestedExtension* defaultTestNestedExtensionInstance = nil;
+ (void) initialize {
  if (self == [TestNestedExtension class]) {
    defaultTestNestedExtensionInstance = [[TestNestedExtension alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestNestedExtensionInstance;
}
- (instancetype) defaultInstance {
  return defaultTestNestedExtensionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestNestedExtension*) parseFromData:(NSData*) data {
  return (TestNestedExtension*)[[[TestNestedExtension builder] mergeFromData:data] build];
}
+ (TestNestedExtension*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedExtension*)[[[TestNestedExtension builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestNestedExtension*) parseFromInputStream:(NSInputStream*) input {
  return (TestNestedExtension*)[[[TestNestedExtension builder] mergeFromInputStream:input] build];
}
+ (TestNestedExtension*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedExtension*)[[[TestNestedExtension builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestNestedExtension*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestNestedExtension*)[[[TestNestedExtension builder] mergeFromCodedInputStream:input] build];
}
+ (TestNestedExtension*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedExtension*)[[[TestNestedExtension builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestNestedExtensionBuilder*) builder {
  return [[TestNestedExtensionBuilder alloc] init];
}
+ (TestNestedExtensionBuilder*) builderWithPrototype:(TestNestedExtension*) prototype {
  return [[TestNestedExtension builder] mergeFrom:prototype];
}
- (TestNestedExtensionBuilder*) builder {
  return [TestNestedExtension builder];
}
- (TestNestedExtensionBuilder*) toBuilder {
  return [TestNestedExtension builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestNestedExtension class]]) {
    return NO;
  }
  TestNestedExtension *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestNestedExtensionBuilder()
@property (strong) TestNestedExtension* resultTestNestedExtension;
@end

@implementation TestNestedExtensionBuilder
@synthesize resultTestNestedExtension;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestNestedExtension = [[TestNestedExtension alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestNestedExtension;
}
- (TestNestedExtensionBuilder*) clear {
  self.resultTestNestedExtension = [[TestNestedExtension alloc] init];
  return self;
}
- (TestNestedExtensionBuilder*) clone {
  return [TestNestedExtension builderWithPrototype:resultTestNestedExtension];
}
- (TestNestedExtension*) defaultInstance {
  return [TestNestedExtension defaultInstance];
}
- (TestNestedExtension*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestNestedExtension*) buildPartial {
  TestNestedExtension* returnMe = resultTestNestedExtension;
  self.resultTestNestedExtension = nil;
  return returnMe;
}
- (TestNestedExtensionBuilder*) mergeFrom:(TestNestedExtension*) other {
  if (other == [TestNestedExtension defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestNestedExtensionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestNestedExtensionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface TestRequired ()
@property SInt32 a;
@property SInt32 dummy2;
@property SInt32 b;
@property SInt32 dummy4;
@property SInt32 dummy5;
@property SInt32 dummy6;
@property SInt32 dummy7;
@property SInt32 dummy8;
@property SInt32 dummy9;
@property SInt32 dummy10;
@property SInt32 dummy11;
@property SInt32 dummy12;
@property SInt32 dummy13;
@property SInt32 dummy14;
@property SInt32 dummy15;
@property SInt32 dummy16;
@property SInt32 dummy17;
@property SInt32 dummy18;
@property SInt32 dummy19;
@property SInt32 dummy20;
@property SInt32 dummy21;
@property SInt32 dummy22;
@property SInt32 dummy23;
@property SInt32 dummy24;
@property SInt32 dummy25;
@property SInt32 dummy26;
@property SInt32 dummy27;
@property SInt32 dummy28;
@property SInt32 dummy29;
@property SInt32 dummy30;
@property SInt32 dummy31;
@property SInt32 dummy32;
@property SInt32 c;
@end

@implementation TestRequired

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (BOOL) hasDummy2 {
  return !!hasDummy2_;
}
- (void) setHasDummy2:(BOOL) _value_ {
  hasDummy2_ = !!_value_;
}
@synthesize dummy2;
- (BOOL) hasB {
  return !!hasB_;
}
- (void) setHasB:(BOOL) _value_ {
  hasB_ = !!_value_;
}
@synthesize b;
- (BOOL) hasDummy4 {
  return !!hasDummy4_;
}
- (void) setHasDummy4:(BOOL) _value_ {
  hasDummy4_ = !!_value_;
}
@synthesize dummy4;
- (BOOL) hasDummy5 {
  return !!hasDummy5_;
}
- (void) setHasDummy5:(BOOL) _value_ {
  hasDummy5_ = !!_value_;
}
@synthesize dummy5;
- (BOOL) hasDummy6 {
  return !!hasDummy6_;
}
- (void) setHasDummy6:(BOOL) _value_ {
  hasDummy6_ = !!_value_;
}
@synthesize dummy6;
- (BOOL) hasDummy7 {
  return !!hasDummy7_;
}
- (void) setHasDummy7:(BOOL) _value_ {
  hasDummy7_ = !!_value_;
}
@synthesize dummy7;
- (BOOL) hasDummy8 {
  return !!hasDummy8_;
}
- (void) setHasDummy8:(BOOL) _value_ {
  hasDummy8_ = !!_value_;
}
@synthesize dummy8;
- (BOOL) hasDummy9 {
  return !!hasDummy9_;
}
- (void) setHasDummy9:(BOOL) _value_ {
  hasDummy9_ = !!_value_;
}
@synthesize dummy9;
- (BOOL) hasDummy10 {
  return !!hasDummy10_;
}
- (void) setHasDummy10:(BOOL) _value_ {
  hasDummy10_ = !!_value_;
}
@synthesize dummy10;
- (BOOL) hasDummy11 {
  return !!hasDummy11_;
}
- (void) setHasDummy11:(BOOL) _value_ {
  hasDummy11_ = !!_value_;
}
@synthesize dummy11;
- (BOOL) hasDummy12 {
  return !!hasDummy12_;
}
- (void) setHasDummy12:(BOOL) _value_ {
  hasDummy12_ = !!_value_;
}
@synthesize dummy12;
- (BOOL) hasDummy13 {
  return !!hasDummy13_;
}
- (void) setHasDummy13:(BOOL) _value_ {
  hasDummy13_ = !!_value_;
}
@synthesize dummy13;
- (BOOL) hasDummy14 {
  return !!hasDummy14_;
}
- (void) setHasDummy14:(BOOL) _value_ {
  hasDummy14_ = !!_value_;
}
@synthesize dummy14;
- (BOOL) hasDummy15 {
  return !!hasDummy15_;
}
- (void) setHasDummy15:(BOOL) _value_ {
  hasDummy15_ = !!_value_;
}
@synthesize dummy15;
- (BOOL) hasDummy16 {
  return !!hasDummy16_;
}
- (void) setHasDummy16:(BOOL) _value_ {
  hasDummy16_ = !!_value_;
}
@synthesize dummy16;
- (BOOL) hasDummy17 {
  return !!hasDummy17_;
}
- (void) setHasDummy17:(BOOL) _value_ {
  hasDummy17_ = !!_value_;
}
@synthesize dummy17;
- (BOOL) hasDummy18 {
  return !!hasDummy18_;
}
- (void) setHasDummy18:(BOOL) _value_ {
  hasDummy18_ = !!_value_;
}
@synthesize dummy18;
- (BOOL) hasDummy19 {
  return !!hasDummy19_;
}
- (void) setHasDummy19:(BOOL) _value_ {
  hasDummy19_ = !!_value_;
}
@synthesize dummy19;
- (BOOL) hasDummy20 {
  return !!hasDummy20_;
}
- (void) setHasDummy20:(BOOL) _value_ {
  hasDummy20_ = !!_value_;
}
@synthesize dummy20;
- (BOOL) hasDummy21 {
  return !!hasDummy21_;
}
- (void) setHasDummy21:(BOOL) _value_ {
  hasDummy21_ = !!_value_;
}
@synthesize dummy21;
- (BOOL) hasDummy22 {
  return !!hasDummy22_;
}
- (void) setHasDummy22:(BOOL) _value_ {
  hasDummy22_ = !!_value_;
}
@synthesize dummy22;
- (BOOL) hasDummy23 {
  return !!hasDummy23_;
}
- (void) setHasDummy23:(BOOL) _value_ {
  hasDummy23_ = !!_value_;
}
@synthesize dummy23;
- (BOOL) hasDummy24 {
  return !!hasDummy24_;
}
- (void) setHasDummy24:(BOOL) _value_ {
  hasDummy24_ = !!_value_;
}
@synthesize dummy24;
- (BOOL) hasDummy25 {
  return !!hasDummy25_;
}
- (void) setHasDummy25:(BOOL) _value_ {
  hasDummy25_ = !!_value_;
}
@synthesize dummy25;
- (BOOL) hasDummy26 {
  return !!hasDummy26_;
}
- (void) setHasDummy26:(BOOL) _value_ {
  hasDummy26_ = !!_value_;
}
@synthesize dummy26;
- (BOOL) hasDummy27 {
  return !!hasDummy27_;
}
- (void) setHasDummy27:(BOOL) _value_ {
  hasDummy27_ = !!_value_;
}
@synthesize dummy27;
- (BOOL) hasDummy28 {
  return !!hasDummy28_;
}
- (void) setHasDummy28:(BOOL) _value_ {
  hasDummy28_ = !!_value_;
}
@synthesize dummy28;
- (BOOL) hasDummy29 {
  return !!hasDummy29_;
}
- (void) setHasDummy29:(BOOL) _value_ {
  hasDummy29_ = !!_value_;
}
@synthesize dummy29;
- (BOOL) hasDummy30 {
  return !!hasDummy30_;
}
- (void) setHasDummy30:(BOOL) _value_ {
  hasDummy30_ = !!_value_;
}
@synthesize dummy30;
- (BOOL) hasDummy31 {
  return !!hasDummy31_;
}
- (void) setHasDummy31:(BOOL) _value_ {
  hasDummy31_ = !!_value_;
}
@synthesize dummy31;
- (BOOL) hasDummy32 {
  return !!hasDummy32_;
}
- (void) setHasDummy32:(BOOL) _value_ {
  hasDummy32_ = !!_value_;
}
@synthesize dummy32;
- (BOOL) hasC {
  return !!hasC_;
}
- (void) setHasC:(BOOL) _value_ {
  hasC_ = !!_value_;
}
@synthesize c;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
    self.dummy2 = 0;
    self.b = 0;
    self.dummy4 = 0;
    self.dummy5 = 0;
    self.dummy6 = 0;
    self.dummy7 = 0;
    self.dummy8 = 0;
    self.dummy9 = 0;
    self.dummy10 = 0;
    self.dummy11 = 0;
    self.dummy12 = 0;
    self.dummy13 = 0;
    self.dummy14 = 0;
    self.dummy15 = 0;
    self.dummy16 = 0;
    self.dummy17 = 0;
    self.dummy18 = 0;
    self.dummy19 = 0;
    self.dummy20 = 0;
    self.dummy21 = 0;
    self.dummy22 = 0;
    self.dummy23 = 0;
    self.dummy24 = 0;
    self.dummy25 = 0;
    self.dummy26 = 0;
    self.dummy27 = 0;
    self.dummy28 = 0;
    self.dummy29 = 0;
    self.dummy30 = 0;
    self.dummy31 = 0;
    self.dummy32 = 0;
    self.c = 0;
  }
  return self;
}
+ (id<PBExtensionField>) single {
  return TestRequired_single;
}
+ (id<PBExtensionField>) multi {
  return TestRequired_multi;
}
static TestRequired* defaultTestRequiredInstance = nil;
+ (void) initialize {
  if (self == [TestRequired class]) {
    defaultTestRequiredInstance = [[TestRequired alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestRequiredInstance;
}
- (instancetype) defaultInstance {
  return defaultTestRequiredInstance;
}
- (BOOL) isInitialized {
  if (!self.hasA) {
    return NO;
  }
  if (!self.hasB) {
    return NO;
  }
  if (!self.hasC) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  if (self.hasDummy2) {
    [output writeInt32:2 value:self.dummy2];
  }
  if (self.hasB) {
    [output writeInt32:3 value:self.b];
  }
  if (self.hasDummy4) {
    [output writeInt32:4 value:self.dummy4];
  }
  if (self.hasDummy5) {
    [output writeInt32:5 value:self.dummy5];
  }
  if (self.hasDummy6) {
    [output writeInt32:6 value:self.dummy6];
  }
  if (self.hasDummy7) {
    [output writeInt32:7 value:self.dummy7];
  }
  if (self.hasDummy8) {
    [output writeInt32:8 value:self.dummy8];
  }
  if (self.hasDummy9) {
    [output writeInt32:9 value:self.dummy9];
  }
  if (self.hasDummy10) {
    [output writeInt32:10 value:self.dummy10];
  }
  if (self.hasDummy11) {
    [output writeInt32:11 value:self.dummy11];
  }
  if (self.hasDummy12) {
    [output writeInt32:12 value:self.dummy12];
  }
  if (self.hasDummy13) {
    [output writeInt32:13 value:self.dummy13];
  }
  if (self.hasDummy14) {
    [output writeInt32:14 value:self.dummy14];
  }
  if (self.hasDummy15) {
    [output writeInt32:15 value:self.dummy15];
  }
  if (self.hasDummy16) {
    [output writeInt32:16 value:self.dummy16];
  }
  if (self.hasDummy17) {
    [output writeInt32:17 value:self.dummy17];
  }
  if (self.hasDummy18) {
    [output writeInt32:18 value:self.dummy18];
  }
  if (self.hasDummy19) {
    [output writeInt32:19 value:self.dummy19];
  }
  if (self.hasDummy20) {
    [output writeInt32:20 value:self.dummy20];
  }
  if (self.hasDummy21) {
    [output writeInt32:21 value:self.dummy21];
  }
  if (self.hasDummy22) {
    [output writeInt32:22 value:self.dummy22];
  }
  if (self.hasDummy23) {
    [output writeInt32:23 value:self.dummy23];
  }
  if (self.hasDummy24) {
    [output writeInt32:24 value:self.dummy24];
  }
  if (self.hasDummy25) {
    [output writeInt32:25 value:self.dummy25];
  }
  if (self.hasDummy26) {
    [output writeInt32:26 value:self.dummy26];
  }
  if (self.hasDummy27) {
    [output writeInt32:27 value:self.dummy27];
  }
  if (self.hasDummy28) {
    [output writeInt32:28 value:self.dummy28];
  }
  if (self.hasDummy29) {
    [output writeInt32:29 value:self.dummy29];
  }
  if (self.hasDummy30) {
    [output writeInt32:30 value:self.dummy30];
  }
  if (self.hasDummy31) {
    [output writeInt32:31 value:self.dummy31];
  }
  if (self.hasDummy32) {
    [output writeInt32:32 value:self.dummy32];
  }
  if (self.hasC) {
    [output writeInt32:33 value:self.c];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  if (self.hasDummy2) {
    size_ += computeInt32Size(2, self.dummy2);
  }
  if (self.hasB) {
    size_ += computeInt32Size(3, self.b);
  }
  if (self.hasDummy4) {
    size_ += computeInt32Size(4, self.dummy4);
  }
  if (self.hasDummy5) {
    size_ += computeInt32Size(5, self.dummy5);
  }
  if (self.hasDummy6) {
    size_ += computeInt32Size(6, self.dummy6);
  }
  if (self.hasDummy7) {
    size_ += computeInt32Size(7, self.dummy7);
  }
  if (self.hasDummy8) {
    size_ += computeInt32Size(8, self.dummy8);
  }
  if (self.hasDummy9) {
    size_ += computeInt32Size(9, self.dummy9);
  }
  if (self.hasDummy10) {
    size_ += computeInt32Size(10, self.dummy10);
  }
  if (self.hasDummy11) {
    size_ += computeInt32Size(11, self.dummy11);
  }
  if (self.hasDummy12) {
    size_ += computeInt32Size(12, self.dummy12);
  }
  if (self.hasDummy13) {
    size_ += computeInt32Size(13, self.dummy13);
  }
  if (self.hasDummy14) {
    size_ += computeInt32Size(14, self.dummy14);
  }
  if (self.hasDummy15) {
    size_ += computeInt32Size(15, self.dummy15);
  }
  if (self.hasDummy16) {
    size_ += computeInt32Size(16, self.dummy16);
  }
  if (self.hasDummy17) {
    size_ += computeInt32Size(17, self.dummy17);
  }
  if (self.hasDummy18) {
    size_ += computeInt32Size(18, self.dummy18);
  }
  if (self.hasDummy19) {
    size_ += computeInt32Size(19, self.dummy19);
  }
  if (self.hasDummy20) {
    size_ += computeInt32Size(20, self.dummy20);
  }
  if (self.hasDummy21) {
    size_ += computeInt32Size(21, self.dummy21);
  }
  if (self.hasDummy22) {
    size_ += computeInt32Size(22, self.dummy22);
  }
  if (self.hasDummy23) {
    size_ += computeInt32Size(23, self.dummy23);
  }
  if (self.hasDummy24) {
    size_ += computeInt32Size(24, self.dummy24);
  }
  if (self.hasDummy25) {
    size_ += computeInt32Size(25, self.dummy25);
  }
  if (self.hasDummy26) {
    size_ += computeInt32Size(26, self.dummy26);
  }
  if (self.hasDummy27) {
    size_ += computeInt32Size(27, self.dummy27);
  }
  if (self.hasDummy28) {
    size_ += computeInt32Size(28, self.dummy28);
  }
  if (self.hasDummy29) {
    size_ += computeInt32Size(29, self.dummy29);
  }
  if (self.hasDummy30) {
    size_ += computeInt32Size(30, self.dummy30);
  }
  if (self.hasDummy31) {
    size_ += computeInt32Size(31, self.dummy31);
  }
  if (self.hasDummy32) {
    size_ += computeInt32Size(32, self.dummy32);
  }
  if (self.hasC) {
    size_ += computeInt32Size(33, self.c);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestRequired*) parseFromData:(NSData*) data {
  return (TestRequired*)[[[TestRequired builder] mergeFromData:data] build];
}
+ (TestRequired*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequired*)[[[TestRequired builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestRequired*) parseFromInputStream:(NSInputStream*) input {
  return (TestRequired*)[[[TestRequired builder] mergeFromInputStream:input] build];
}
+ (TestRequired*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequired*)[[[TestRequired builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRequired*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestRequired*)[[[TestRequired builder] mergeFromCodedInputStream:input] build];
}
+ (TestRequired*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequired*)[[[TestRequired builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRequiredBuilder*) builder {
  return [[TestRequiredBuilder alloc] init];
}
+ (TestRequiredBuilder*) builderWithPrototype:(TestRequired*) prototype {
  return [[TestRequired builder] mergeFrom:prototype];
}
- (TestRequiredBuilder*) builder {
  return [TestRequired builder];
}
- (TestRequiredBuilder*) toBuilder {
  return [TestRequired builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  if (self.hasDummy2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy2", [NSNumber numberWithInteger:self.dummy2]];
  }
  if (self.hasB) {
    [output appendFormat:@"%@%@: %@\n", indent, @"b", [NSNumber numberWithInteger:self.b]];
  }
  if (self.hasDummy4) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy4", [NSNumber numberWithInteger:self.dummy4]];
  }
  if (self.hasDummy5) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy5", [NSNumber numberWithInteger:self.dummy5]];
  }
  if (self.hasDummy6) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy6", [NSNumber numberWithInteger:self.dummy6]];
  }
  if (self.hasDummy7) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy7", [NSNumber numberWithInteger:self.dummy7]];
  }
  if (self.hasDummy8) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy8", [NSNumber numberWithInteger:self.dummy8]];
  }
  if (self.hasDummy9) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy9", [NSNumber numberWithInteger:self.dummy9]];
  }
  if (self.hasDummy10) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy10", [NSNumber numberWithInteger:self.dummy10]];
  }
  if (self.hasDummy11) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy11", [NSNumber numberWithInteger:self.dummy11]];
  }
  if (self.hasDummy12) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy12", [NSNumber numberWithInteger:self.dummy12]];
  }
  if (self.hasDummy13) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy13", [NSNumber numberWithInteger:self.dummy13]];
  }
  if (self.hasDummy14) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy14", [NSNumber numberWithInteger:self.dummy14]];
  }
  if (self.hasDummy15) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy15", [NSNumber numberWithInteger:self.dummy15]];
  }
  if (self.hasDummy16) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy16", [NSNumber numberWithInteger:self.dummy16]];
  }
  if (self.hasDummy17) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy17", [NSNumber numberWithInteger:self.dummy17]];
  }
  if (self.hasDummy18) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy18", [NSNumber numberWithInteger:self.dummy18]];
  }
  if (self.hasDummy19) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy19", [NSNumber numberWithInteger:self.dummy19]];
  }
  if (self.hasDummy20) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy20", [NSNumber numberWithInteger:self.dummy20]];
  }
  if (self.hasDummy21) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy21", [NSNumber numberWithInteger:self.dummy21]];
  }
  if (self.hasDummy22) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy22", [NSNumber numberWithInteger:self.dummy22]];
  }
  if (self.hasDummy23) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy23", [NSNumber numberWithInteger:self.dummy23]];
  }
  if (self.hasDummy24) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy24", [NSNumber numberWithInteger:self.dummy24]];
  }
  if (self.hasDummy25) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy25", [NSNumber numberWithInteger:self.dummy25]];
  }
  if (self.hasDummy26) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy26", [NSNumber numberWithInteger:self.dummy26]];
  }
  if (self.hasDummy27) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy27", [NSNumber numberWithInteger:self.dummy27]];
  }
  if (self.hasDummy28) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy28", [NSNumber numberWithInteger:self.dummy28]];
  }
  if (self.hasDummy29) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy29", [NSNumber numberWithInteger:self.dummy29]];
  }
  if (self.hasDummy30) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy30", [NSNumber numberWithInteger:self.dummy30]];
  }
  if (self.hasDummy31) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy31", [NSNumber numberWithInteger:self.dummy31]];
  }
  if (self.hasDummy32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy32", [NSNumber numberWithInteger:self.dummy32]];
  }
  if (self.hasC) {
    [output appendFormat:@"%@%@: %@\n", indent, @"c", [NSNumber numberWithInteger:self.c]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  if (self.hasDummy2) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy2] forKey: @"dummy2"];
  }
  if (self.hasB) {
    [dictionary setObject: [NSNumber numberWithInteger:self.b] forKey: @"b"];
  }
  if (self.hasDummy4) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy4] forKey: @"dummy4"];
  }
  if (self.hasDummy5) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy5] forKey: @"dummy5"];
  }
  if (self.hasDummy6) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy6] forKey: @"dummy6"];
  }
  if (self.hasDummy7) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy7] forKey: @"dummy7"];
  }
  if (self.hasDummy8) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy8] forKey: @"dummy8"];
  }
  if (self.hasDummy9) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy9] forKey: @"dummy9"];
  }
  if (self.hasDummy10) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy10] forKey: @"dummy10"];
  }
  if (self.hasDummy11) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy11] forKey: @"dummy11"];
  }
  if (self.hasDummy12) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy12] forKey: @"dummy12"];
  }
  if (self.hasDummy13) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy13] forKey: @"dummy13"];
  }
  if (self.hasDummy14) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy14] forKey: @"dummy14"];
  }
  if (self.hasDummy15) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy15] forKey: @"dummy15"];
  }
  if (self.hasDummy16) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy16] forKey: @"dummy16"];
  }
  if (self.hasDummy17) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy17] forKey: @"dummy17"];
  }
  if (self.hasDummy18) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy18] forKey: @"dummy18"];
  }
  if (self.hasDummy19) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy19] forKey: @"dummy19"];
  }
  if (self.hasDummy20) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy20] forKey: @"dummy20"];
  }
  if (self.hasDummy21) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy21] forKey: @"dummy21"];
  }
  if (self.hasDummy22) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy22] forKey: @"dummy22"];
  }
  if (self.hasDummy23) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy23] forKey: @"dummy23"];
  }
  if (self.hasDummy24) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy24] forKey: @"dummy24"];
  }
  if (self.hasDummy25) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy25] forKey: @"dummy25"];
  }
  if (self.hasDummy26) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy26] forKey: @"dummy26"];
  }
  if (self.hasDummy27) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy27] forKey: @"dummy27"];
  }
  if (self.hasDummy28) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy28] forKey: @"dummy28"];
  }
  if (self.hasDummy29) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy29] forKey: @"dummy29"];
  }
  if (self.hasDummy30) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy30] forKey: @"dummy30"];
  }
  if (self.hasDummy31) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy31] forKey: @"dummy31"];
  }
  if (self.hasDummy32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy32] forKey: @"dummy32"];
  }
  if (self.hasC) {
    [dictionary setObject: [NSNumber numberWithInteger:self.c] forKey: @"c"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRequired class]]) {
    return NO;
  }
  TestRequired *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      self.hasDummy2 == otherMessage.hasDummy2 &&
      (!self.hasDummy2 || self.dummy2 == otherMessage.dummy2) &&
      self.hasB == otherMessage.hasB &&
      (!self.hasB || self.b == otherMessage.b) &&
      self.hasDummy4 == otherMessage.hasDummy4 &&
      (!self.hasDummy4 || self.dummy4 == otherMessage.dummy4) &&
      self.hasDummy5 == otherMessage.hasDummy5 &&
      (!self.hasDummy5 || self.dummy5 == otherMessage.dummy5) &&
      self.hasDummy6 == otherMessage.hasDummy6 &&
      (!self.hasDummy6 || self.dummy6 == otherMessage.dummy6) &&
      self.hasDummy7 == otherMessage.hasDummy7 &&
      (!self.hasDummy7 || self.dummy7 == otherMessage.dummy7) &&
      self.hasDummy8 == otherMessage.hasDummy8 &&
      (!self.hasDummy8 || self.dummy8 == otherMessage.dummy8) &&
      self.hasDummy9 == otherMessage.hasDummy9 &&
      (!self.hasDummy9 || self.dummy9 == otherMessage.dummy9) &&
      self.hasDummy10 == otherMessage.hasDummy10 &&
      (!self.hasDummy10 || self.dummy10 == otherMessage.dummy10) &&
      self.hasDummy11 == otherMessage.hasDummy11 &&
      (!self.hasDummy11 || self.dummy11 == otherMessage.dummy11) &&
      self.hasDummy12 == otherMessage.hasDummy12 &&
      (!self.hasDummy12 || self.dummy12 == otherMessage.dummy12) &&
      self.hasDummy13 == otherMessage.hasDummy13 &&
      (!self.hasDummy13 || self.dummy13 == otherMessage.dummy13) &&
      self.hasDummy14 == otherMessage.hasDummy14 &&
      (!self.hasDummy14 || self.dummy14 == otherMessage.dummy14) &&
      self.hasDummy15 == otherMessage.hasDummy15 &&
      (!self.hasDummy15 || self.dummy15 == otherMessage.dummy15) &&
      self.hasDummy16 == otherMessage.hasDummy16 &&
      (!self.hasDummy16 || self.dummy16 == otherMessage.dummy16) &&
      self.hasDummy17 == otherMessage.hasDummy17 &&
      (!self.hasDummy17 || self.dummy17 == otherMessage.dummy17) &&
      self.hasDummy18 == otherMessage.hasDummy18 &&
      (!self.hasDummy18 || self.dummy18 == otherMessage.dummy18) &&
      self.hasDummy19 == otherMessage.hasDummy19 &&
      (!self.hasDummy19 || self.dummy19 == otherMessage.dummy19) &&
      self.hasDummy20 == otherMessage.hasDummy20 &&
      (!self.hasDummy20 || self.dummy20 == otherMessage.dummy20) &&
      self.hasDummy21 == otherMessage.hasDummy21 &&
      (!self.hasDummy21 || self.dummy21 == otherMessage.dummy21) &&
      self.hasDummy22 == otherMessage.hasDummy22 &&
      (!self.hasDummy22 || self.dummy22 == otherMessage.dummy22) &&
      self.hasDummy23 == otherMessage.hasDummy23 &&
      (!self.hasDummy23 || self.dummy23 == otherMessage.dummy23) &&
      self.hasDummy24 == otherMessage.hasDummy24 &&
      (!self.hasDummy24 || self.dummy24 == otherMessage.dummy24) &&
      self.hasDummy25 == otherMessage.hasDummy25 &&
      (!self.hasDummy25 || self.dummy25 == otherMessage.dummy25) &&
      self.hasDummy26 == otherMessage.hasDummy26 &&
      (!self.hasDummy26 || self.dummy26 == otherMessage.dummy26) &&
      self.hasDummy27 == otherMessage.hasDummy27 &&
      (!self.hasDummy27 || self.dummy27 == otherMessage.dummy27) &&
      self.hasDummy28 == otherMessage.hasDummy28 &&
      (!self.hasDummy28 || self.dummy28 == otherMessage.dummy28) &&
      self.hasDummy29 == otherMessage.hasDummy29 &&
      (!self.hasDummy29 || self.dummy29 == otherMessage.dummy29) &&
      self.hasDummy30 == otherMessage.hasDummy30 &&
      (!self.hasDummy30 || self.dummy30 == otherMessage.dummy30) &&
      self.hasDummy31 == otherMessage.hasDummy31 &&
      (!self.hasDummy31 || self.dummy31 == otherMessage.dummy31) &&
      self.hasDummy32 == otherMessage.hasDummy32 &&
      (!self.hasDummy32 || self.dummy32 == otherMessage.dummy32) &&
      self.hasC == otherMessage.hasC &&
      (!self.hasC || self.c == otherMessage.c) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  if (self.hasDummy2) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy2] hash];
  }
  if (self.hasB) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.b] hash];
  }
  if (self.hasDummy4) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy4] hash];
  }
  if (self.hasDummy5) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy5] hash];
  }
  if (self.hasDummy6) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy6] hash];
  }
  if (self.hasDummy7) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy7] hash];
  }
  if (self.hasDummy8) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy8] hash];
  }
  if (self.hasDummy9) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy9] hash];
  }
  if (self.hasDummy10) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy10] hash];
  }
  if (self.hasDummy11) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy11] hash];
  }
  if (self.hasDummy12) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy12] hash];
  }
  if (self.hasDummy13) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy13] hash];
  }
  if (self.hasDummy14) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy14] hash];
  }
  if (self.hasDummy15) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy15] hash];
  }
  if (self.hasDummy16) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy16] hash];
  }
  if (self.hasDummy17) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy17] hash];
  }
  if (self.hasDummy18) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy18] hash];
  }
  if (self.hasDummy19) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy19] hash];
  }
  if (self.hasDummy20) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy20] hash];
  }
  if (self.hasDummy21) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy21] hash];
  }
  if (self.hasDummy22) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy22] hash];
  }
  if (self.hasDummy23) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy23] hash];
  }
  if (self.hasDummy24) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy24] hash];
  }
  if (self.hasDummy25) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy25] hash];
  }
  if (self.hasDummy26) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy26] hash];
  }
  if (self.hasDummy27) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy27] hash];
  }
  if (self.hasDummy28) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy28] hash];
  }
  if (self.hasDummy29) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy29] hash];
  }
  if (self.hasDummy30) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy30] hash];
  }
  if (self.hasDummy31) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy31] hash];
  }
  if (self.hasDummy32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy32] hash];
  }
  if (self.hasC) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.c] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestRequiredBuilder()
@property (strong) TestRequired* resultTestRequired;
@end

@implementation TestRequiredBuilder
@synthesize resultTestRequired;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestRequired = [[TestRequired alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestRequired;
}
- (TestRequiredBuilder*) clear {
  self.resultTestRequired = [[TestRequired alloc] init];
  return self;
}
- (TestRequiredBuilder*) clone {
  return [TestRequired builderWithPrototype:resultTestRequired];
}
- (TestRequired*) defaultInstance {
  return [TestRequired defaultInstance];
}
- (TestRequired*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRequired*) buildPartial {
  TestRequired* returnMe = resultTestRequired;
  self.resultTestRequired = nil;
  return returnMe;
}
- (TestRequiredBuilder*) mergeFrom:(TestRequired*) other {
  if (other == [TestRequired defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasDummy2) {
    [self setDummy2:other.dummy2];
  }
  if (other.hasB) {
    [self setB:other.b];
  }
  if (other.hasDummy4) {
    [self setDummy4:other.dummy4];
  }
  if (other.hasDummy5) {
    [self setDummy5:other.dummy5];
  }
  if (other.hasDummy6) {
    [self setDummy6:other.dummy6];
  }
  if (other.hasDummy7) {
    [self setDummy7:other.dummy7];
  }
  if (other.hasDummy8) {
    [self setDummy8:other.dummy8];
  }
  if (other.hasDummy9) {
    [self setDummy9:other.dummy9];
  }
  if (other.hasDummy10) {
    [self setDummy10:other.dummy10];
  }
  if (other.hasDummy11) {
    [self setDummy11:other.dummy11];
  }
  if (other.hasDummy12) {
    [self setDummy12:other.dummy12];
  }
  if (other.hasDummy13) {
    [self setDummy13:other.dummy13];
  }
  if (other.hasDummy14) {
    [self setDummy14:other.dummy14];
  }
  if (other.hasDummy15) {
    [self setDummy15:other.dummy15];
  }
  if (other.hasDummy16) {
    [self setDummy16:other.dummy16];
  }
  if (other.hasDummy17) {
    [self setDummy17:other.dummy17];
  }
  if (other.hasDummy18) {
    [self setDummy18:other.dummy18];
  }
  if (other.hasDummy19) {
    [self setDummy19:other.dummy19];
  }
  if (other.hasDummy20) {
    [self setDummy20:other.dummy20];
  }
  if (other.hasDummy21) {
    [self setDummy21:other.dummy21];
  }
  if (other.hasDummy22) {
    [self setDummy22:other.dummy22];
  }
  if (other.hasDummy23) {
    [self setDummy23:other.dummy23];
  }
  if (other.hasDummy24) {
    [self setDummy24:other.dummy24];
  }
  if (other.hasDummy25) {
    [self setDummy25:other.dummy25];
  }
  if (other.hasDummy26) {
    [self setDummy26:other.dummy26];
  }
  if (other.hasDummy27) {
    [self setDummy27:other.dummy27];
  }
  if (other.hasDummy28) {
    [self setDummy28:other.dummy28];
  }
  if (other.hasDummy29) {
    [self setDummy29:other.dummy29];
  }
  if (other.hasDummy30) {
    [self setDummy30:other.dummy30];
  }
  if (other.hasDummy31) {
    [self setDummy31:other.dummy31];
  }
  if (other.hasDummy32) {
    [self setDummy32:other.dummy32];
  }
  if (other.hasC) {
    [self setC:other.c];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestRequiredBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestRequiredBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
      case 16: {
        [self setDummy2:[input readInt32]];
        break;
      }
      case 24: {
        [self setB:[input readInt32]];
        break;
      }
      case 32: {
        [self setDummy4:[input readInt32]];
        break;
      }
      case 40: {
        [self setDummy5:[input readInt32]];
        break;
      }
      case 48: {
        [self setDummy6:[input readInt32]];
        break;
      }
      case 56: {
        [self setDummy7:[input readInt32]];
        break;
      }
      case 64: {
        [self setDummy8:[input readInt32]];
        break;
      }
      case 72: {
        [self setDummy9:[input readInt32]];
        break;
      }
      case 80: {
        [self setDummy10:[input readInt32]];
        break;
      }
      case 88: {
        [self setDummy11:[input readInt32]];
        break;
      }
      case 96: {
        [self setDummy12:[input readInt32]];
        break;
      }
      case 104: {
        [self setDummy13:[input readInt32]];
        break;
      }
      case 112: {
        [self setDummy14:[input readInt32]];
        break;
      }
      case 120: {
        [self setDummy15:[input readInt32]];
        break;
      }
      case 128: {
        [self setDummy16:[input readInt32]];
        break;
      }
      case 136: {
        [self setDummy17:[input readInt32]];
        break;
      }
      case 144: {
        [self setDummy18:[input readInt32]];
        break;
      }
      case 152: {
        [self setDummy19:[input readInt32]];
        break;
      }
      case 160: {
        [self setDummy20:[input readInt32]];
        break;
      }
      case 168: {
        [self setDummy21:[input readInt32]];
        break;
      }
      case 176: {
        [self setDummy22:[input readInt32]];
        break;
      }
      case 184: {
        [self setDummy23:[input readInt32]];
        break;
      }
      case 192: {
        [self setDummy24:[input readInt32]];
        break;
      }
      case 200: {
        [self setDummy25:[input readInt32]];
        break;
      }
      case 208: {
        [self setDummy26:[input readInt32]];
        break;
      }
      case 216: {
        [self setDummy27:[input readInt32]];
        break;
      }
      case 224: {
        [self setDummy28:[input readInt32]];
        break;
      }
      case 232: {
        [self setDummy29:[input readInt32]];
        break;
      }
      case 240: {
        [self setDummy30:[input readInt32]];
        break;
      }
      case 248: {
        [self setDummy31:[input readInt32]];
        break;
      }
      case 256: {
        [self setDummy32:[input readInt32]];
        break;
      }
      case 264: {
        [self setC:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultTestRequired.hasA;
}
- (SInt32) a {
  return resultTestRequired.a;
}
- (TestRequiredBuilder*) setA:(SInt32) value {
  resultTestRequired.hasA = YES;
  resultTestRequired.a = value;
  return self;
}
- (TestRequiredBuilder*) clearA {
  resultTestRequired.hasA = NO;
  resultTestRequired.a = 0;
  return self;
}
- (BOOL) hasDummy2 {
  return resultTestRequired.hasDummy2;
}
- (SInt32) dummy2 {
  return resultTestRequired.dummy2;
}
- (TestRequiredBuilder*) setDummy2:(SInt32) value {
  resultTestRequired.hasDummy2 = YES;
  resultTestRequired.dummy2 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy2 {
  resultTestRequired.hasDummy2 = NO;
  resultTestRequired.dummy2 = 0;
  return self;
}
- (BOOL) hasB {
  return resultTestRequired.hasB;
}
- (SInt32) b {
  return resultTestRequired.b;
}
- (TestRequiredBuilder*) setB:(SInt32) value {
  resultTestRequired.hasB = YES;
  resultTestRequired.b = value;
  return self;
}
- (TestRequiredBuilder*) clearB {
  resultTestRequired.hasB = NO;
  resultTestRequired.b = 0;
  return self;
}
- (BOOL) hasDummy4 {
  return resultTestRequired.hasDummy4;
}
- (SInt32) dummy4 {
  return resultTestRequired.dummy4;
}
- (TestRequiredBuilder*) setDummy4:(SInt32) value {
  resultTestRequired.hasDummy4 = YES;
  resultTestRequired.dummy4 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy4 {
  resultTestRequired.hasDummy4 = NO;
  resultTestRequired.dummy4 = 0;
  return self;
}
- (BOOL) hasDummy5 {
  return resultTestRequired.hasDummy5;
}
- (SInt32) dummy5 {
  return resultTestRequired.dummy5;
}
- (TestRequiredBuilder*) setDummy5:(SInt32) value {
  resultTestRequired.hasDummy5 = YES;
  resultTestRequired.dummy5 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy5 {
  resultTestRequired.hasDummy5 = NO;
  resultTestRequired.dummy5 = 0;
  return self;
}
- (BOOL) hasDummy6 {
  return resultTestRequired.hasDummy6;
}
- (SInt32) dummy6 {
  return resultTestRequired.dummy6;
}
- (TestRequiredBuilder*) setDummy6:(SInt32) value {
  resultTestRequired.hasDummy6 = YES;
  resultTestRequired.dummy6 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy6 {
  resultTestRequired.hasDummy6 = NO;
  resultTestRequired.dummy6 = 0;
  return self;
}
- (BOOL) hasDummy7 {
  return resultTestRequired.hasDummy7;
}
- (SInt32) dummy7 {
  return resultTestRequired.dummy7;
}
- (TestRequiredBuilder*) setDummy7:(SInt32) value {
  resultTestRequired.hasDummy7 = YES;
  resultTestRequired.dummy7 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy7 {
  resultTestRequired.hasDummy7 = NO;
  resultTestRequired.dummy7 = 0;
  return self;
}
- (BOOL) hasDummy8 {
  return resultTestRequired.hasDummy8;
}
- (SInt32) dummy8 {
  return resultTestRequired.dummy8;
}
- (TestRequiredBuilder*) setDummy8:(SInt32) value {
  resultTestRequired.hasDummy8 = YES;
  resultTestRequired.dummy8 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy8 {
  resultTestRequired.hasDummy8 = NO;
  resultTestRequired.dummy8 = 0;
  return self;
}
- (BOOL) hasDummy9 {
  return resultTestRequired.hasDummy9;
}
- (SInt32) dummy9 {
  return resultTestRequired.dummy9;
}
- (TestRequiredBuilder*) setDummy9:(SInt32) value {
  resultTestRequired.hasDummy9 = YES;
  resultTestRequired.dummy9 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy9 {
  resultTestRequired.hasDummy9 = NO;
  resultTestRequired.dummy9 = 0;
  return self;
}
- (BOOL) hasDummy10 {
  return resultTestRequired.hasDummy10;
}
- (SInt32) dummy10 {
  return resultTestRequired.dummy10;
}
- (TestRequiredBuilder*) setDummy10:(SInt32) value {
  resultTestRequired.hasDummy10 = YES;
  resultTestRequired.dummy10 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy10 {
  resultTestRequired.hasDummy10 = NO;
  resultTestRequired.dummy10 = 0;
  return self;
}
- (BOOL) hasDummy11 {
  return resultTestRequired.hasDummy11;
}
- (SInt32) dummy11 {
  return resultTestRequired.dummy11;
}
- (TestRequiredBuilder*) setDummy11:(SInt32) value {
  resultTestRequired.hasDummy11 = YES;
  resultTestRequired.dummy11 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy11 {
  resultTestRequired.hasDummy11 = NO;
  resultTestRequired.dummy11 = 0;
  return self;
}
- (BOOL) hasDummy12 {
  return resultTestRequired.hasDummy12;
}
- (SInt32) dummy12 {
  return resultTestRequired.dummy12;
}
- (TestRequiredBuilder*) setDummy12:(SInt32) value {
  resultTestRequired.hasDummy12 = YES;
  resultTestRequired.dummy12 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy12 {
  resultTestRequired.hasDummy12 = NO;
  resultTestRequired.dummy12 = 0;
  return self;
}
- (BOOL) hasDummy13 {
  return resultTestRequired.hasDummy13;
}
- (SInt32) dummy13 {
  return resultTestRequired.dummy13;
}
- (TestRequiredBuilder*) setDummy13:(SInt32) value {
  resultTestRequired.hasDummy13 = YES;
  resultTestRequired.dummy13 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy13 {
  resultTestRequired.hasDummy13 = NO;
  resultTestRequired.dummy13 = 0;
  return self;
}
- (BOOL) hasDummy14 {
  return resultTestRequired.hasDummy14;
}
- (SInt32) dummy14 {
  return resultTestRequired.dummy14;
}
- (TestRequiredBuilder*) setDummy14:(SInt32) value {
  resultTestRequired.hasDummy14 = YES;
  resultTestRequired.dummy14 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy14 {
  resultTestRequired.hasDummy14 = NO;
  resultTestRequired.dummy14 = 0;
  return self;
}
- (BOOL) hasDummy15 {
  return resultTestRequired.hasDummy15;
}
- (SInt32) dummy15 {
  return resultTestRequired.dummy15;
}
- (TestRequiredBuilder*) setDummy15:(SInt32) value {
  resultTestRequired.hasDummy15 = YES;
  resultTestRequired.dummy15 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy15 {
  resultTestRequired.hasDummy15 = NO;
  resultTestRequired.dummy15 = 0;
  return self;
}
- (BOOL) hasDummy16 {
  return resultTestRequired.hasDummy16;
}
- (SInt32) dummy16 {
  return resultTestRequired.dummy16;
}
- (TestRequiredBuilder*) setDummy16:(SInt32) value {
  resultTestRequired.hasDummy16 = YES;
  resultTestRequired.dummy16 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy16 {
  resultTestRequired.hasDummy16 = NO;
  resultTestRequired.dummy16 = 0;
  return self;
}
- (BOOL) hasDummy17 {
  return resultTestRequired.hasDummy17;
}
- (SInt32) dummy17 {
  return resultTestRequired.dummy17;
}
- (TestRequiredBuilder*) setDummy17:(SInt32) value {
  resultTestRequired.hasDummy17 = YES;
  resultTestRequired.dummy17 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy17 {
  resultTestRequired.hasDummy17 = NO;
  resultTestRequired.dummy17 = 0;
  return self;
}
- (BOOL) hasDummy18 {
  return resultTestRequired.hasDummy18;
}
- (SInt32) dummy18 {
  return resultTestRequired.dummy18;
}
- (TestRequiredBuilder*) setDummy18:(SInt32) value {
  resultTestRequired.hasDummy18 = YES;
  resultTestRequired.dummy18 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy18 {
  resultTestRequired.hasDummy18 = NO;
  resultTestRequired.dummy18 = 0;
  return self;
}
- (BOOL) hasDummy19 {
  return resultTestRequired.hasDummy19;
}
- (SInt32) dummy19 {
  return resultTestRequired.dummy19;
}
- (TestRequiredBuilder*) setDummy19:(SInt32) value {
  resultTestRequired.hasDummy19 = YES;
  resultTestRequired.dummy19 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy19 {
  resultTestRequired.hasDummy19 = NO;
  resultTestRequired.dummy19 = 0;
  return self;
}
- (BOOL) hasDummy20 {
  return resultTestRequired.hasDummy20;
}
- (SInt32) dummy20 {
  return resultTestRequired.dummy20;
}
- (TestRequiredBuilder*) setDummy20:(SInt32) value {
  resultTestRequired.hasDummy20 = YES;
  resultTestRequired.dummy20 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy20 {
  resultTestRequired.hasDummy20 = NO;
  resultTestRequired.dummy20 = 0;
  return self;
}
- (BOOL) hasDummy21 {
  return resultTestRequired.hasDummy21;
}
- (SInt32) dummy21 {
  return resultTestRequired.dummy21;
}
- (TestRequiredBuilder*) setDummy21:(SInt32) value {
  resultTestRequired.hasDummy21 = YES;
  resultTestRequired.dummy21 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy21 {
  resultTestRequired.hasDummy21 = NO;
  resultTestRequired.dummy21 = 0;
  return self;
}
- (BOOL) hasDummy22 {
  return resultTestRequired.hasDummy22;
}
- (SInt32) dummy22 {
  return resultTestRequired.dummy22;
}
- (TestRequiredBuilder*) setDummy22:(SInt32) value {
  resultTestRequired.hasDummy22 = YES;
  resultTestRequired.dummy22 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy22 {
  resultTestRequired.hasDummy22 = NO;
  resultTestRequired.dummy22 = 0;
  return self;
}
- (BOOL) hasDummy23 {
  return resultTestRequired.hasDummy23;
}
- (SInt32) dummy23 {
  return resultTestRequired.dummy23;
}
- (TestRequiredBuilder*) setDummy23:(SInt32) value {
  resultTestRequired.hasDummy23 = YES;
  resultTestRequired.dummy23 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy23 {
  resultTestRequired.hasDummy23 = NO;
  resultTestRequired.dummy23 = 0;
  return self;
}
- (BOOL) hasDummy24 {
  return resultTestRequired.hasDummy24;
}
- (SInt32) dummy24 {
  return resultTestRequired.dummy24;
}
- (TestRequiredBuilder*) setDummy24:(SInt32) value {
  resultTestRequired.hasDummy24 = YES;
  resultTestRequired.dummy24 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy24 {
  resultTestRequired.hasDummy24 = NO;
  resultTestRequired.dummy24 = 0;
  return self;
}
- (BOOL) hasDummy25 {
  return resultTestRequired.hasDummy25;
}
- (SInt32) dummy25 {
  return resultTestRequired.dummy25;
}
- (TestRequiredBuilder*) setDummy25:(SInt32) value {
  resultTestRequired.hasDummy25 = YES;
  resultTestRequired.dummy25 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy25 {
  resultTestRequired.hasDummy25 = NO;
  resultTestRequired.dummy25 = 0;
  return self;
}
- (BOOL) hasDummy26 {
  return resultTestRequired.hasDummy26;
}
- (SInt32) dummy26 {
  return resultTestRequired.dummy26;
}
- (TestRequiredBuilder*) setDummy26:(SInt32) value {
  resultTestRequired.hasDummy26 = YES;
  resultTestRequired.dummy26 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy26 {
  resultTestRequired.hasDummy26 = NO;
  resultTestRequired.dummy26 = 0;
  return self;
}
- (BOOL) hasDummy27 {
  return resultTestRequired.hasDummy27;
}
- (SInt32) dummy27 {
  return resultTestRequired.dummy27;
}
- (TestRequiredBuilder*) setDummy27:(SInt32) value {
  resultTestRequired.hasDummy27 = YES;
  resultTestRequired.dummy27 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy27 {
  resultTestRequired.hasDummy27 = NO;
  resultTestRequired.dummy27 = 0;
  return self;
}
- (BOOL) hasDummy28 {
  return resultTestRequired.hasDummy28;
}
- (SInt32) dummy28 {
  return resultTestRequired.dummy28;
}
- (TestRequiredBuilder*) setDummy28:(SInt32) value {
  resultTestRequired.hasDummy28 = YES;
  resultTestRequired.dummy28 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy28 {
  resultTestRequired.hasDummy28 = NO;
  resultTestRequired.dummy28 = 0;
  return self;
}
- (BOOL) hasDummy29 {
  return resultTestRequired.hasDummy29;
}
- (SInt32) dummy29 {
  return resultTestRequired.dummy29;
}
- (TestRequiredBuilder*) setDummy29:(SInt32) value {
  resultTestRequired.hasDummy29 = YES;
  resultTestRequired.dummy29 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy29 {
  resultTestRequired.hasDummy29 = NO;
  resultTestRequired.dummy29 = 0;
  return self;
}
- (BOOL) hasDummy30 {
  return resultTestRequired.hasDummy30;
}
- (SInt32) dummy30 {
  return resultTestRequired.dummy30;
}
- (TestRequiredBuilder*) setDummy30:(SInt32) value {
  resultTestRequired.hasDummy30 = YES;
  resultTestRequired.dummy30 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy30 {
  resultTestRequired.hasDummy30 = NO;
  resultTestRequired.dummy30 = 0;
  return self;
}
- (BOOL) hasDummy31 {
  return resultTestRequired.hasDummy31;
}
- (SInt32) dummy31 {
  return resultTestRequired.dummy31;
}
- (TestRequiredBuilder*) setDummy31:(SInt32) value {
  resultTestRequired.hasDummy31 = YES;
  resultTestRequired.dummy31 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy31 {
  resultTestRequired.hasDummy31 = NO;
  resultTestRequired.dummy31 = 0;
  return self;
}
- (BOOL) hasDummy32 {
  return resultTestRequired.hasDummy32;
}
- (SInt32) dummy32 {
  return resultTestRequired.dummy32;
}
- (TestRequiredBuilder*) setDummy32:(SInt32) value {
  resultTestRequired.hasDummy32 = YES;
  resultTestRequired.dummy32 = value;
  return self;
}
- (TestRequiredBuilder*) clearDummy32 {
  resultTestRequired.hasDummy32 = NO;
  resultTestRequired.dummy32 = 0;
  return self;
}
- (BOOL) hasC {
  return resultTestRequired.hasC;
}
- (SInt32) c {
  return resultTestRequired.c;
}
- (TestRequiredBuilder*) setC:(SInt32) value {
  resultTestRequired.hasC = YES;
  resultTestRequired.c = value;
  return self;
}
- (TestRequiredBuilder*) clearC {
  resultTestRequired.hasC = NO;
  resultTestRequired.c = 0;
  return self;
}
@end

@interface TestRequiredForeign ()
@property (strong) TestRequired* optionalMessage;
@property (strong) NSMutableArray * repeatedMessageArray;
@property SInt32 dummy;
@end

@implementation TestRequiredForeign

- (BOOL) hasOptionalMessage {
  return !!hasOptionalMessage_;
}
- (void) setHasOptionalMessage:(BOOL) _value_ {
  hasOptionalMessage_ = !!_value_;
}
@synthesize optionalMessage;
@synthesize repeatedMessageArray;
@dynamic repeatedMessage;
- (BOOL) hasDummy {
  return !!hasDummy_;
}
- (void) setHasDummy:(BOOL) _value_ {
  hasDummy_ = !!_value_;
}
@synthesize dummy;
- (instancetype) init {
  if ((self = [super init])) {
    self.optionalMessage = [TestRequired defaultInstance];
    self.dummy = 0;
  }
  return self;
}
static TestRequiredForeign* defaultTestRequiredForeignInstance = nil;
+ (void) initialize {
  if (self == [TestRequiredForeign class]) {
    defaultTestRequiredForeignInstance = [[TestRequiredForeign alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestRequiredForeignInstance;
}
- (instancetype) defaultInstance {
  return defaultTestRequiredForeignInstance;
}
- (NSArray *)repeatedMessage {
  return repeatedMessageArray;
}
- (TestRequired*)repeatedMessageAtIndex:(NSUInteger)index {
  return [repeatedMessageArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasOptionalMessage) {
    if (!self.optionalMessage.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitrepeatedMessage = YES;
   [self.repeatedMessage enumerateObjectsUsingBlock:^(TestRequired *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitrepeatedMessage = NO;
      *stop = YES;
    }
  }];
  if (!isInitrepeatedMessage) return isInitrepeatedMessage;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOptionalMessage) {
    [output writeMessage:1 value:self.optionalMessage];
  }
  [self.repeatedMessageArray enumerateObjectsUsingBlock:^(TestRequired *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasDummy) {
    [output writeInt32:3 value:self.dummy];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptionalMessage) {
    size_ += computeMessageSize(1, self.optionalMessage);
  }
  [self.repeatedMessageArray enumerateObjectsUsingBlock:^(TestRequired *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasDummy) {
    size_ += computeInt32Size(3, self.dummy);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestRequiredForeign*) parseFromData:(NSData*) data {
  return (TestRequiredForeign*)[[[TestRequiredForeign builder] mergeFromData:data] build];
}
+ (TestRequiredForeign*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequiredForeign*)[[[TestRequiredForeign builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestRequiredForeign*) parseFromInputStream:(NSInputStream*) input {
  return (TestRequiredForeign*)[[[TestRequiredForeign builder] mergeFromInputStream:input] build];
}
+ (TestRequiredForeign*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequiredForeign*)[[[TestRequiredForeign builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRequiredForeign*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestRequiredForeign*)[[[TestRequiredForeign builder] mergeFromCodedInputStream:input] build];
}
+ (TestRequiredForeign*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequiredForeign*)[[[TestRequiredForeign builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRequiredForeignBuilder*) builder {
  return [[TestRequiredForeignBuilder alloc] init];
}
+ (TestRequiredForeignBuilder*) builderWithPrototype:(TestRequiredForeign*) prototype {
  return [[TestRequiredForeign builder] mergeFrom:prototype];
}
- (TestRequiredForeignBuilder*) builder {
  return [TestRequiredForeign builder];
}
- (TestRequiredForeignBuilder*) toBuilder {
  return [TestRequiredForeign builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOptionalMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalMessage"];
    [self.optionalMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.repeatedMessageArray enumerateObjectsUsingBlock:^(TestRequired *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDummy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy", [NSNumber numberWithInteger:self.dummy]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOptionalMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalMessage"];
  }
  for (TestRequired* element in self.repeatedMessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedMessage"];
  }
  if (self.hasDummy) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dummy] forKey: @"dummy"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRequiredForeign class]]) {
    return NO;
  }
  TestRequiredForeign *otherMessage = other;
  return
      self.hasOptionalMessage == otherMessage.hasOptionalMessage &&
      (!self.hasOptionalMessage || [self.optionalMessage isEqual:otherMessage.optionalMessage]) &&
      [self.repeatedMessageArray isEqualToArray:otherMessage.repeatedMessageArray] &&
      self.hasDummy == otherMessage.hasDummy &&
      (!self.hasDummy || self.dummy == otherMessage.dummy) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOptionalMessage) {
    hashCode = hashCode * 31 + [self.optionalMessage hash];
  }
  [self.repeatedMessageArray enumerateObjectsUsingBlock:^(TestRequired *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDummy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dummy] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestRequiredForeignBuilder()
@property (strong) TestRequiredForeign* resultTestRequiredForeign;
@end

@implementation TestRequiredForeignBuilder
@synthesize resultTestRequiredForeign;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestRequiredForeign = [[TestRequiredForeign alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestRequiredForeign;
}
- (TestRequiredForeignBuilder*) clear {
  self.resultTestRequiredForeign = [[TestRequiredForeign alloc] init];
  return self;
}
- (TestRequiredForeignBuilder*) clone {
  return [TestRequiredForeign builderWithPrototype:resultTestRequiredForeign];
}
- (TestRequiredForeign*) defaultInstance {
  return [TestRequiredForeign defaultInstance];
}
- (TestRequiredForeign*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRequiredForeign*) buildPartial {
  TestRequiredForeign* returnMe = resultTestRequiredForeign;
  self.resultTestRequiredForeign = nil;
  return returnMe;
}
- (TestRequiredForeignBuilder*) mergeFrom:(TestRequiredForeign*) other {
  if (other == [TestRequiredForeign defaultInstance]) {
    return self;
  }
  if (other.hasOptionalMessage) {
    [self mergeOptionalMessage:other.optionalMessage];
  }
  if (other.repeatedMessageArray.count > 0) {
    if (resultTestRequiredForeign.repeatedMessageArray == nil) {
      resultTestRequiredForeign.repeatedMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedMessageArray];
    } else {
      [resultTestRequiredForeign.repeatedMessageArray addObjectsFromArray:other.repeatedMessageArray];
    }
  }
  if (other.hasDummy) {
    [self setDummy:other.dummy];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestRequiredForeignBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestRequiredForeignBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestRequiredBuilder* subBuilder = [TestRequired builder];
        if (self.hasOptionalMessage) {
          [subBuilder mergeFrom:self.optionalMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalMessage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TestRequiredBuilder* subBuilder = [TestRequired builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedMessage:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setDummy:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOptionalMessage {
  return resultTestRequiredForeign.hasOptionalMessage;
}
- (TestRequired*) optionalMessage {
  return resultTestRequiredForeign.optionalMessage;
}
- (TestRequiredForeignBuilder*) setOptionalMessage:(TestRequired*) value {
  resultTestRequiredForeign.hasOptionalMessage = YES;
  resultTestRequiredForeign.optionalMessage = value;
  return self;
}
- (TestRequiredForeignBuilder*) setOptionalMessageBuilder:(TestRequiredBuilder*) builderForValue {
  return [self setOptionalMessage:[builderForValue build]];
}
- (TestRequiredForeignBuilder*) mergeOptionalMessage:(TestRequired*) value {
  if (resultTestRequiredForeign.hasOptionalMessage &&
      resultTestRequiredForeign.optionalMessage != [TestRequired defaultInstance]) {
    resultTestRequiredForeign.optionalMessage =
      [[[TestRequired builderWithPrototype:resultTestRequiredForeign.optionalMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestRequiredForeign.optionalMessage = value;
  }
  resultTestRequiredForeign.hasOptionalMessage = YES;
  return self;
}
- (TestRequiredForeignBuilder*) clearOptionalMessage {
  resultTestRequiredForeign.hasOptionalMessage = NO;
  resultTestRequiredForeign.optionalMessage = [TestRequired defaultInstance];
  return self;
}
- (NSMutableArray *)repeatedMessage {
  return resultTestRequiredForeign.repeatedMessageArray;
}
- (TestRequired*)repeatedMessageAtIndex:(NSUInteger)index {
  return [resultTestRequiredForeign repeatedMessageAtIndex:index];
}
- (TestRequiredForeignBuilder *)addRepeatedMessage:(TestRequired*)value {
  if (resultTestRequiredForeign.repeatedMessageArray == nil) {
    resultTestRequiredForeign.repeatedMessageArray = [[NSMutableArray alloc]init];
  }
  [resultTestRequiredForeign.repeatedMessageArray addObject:value];
  return self;
}
- (TestRequiredForeignBuilder *)setRepeatedMessageArray:(NSArray *)array {
  resultTestRequiredForeign.repeatedMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestRequiredForeignBuilder *)clearRepeatedMessage {
  resultTestRequiredForeign.repeatedMessageArray = nil;
  return self;
}
- (BOOL) hasDummy {
  return resultTestRequiredForeign.hasDummy;
}
- (SInt32) dummy {
  return resultTestRequiredForeign.dummy;
}
- (TestRequiredForeignBuilder*) setDummy:(SInt32) value {
  resultTestRequiredForeign.hasDummy = YES;
  resultTestRequiredForeign.dummy = value;
  return self;
}
- (TestRequiredForeignBuilder*) clearDummy {
  resultTestRequiredForeign.hasDummy = NO;
  resultTestRequiredForeign.dummy = 0;
  return self;
}
@end

@interface TestForeignNested ()
@property (strong) TestAllTypesNestedMessage* foreignNested;
@end

@implementation TestForeignNested

- (BOOL) hasForeignNested {
  return !!hasForeignNested_;
}
- (void) setHasForeignNested:(BOOL) _value_ {
  hasForeignNested_ = !!_value_;
}
@synthesize foreignNested;
- (instancetype) init {
  if ((self = [super init])) {
    self.foreignNested = [TestAllTypesNestedMessage defaultInstance];
  }
  return self;
}
static TestForeignNested* defaultTestForeignNestedInstance = nil;
+ (void) initialize {
  if (self == [TestForeignNested class]) {
    defaultTestForeignNestedInstance = [[TestForeignNested alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestForeignNestedInstance;
}
- (instancetype) defaultInstance {
  return defaultTestForeignNestedInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasForeignNested) {
    [output writeMessage:1 value:self.foreignNested];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasForeignNested) {
    size_ += computeMessageSize(1, self.foreignNested);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestForeignNested*) parseFromData:(NSData*) data {
  return (TestForeignNested*)[[[TestForeignNested builder] mergeFromData:data] build];
}
+ (TestForeignNested*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestForeignNested*)[[[TestForeignNested builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestForeignNested*) parseFromInputStream:(NSInputStream*) input {
  return (TestForeignNested*)[[[TestForeignNested builder] mergeFromInputStream:input] build];
}
+ (TestForeignNested*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestForeignNested*)[[[TestForeignNested builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestForeignNested*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestForeignNested*)[[[TestForeignNested builder] mergeFromCodedInputStream:input] build];
}
+ (TestForeignNested*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestForeignNested*)[[[TestForeignNested builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestForeignNestedBuilder*) builder {
  return [[TestForeignNestedBuilder alloc] init];
}
+ (TestForeignNestedBuilder*) builderWithPrototype:(TestForeignNested*) prototype {
  return [[TestForeignNested builder] mergeFrom:prototype];
}
- (TestForeignNestedBuilder*) builder {
  return [TestForeignNested builder];
}
- (TestForeignNestedBuilder*) toBuilder {
  return [TestForeignNested builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasForeignNested) {
    [output appendFormat:@"%@%@ {\n", indent, @"foreignNested"];
    [self.foreignNested writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasForeignNested) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.foreignNested storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"foreignNested"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestForeignNested class]]) {
    return NO;
  }
  TestForeignNested *otherMessage = other;
  return
      self.hasForeignNested == otherMessage.hasForeignNested &&
      (!self.hasForeignNested || [self.foreignNested isEqual:otherMessage.foreignNested]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasForeignNested) {
    hashCode = hashCode * 31 + [self.foreignNested hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestForeignNestedBuilder()
@property (strong) TestForeignNested* resultTestForeignNested;
@end

@implementation TestForeignNestedBuilder
@synthesize resultTestForeignNested;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestForeignNested = [[TestForeignNested alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestForeignNested;
}
- (TestForeignNestedBuilder*) clear {
  self.resultTestForeignNested = [[TestForeignNested alloc] init];
  return self;
}
- (TestForeignNestedBuilder*) clone {
  return [TestForeignNested builderWithPrototype:resultTestForeignNested];
}
- (TestForeignNested*) defaultInstance {
  return [TestForeignNested defaultInstance];
}
- (TestForeignNested*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestForeignNested*) buildPartial {
  TestForeignNested* returnMe = resultTestForeignNested;
  self.resultTestForeignNested = nil;
  return returnMe;
}
- (TestForeignNestedBuilder*) mergeFrom:(TestForeignNested*) other {
  if (other == [TestForeignNested defaultInstance]) {
    return self;
  }
  if (other.hasForeignNested) {
    [self mergeForeignNested:other.foreignNested];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestForeignNestedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestForeignNestedBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypesNestedMessageBuilder* subBuilder = [TestAllTypesNestedMessage builder];
        if (self.hasForeignNested) {
          [subBuilder mergeFrom:self.foreignNested];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setForeignNested:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasForeignNested {
  return resultTestForeignNested.hasForeignNested;
}
- (TestAllTypesNestedMessage*) foreignNested {
  return resultTestForeignNested.foreignNested;
}
- (TestForeignNestedBuilder*) setForeignNested:(TestAllTypesNestedMessage*) value {
  resultTestForeignNested.hasForeignNested = YES;
  resultTestForeignNested.foreignNested = value;
  return self;
}
- (TestForeignNestedBuilder*) setForeignNestedBuilder:(TestAllTypesNestedMessageBuilder*) builderForValue {
  return [self setForeignNested:[builderForValue build]];
}
- (TestForeignNestedBuilder*) mergeForeignNested:(TestAllTypesNestedMessage*) value {
  if (resultTestForeignNested.hasForeignNested &&
      resultTestForeignNested.foreignNested != [TestAllTypesNestedMessage defaultInstance]) {
    resultTestForeignNested.foreignNested =
      [[[TestAllTypesNestedMessage builderWithPrototype:resultTestForeignNested.foreignNested] mergeFrom:value] buildPartial];
  } else {
    resultTestForeignNested.foreignNested = value;
  }
  resultTestForeignNested.hasForeignNested = YES;
  return self;
}
- (TestForeignNestedBuilder*) clearForeignNested {
  resultTestForeignNested.hasForeignNested = NO;
  resultTestForeignNested.foreignNested = [TestAllTypesNestedMessage defaultInstance];
  return self;
}
@end

@interface TestEmptyMessage ()
@end

@implementation TestEmptyMessage

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestEmptyMessage* defaultTestEmptyMessageInstance = nil;
+ (void) initialize {
  if (self == [TestEmptyMessage class]) {
    defaultTestEmptyMessageInstance = [[TestEmptyMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestEmptyMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultTestEmptyMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestEmptyMessage*) parseFromData:(NSData*) data {
  return (TestEmptyMessage*)[[[TestEmptyMessage builder] mergeFromData:data] build];
}
+ (TestEmptyMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessage*)[[[TestEmptyMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TestEmptyMessage*)[[[TestEmptyMessage builder] mergeFromInputStream:input] build];
}
+ (TestEmptyMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessage*)[[[TestEmptyMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestEmptyMessage*)[[[TestEmptyMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TestEmptyMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessage*)[[[TestEmptyMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessageBuilder*) builder {
  return [[TestEmptyMessageBuilder alloc] init];
}
+ (TestEmptyMessageBuilder*) builderWithPrototype:(TestEmptyMessage*) prototype {
  return [[TestEmptyMessage builder] mergeFrom:prototype];
}
- (TestEmptyMessageBuilder*) builder {
  return [TestEmptyMessage builder];
}
- (TestEmptyMessageBuilder*) toBuilder {
  return [TestEmptyMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestEmptyMessage class]]) {
    return NO;
  }
  TestEmptyMessage *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestEmptyMessageBuilder()
@property (strong) TestEmptyMessage* resultTestEmptyMessage;
@end

@implementation TestEmptyMessageBuilder
@synthesize resultTestEmptyMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestEmptyMessage = [[TestEmptyMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestEmptyMessage;
}
- (TestEmptyMessageBuilder*) clear {
  self.resultTestEmptyMessage = [[TestEmptyMessage alloc] init];
  return self;
}
- (TestEmptyMessageBuilder*) clone {
  return [TestEmptyMessage builderWithPrototype:resultTestEmptyMessage];
}
- (TestEmptyMessage*) defaultInstance {
  return [TestEmptyMessage defaultInstance];
}
- (TestEmptyMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestEmptyMessage*) buildPartial {
  TestEmptyMessage* returnMe = resultTestEmptyMessage;
  self.resultTestEmptyMessage = nil;
  return returnMe;
}
- (TestEmptyMessageBuilder*) mergeFrom:(TestEmptyMessage*) other {
  if (other == [TestEmptyMessage defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestEmptyMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestEmptyMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface TestEmptyMessageWithExtensions ()
@end

@implementation TestEmptyMessageWithExtensions

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestEmptyMessageWithExtensions* defaultTestEmptyMessageWithExtensionsInstance = nil;
+ (void) initialize {
  if (self == [TestEmptyMessageWithExtensions class]) {
    defaultTestEmptyMessageWithExtensionsInstance = [[TestEmptyMessageWithExtensions alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestEmptyMessageWithExtensionsInstance;
}
- (instancetype) defaultInstance {
  return defaultTestEmptyMessageWithExtensionsInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:1
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestEmptyMessageWithExtensions*) parseFromData:(NSData*) data {
  return (TestEmptyMessageWithExtensions*)[[[TestEmptyMessageWithExtensions builder] mergeFromData:data] build];
}
+ (TestEmptyMessageWithExtensions*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessageWithExtensions*)[[[TestEmptyMessageWithExtensions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessageWithExtensions*) parseFromInputStream:(NSInputStream*) input {
  return (TestEmptyMessageWithExtensions*)[[[TestEmptyMessageWithExtensions builder] mergeFromInputStream:input] build];
}
+ (TestEmptyMessageWithExtensions*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessageWithExtensions*)[[[TestEmptyMessageWithExtensions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessageWithExtensions*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestEmptyMessageWithExtensions*)[[[TestEmptyMessageWithExtensions builder] mergeFromCodedInputStream:input] build];
}
+ (TestEmptyMessageWithExtensions*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessageWithExtensions*)[[[TestEmptyMessageWithExtensions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessageWithExtensionsBuilder*) builder {
  return [[TestEmptyMessageWithExtensionsBuilder alloc] init];
}
+ (TestEmptyMessageWithExtensionsBuilder*) builderWithPrototype:(TestEmptyMessageWithExtensions*) prototype {
  return [[TestEmptyMessageWithExtensions builder] mergeFrom:prototype];
}
- (TestEmptyMessageWithExtensionsBuilder*) builder {
  return [TestEmptyMessageWithExtensions builder];
}
- (TestEmptyMessageWithExtensionsBuilder*) toBuilder {
  return [TestEmptyMessageWithExtensions builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestEmptyMessageWithExtensions class]]) {
    return NO;
  }
  TestEmptyMessageWithExtensions *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestEmptyMessageWithExtensionsBuilder()
@property (strong) TestEmptyMessageWithExtensions* resultTestEmptyMessageWithExtensions;
@end

@implementation TestEmptyMessageWithExtensionsBuilder
@synthesize resultTestEmptyMessageWithExtensions;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestEmptyMessageWithExtensions = [[TestEmptyMessageWithExtensions alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return resultTestEmptyMessageWithExtensions;
}
- (TestEmptyMessageWithExtensionsBuilder*) clear {
  self.resultTestEmptyMessageWithExtensions = [[TestEmptyMessageWithExtensions alloc] init];
  return self;
}
- (TestEmptyMessageWithExtensionsBuilder*) clone {
  return [TestEmptyMessageWithExtensions builderWithPrototype:resultTestEmptyMessageWithExtensions];
}
- (TestEmptyMessageWithExtensions*) defaultInstance {
  return [TestEmptyMessageWithExtensions defaultInstance];
}
- (TestEmptyMessageWithExtensions*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestEmptyMessageWithExtensions*) buildPartial {
  TestEmptyMessageWithExtensions* returnMe = resultTestEmptyMessageWithExtensions;
  self.resultTestEmptyMessageWithExtensions = nil;
  return returnMe;
}
- (TestEmptyMessageWithExtensionsBuilder*) mergeFrom:(TestEmptyMessageWithExtensions*) other {
  if (other == [TestEmptyMessageWithExtensions defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestEmptyMessageWithExtensionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestEmptyMessageWithExtensionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface TestMultipleExtensionRanges ()
@end

@implementation TestMultipleExtensionRanges

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestMultipleExtensionRanges* defaultTestMultipleExtensionRangesInstance = nil;
+ (void) initialize {
  if (self == [TestMultipleExtensionRanges class]) {
    defaultTestMultipleExtensionRangesInstance = [[TestMultipleExtensionRanges alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestMultipleExtensionRangesInstance;
}
- (instancetype) defaultInstance {
  return defaultTestMultipleExtensionRangesInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:42
                                        to:43];
  [self writeExtensionsToCodedOutputStream:output
                                      from:4143
                                        to:4244];
  [self writeExtensionsToCodedOutputStream:output
                                      from:65536
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestMultipleExtensionRanges*) parseFromData:(NSData*) data {
  return (TestMultipleExtensionRanges*)[[[TestMultipleExtensionRanges builder] mergeFromData:data] build];
}
+ (TestMultipleExtensionRanges*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestMultipleExtensionRanges*)[[[TestMultipleExtensionRanges builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestMultipleExtensionRanges*) parseFromInputStream:(NSInputStream*) input {
  return (TestMultipleExtensionRanges*)[[[TestMultipleExtensionRanges builder] mergeFromInputStream:input] build];
}
+ (TestMultipleExtensionRanges*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestMultipleExtensionRanges*)[[[TestMultipleExtensionRanges builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestMultipleExtensionRanges*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestMultipleExtensionRanges*)[[[TestMultipleExtensionRanges builder] mergeFromCodedInputStream:input] build];
}
+ (TestMultipleExtensionRanges*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestMultipleExtensionRanges*)[[[TestMultipleExtensionRanges builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestMultipleExtensionRangesBuilder*) builder {
  return [[TestMultipleExtensionRangesBuilder alloc] init];
}
+ (TestMultipleExtensionRangesBuilder*) builderWithPrototype:(TestMultipleExtensionRanges*) prototype {
  return [[TestMultipleExtensionRanges builder] mergeFrom:prototype];
}
- (TestMultipleExtensionRangesBuilder*) builder {
  return [TestMultipleExtensionRanges builder];
}
- (TestMultipleExtensionRangesBuilder*) toBuilder {
  return [TestMultipleExtensionRanges builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:42
                                              to:43
                                      withIndent:indent];
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:4143
                                              to:4244
                                      withIndent:indent];
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:65536
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestMultipleExtensionRanges class]]) {
    return NO;
  }
  TestMultipleExtensionRanges *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:42 to:43] &&

      [self isEqualExtensionsInOther:otherMessage from:4143 to:4244] &&

      [self isEqualExtensionsInOther:otherMessage from:65536 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:42 to:43];
  hashCode = hashCode * 31 + [self hashExtensionsFrom:4143 to:4244];
  hashCode = hashCode * 31 + [self hashExtensionsFrom:65536 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestMultipleExtensionRangesBuilder()
@property (strong) TestMultipleExtensionRanges* resultTestMultipleExtensionRanges;
@end

@implementation TestMultipleExtensionRangesBuilder
@synthesize resultTestMultipleExtensionRanges;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestMultipleExtensionRanges = [[TestMultipleExtensionRanges alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return resultTestMultipleExtensionRanges;
}
- (TestMultipleExtensionRangesBuilder*) clear {
  self.resultTestMultipleExtensionRanges = [[TestMultipleExtensionRanges alloc] init];
  return self;
}
- (TestMultipleExtensionRangesBuilder*) clone {
  return [TestMultipleExtensionRanges builderWithPrototype:resultTestMultipleExtensionRanges];
}
- (TestMultipleExtensionRanges*) defaultInstance {
  return [TestMultipleExtensionRanges defaultInstance];
}
- (TestMultipleExtensionRanges*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestMultipleExtensionRanges*) buildPartial {
  TestMultipleExtensionRanges* returnMe = resultTestMultipleExtensionRanges;
  self.resultTestMultipleExtensionRanges = nil;
  return returnMe;
}
- (TestMultipleExtensionRangesBuilder*) mergeFrom:(TestMultipleExtensionRanges*) other {
  if (other == [TestMultipleExtensionRanges defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestMultipleExtensionRangesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestMultipleExtensionRangesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface TestReallyLargeTagNumber ()
@property SInt32 a;
@property SInt32 bb;
@end

@implementation TestReallyLargeTagNumber

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (BOOL) hasBb {
  return !!hasBb_;
}
- (void) setHasBb:(BOOL) _value_ {
  hasBb_ = !!_value_;
}
@synthesize bb;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
    self.bb = 0;
  }
  return self;
}
static TestReallyLargeTagNumber* defaultTestReallyLargeTagNumberInstance = nil;
+ (void) initialize {
  if (self == [TestReallyLargeTagNumber class]) {
    defaultTestReallyLargeTagNumberInstance = [[TestReallyLargeTagNumber alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestReallyLargeTagNumberInstance;
}
- (instancetype) defaultInstance {
  return defaultTestReallyLargeTagNumberInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  if (self.hasBb) {
    [output writeInt32:268435455 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  if (self.hasBb) {
    size_ += computeInt32Size(268435455, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestReallyLargeTagNumber*) parseFromData:(NSData*) data {
  return (TestReallyLargeTagNumber*)[[[TestReallyLargeTagNumber builder] mergeFromData:data] build];
}
+ (TestReallyLargeTagNumber*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestReallyLargeTagNumber*)[[[TestReallyLargeTagNumber builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestReallyLargeTagNumber*) parseFromInputStream:(NSInputStream*) input {
  return (TestReallyLargeTagNumber*)[[[TestReallyLargeTagNumber builder] mergeFromInputStream:input] build];
}
+ (TestReallyLargeTagNumber*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestReallyLargeTagNumber*)[[[TestReallyLargeTagNumber builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestReallyLargeTagNumber*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestReallyLargeTagNumber*)[[[TestReallyLargeTagNumber builder] mergeFromCodedInputStream:input] build];
}
+ (TestReallyLargeTagNumber*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestReallyLargeTagNumber*)[[[TestReallyLargeTagNumber builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestReallyLargeTagNumberBuilder*) builder {
  return [[TestReallyLargeTagNumberBuilder alloc] init];
}
+ (TestReallyLargeTagNumberBuilder*) builderWithPrototype:(TestReallyLargeTagNumber*) prototype {
  return [[TestReallyLargeTagNumber builder] mergeFrom:prototype];
}
- (TestReallyLargeTagNumberBuilder*) builder {
  return [TestReallyLargeTagNumber builder];
}
- (TestReallyLargeTagNumberBuilder*) toBuilder {
  return [TestReallyLargeTagNumber builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  if (self.hasBb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bb", [NSNumber numberWithInteger:self.bb]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  if (self.hasBb) {
    [dictionary setObject: [NSNumber numberWithInteger:self.bb] forKey: @"bb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestReallyLargeTagNumber class]]) {
    return NO;
  }
  TestReallyLargeTagNumber *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      self.hasBb == otherMessage.hasBb &&
      (!self.hasBb || self.bb == otherMessage.bb) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  if (self.hasBb) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bb] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestReallyLargeTagNumberBuilder()
@property (strong) TestReallyLargeTagNumber* resultTestReallyLargeTagNumber;
@end

@implementation TestReallyLargeTagNumberBuilder
@synthesize resultTestReallyLargeTagNumber;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestReallyLargeTagNumber = [[TestReallyLargeTagNumber alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestReallyLargeTagNumber;
}
- (TestReallyLargeTagNumberBuilder*) clear {
  self.resultTestReallyLargeTagNumber = [[TestReallyLargeTagNumber alloc] init];
  return self;
}
- (TestReallyLargeTagNumberBuilder*) clone {
  return [TestReallyLargeTagNumber builderWithPrototype:resultTestReallyLargeTagNumber];
}
- (TestReallyLargeTagNumber*) defaultInstance {
  return [TestReallyLargeTagNumber defaultInstance];
}
- (TestReallyLargeTagNumber*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestReallyLargeTagNumber*) buildPartial {
  TestReallyLargeTagNumber* returnMe = resultTestReallyLargeTagNumber;
  self.resultTestReallyLargeTagNumber = nil;
  return returnMe;
}
- (TestReallyLargeTagNumberBuilder*) mergeFrom:(TestReallyLargeTagNumber*) other {
  if (other == [TestReallyLargeTagNumber defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasBb) {
    [self setBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestReallyLargeTagNumberBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestReallyLargeTagNumberBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
      case 2147483640: {
        [self setBb:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultTestReallyLargeTagNumber.hasA;
}
- (SInt32) a {
  return resultTestReallyLargeTagNumber.a;
}
- (TestReallyLargeTagNumberBuilder*) setA:(SInt32) value {
  resultTestReallyLargeTagNumber.hasA = YES;
  resultTestReallyLargeTagNumber.a = value;
  return self;
}
- (TestReallyLargeTagNumberBuilder*) clearA {
  resultTestReallyLargeTagNumber.hasA = NO;
  resultTestReallyLargeTagNumber.a = 0;
  return self;
}
- (BOOL) hasBb {
  return resultTestReallyLargeTagNumber.hasBb;
}
- (SInt32) bb {
  return resultTestReallyLargeTagNumber.bb;
}
- (TestReallyLargeTagNumberBuilder*) setBb:(SInt32) value {
  resultTestReallyLargeTagNumber.hasBb = YES;
  resultTestReallyLargeTagNumber.bb = value;
  return self;
}
- (TestReallyLargeTagNumberBuilder*) clearBb {
  resultTestReallyLargeTagNumber.hasBb = NO;
  resultTestReallyLargeTagNumber.bb = 0;
  return self;
}
@end

@interface TestRecursiveMessage ()
@property (strong) TestRecursiveMessage* a;
@property SInt32 i;
@end

@implementation TestRecursiveMessage

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (BOOL) hasI {
  return !!hasI_;
}
- (void) setHasI:(BOOL) _value_ {
  hasI_ = !!_value_;
}
@synthesize i;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = [TestRecursiveMessage defaultInstance];
    self.i = 0;
  }
  return self;
}
static TestRecursiveMessage* defaultTestRecursiveMessageInstance = nil;
+ (void) initialize {
  if (self == [TestRecursiveMessage class]) {
    defaultTestRecursiveMessageInstance = [[TestRecursiveMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestRecursiveMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultTestRecursiveMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeMessage:1 value:self.a];
  }
  if (self.hasI) {
    [output writeInt32:2 value:self.i];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeMessageSize(1, self.a);
  }
  if (self.hasI) {
    size_ += computeInt32Size(2, self.i);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestRecursiveMessage*) parseFromData:(NSData*) data {
  return (TestRecursiveMessage*)[[[TestRecursiveMessage builder] mergeFromData:data] build];
}
+ (TestRecursiveMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRecursiveMessage*)[[[TestRecursiveMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestRecursiveMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TestRecursiveMessage*)[[[TestRecursiveMessage builder] mergeFromInputStream:input] build];
}
+ (TestRecursiveMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRecursiveMessage*)[[[TestRecursiveMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRecursiveMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestRecursiveMessage*)[[[TestRecursiveMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TestRecursiveMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRecursiveMessage*)[[[TestRecursiveMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRecursiveMessageBuilder*) builder {
  return [[TestRecursiveMessageBuilder alloc] init];
}
+ (TestRecursiveMessageBuilder*) builderWithPrototype:(TestRecursiveMessage*) prototype {
  return [[TestRecursiveMessage builder] mergeFrom:prototype];
}
- (TestRecursiveMessageBuilder*) builder {
  return [TestRecursiveMessage builder];
}
- (TestRecursiveMessageBuilder*) toBuilder {
  return [TestRecursiveMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@ {\n", indent, @"a"];
    [self.a writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasI) {
    [output appendFormat:@"%@%@: %@\n", indent, @"i", [NSNumber numberWithInteger:self.i]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.a storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"a"];
  }
  if (self.hasI) {
    [dictionary setObject: [NSNumber numberWithInteger:self.i] forKey: @"i"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRecursiveMessage class]]) {
    return NO;
  }
  TestRecursiveMessage *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || [self.a isEqual:otherMessage.a]) &&
      self.hasI == otherMessage.hasI &&
      (!self.hasI || self.i == otherMessage.i) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [self.a hash];
  }
  if (self.hasI) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.i] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestRecursiveMessageBuilder()
@property (strong) TestRecursiveMessage* resultTestRecursiveMessage;
@end

@implementation TestRecursiveMessageBuilder
@synthesize resultTestRecursiveMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestRecursiveMessage = [[TestRecursiveMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestRecursiveMessage;
}
- (TestRecursiveMessageBuilder*) clear {
  self.resultTestRecursiveMessage = [[TestRecursiveMessage alloc] init];
  return self;
}
- (TestRecursiveMessageBuilder*) clone {
  return [TestRecursiveMessage builderWithPrototype:resultTestRecursiveMessage];
}
- (TestRecursiveMessage*) defaultInstance {
  return [TestRecursiveMessage defaultInstance];
}
- (TestRecursiveMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRecursiveMessage*) buildPartial {
  TestRecursiveMessage* returnMe = resultTestRecursiveMessage;
  self.resultTestRecursiveMessage = nil;
  return returnMe;
}
- (TestRecursiveMessageBuilder*) mergeFrom:(TestRecursiveMessage*) other {
  if (other == [TestRecursiveMessage defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self mergeA:other.a];
  }
  if (other.hasI) {
    [self setI:other.i];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestRecursiveMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestRecursiveMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestRecursiveMessageBuilder* subBuilder = [TestRecursiveMessage builder];
        if (self.hasA) {
          [subBuilder mergeFrom:self.a];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setA:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setI:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultTestRecursiveMessage.hasA;
}
- (TestRecursiveMessage*) a {
  return resultTestRecursiveMessage.a;
}
- (TestRecursiveMessageBuilder*) setA:(TestRecursiveMessage*) value {
  resultTestRecursiveMessage.hasA = YES;
  resultTestRecursiveMessage.a = value;
  return self;
}
- (TestRecursiveMessageBuilder*) setABuilder:(TestRecursiveMessageBuilder*) builderForValue {
  return [self setA:[builderForValue build]];
}
- (TestRecursiveMessageBuilder*) mergeA:(TestRecursiveMessage*) value {
  if (resultTestRecursiveMessage.hasA &&
      resultTestRecursiveMessage.a != [TestRecursiveMessage defaultInstance]) {
    resultTestRecursiveMessage.a =
      [[[TestRecursiveMessage builderWithPrototype:resultTestRecursiveMessage.a] mergeFrom:value] buildPartial];
  } else {
    resultTestRecursiveMessage.a = value;
  }
  resultTestRecursiveMessage.hasA = YES;
  return self;
}
- (TestRecursiveMessageBuilder*) clearA {
  resultTestRecursiveMessage.hasA = NO;
  resultTestRecursiveMessage.a = [TestRecursiveMessage defaultInstance];
  return self;
}
- (BOOL) hasI {
  return resultTestRecursiveMessage.hasI;
}
- (SInt32) i {
  return resultTestRecursiveMessage.i;
}
- (TestRecursiveMessageBuilder*) setI:(SInt32) value {
  resultTestRecursiveMessage.hasI = YES;
  resultTestRecursiveMessage.i = value;
  return self;
}
- (TestRecursiveMessageBuilder*) clearI {
  resultTestRecursiveMessage.hasI = NO;
  resultTestRecursiveMessage.i = 0;
  return self;
}
@end

@interface TestMutualRecursionA ()
@property (strong) TestMutualRecursionB* bb;
@end

@implementation TestMutualRecursionA

- (BOOL) hasBb {
  return !!hasBb_;
}
- (void) setHasBb:(BOOL) _value_ {
  hasBb_ = !!_value_;
}
@synthesize bb;
- (instancetype) init {
  if ((self = [super init])) {
    self.bb = [TestMutualRecursionB defaultInstance];
  }
  return self;
}
static TestMutualRecursionA* defaultTestMutualRecursionAInstance = nil;
+ (void) initialize {
  if (self == [TestMutualRecursionA class]) {
    defaultTestMutualRecursionAInstance = [[TestMutualRecursionA alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestMutualRecursionAInstance;
}
- (instancetype) defaultInstance {
  return defaultTestMutualRecursionAInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBb) {
    [output writeMessage:1 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBb) {
    size_ += computeMessageSize(1, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestMutualRecursionA*) parseFromData:(NSData*) data {
  return (TestMutualRecursionA*)[[[TestMutualRecursionA builder] mergeFromData:data] build];
}
+ (TestMutualRecursionA*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestMutualRecursionA*)[[[TestMutualRecursionA builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestMutualRecursionA*) parseFromInputStream:(NSInputStream*) input {
  return (TestMutualRecursionA*)[[[TestMutualRecursionA builder] mergeFromInputStream:input] build];
}
+ (TestMutualRecursionA*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestMutualRecursionA*)[[[TestMutualRecursionA builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestMutualRecursionA*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestMutualRecursionA*)[[[TestMutualRecursionA builder] mergeFromCodedInputStream:input] build];
}
+ (TestMutualRecursionA*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestMutualRecursionA*)[[[TestMutualRecursionA builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestMutualRecursionABuilder*) builder {
  return [[TestMutualRecursionABuilder alloc] init];
}
+ (TestMutualRecursionABuilder*) builderWithPrototype:(TestMutualRecursionA*) prototype {
  return [[TestMutualRecursionA builder] mergeFrom:prototype];
}
- (TestMutualRecursionABuilder*) builder {
  return [TestMutualRecursionA builder];
}
- (TestMutualRecursionABuilder*) toBuilder {
  return [TestMutualRecursionA builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBb) {
    [output appendFormat:@"%@%@ {\n", indent, @"bb"];
    [self.bb writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBb) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.bb storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"bb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestMutualRecursionA class]]) {
    return NO;
  }
  TestMutualRecursionA *otherMessage = other;
  return
      self.hasBb == otherMessage.hasBb &&
      (!self.hasBb || [self.bb isEqual:otherMessage.bb]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBb) {
    hashCode = hashCode * 31 + [self.bb hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestMutualRecursionABuilder()
@property (strong) TestMutualRecursionA* resultTestMutualRecursionA;
@end

@implementation TestMutualRecursionABuilder
@synthesize resultTestMutualRecursionA;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestMutualRecursionA = [[TestMutualRecursionA alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestMutualRecursionA;
}
- (TestMutualRecursionABuilder*) clear {
  self.resultTestMutualRecursionA = [[TestMutualRecursionA alloc] init];
  return self;
}
- (TestMutualRecursionABuilder*) clone {
  return [TestMutualRecursionA builderWithPrototype:resultTestMutualRecursionA];
}
- (TestMutualRecursionA*) defaultInstance {
  return [TestMutualRecursionA defaultInstance];
}
- (TestMutualRecursionA*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestMutualRecursionA*) buildPartial {
  TestMutualRecursionA* returnMe = resultTestMutualRecursionA;
  self.resultTestMutualRecursionA = nil;
  return returnMe;
}
- (TestMutualRecursionABuilder*) mergeFrom:(TestMutualRecursionA*) other {
  if (other == [TestMutualRecursionA defaultInstance]) {
    return self;
  }
  if (other.hasBb) {
    [self mergeBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestMutualRecursionABuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestMutualRecursionABuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestMutualRecursionBBuilder* subBuilder = [TestMutualRecursionB builder];
        if (self.hasBb) {
          [subBuilder mergeFrom:self.bb];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasBb {
  return resultTestMutualRecursionA.hasBb;
}
- (TestMutualRecursionB*) bb {
  return resultTestMutualRecursionA.bb;
}
- (TestMutualRecursionABuilder*) setBb:(TestMutualRecursionB*) value {
  resultTestMutualRecursionA.hasBb = YES;
  resultTestMutualRecursionA.bb = value;
  return self;
}
- (TestMutualRecursionABuilder*) setBbBuilder:(TestMutualRecursionBBuilder*) builderForValue {
  return [self setBb:[builderForValue build]];
}
- (TestMutualRecursionABuilder*) mergeBb:(TestMutualRecursionB*) value {
  if (resultTestMutualRecursionA.hasBb &&
      resultTestMutualRecursionA.bb != [TestMutualRecursionB defaultInstance]) {
    resultTestMutualRecursionA.bb =
      [[[TestMutualRecursionB builderWithPrototype:resultTestMutualRecursionA.bb] mergeFrom:value] buildPartial];
  } else {
    resultTestMutualRecursionA.bb = value;
  }
  resultTestMutualRecursionA.hasBb = YES;
  return self;
}
- (TestMutualRecursionABuilder*) clearBb {
  resultTestMutualRecursionA.hasBb = NO;
  resultTestMutualRecursionA.bb = [TestMutualRecursionB defaultInstance];
  return self;
}
@end

@interface TestMutualRecursionB ()
@property (strong) TestMutualRecursionA* a;
@property SInt32 optionalInt32;
@end

@implementation TestMutualRecursionB

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (BOOL) hasOptionalInt32 {
  return !!hasOptionalInt32_;
}
- (void) setHasOptionalInt32:(BOOL) _value_ {
  hasOptionalInt32_ = !!_value_;
}
@synthesize optionalInt32;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = [TestMutualRecursionA defaultInstance];
    self.optionalInt32 = 0;
  }
  return self;
}
static TestMutualRecursionB* defaultTestMutualRecursionBInstance = nil;
+ (void) initialize {
  if (self == [TestMutualRecursionB class]) {
    defaultTestMutualRecursionBInstance = [[TestMutualRecursionB alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestMutualRecursionBInstance;
}
- (instancetype) defaultInstance {
  return defaultTestMutualRecursionBInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeMessage:1 value:self.a];
  }
  if (self.hasOptionalInt32) {
    [output writeInt32:2 value:self.optionalInt32];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeMessageSize(1, self.a);
  }
  if (self.hasOptionalInt32) {
    size_ += computeInt32Size(2, self.optionalInt32);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestMutualRecursionB*) parseFromData:(NSData*) data {
  return (TestMutualRecursionB*)[[[TestMutualRecursionB builder] mergeFromData:data] build];
}
+ (TestMutualRecursionB*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestMutualRecursionB*)[[[TestMutualRecursionB builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestMutualRecursionB*) parseFromInputStream:(NSInputStream*) input {
  return (TestMutualRecursionB*)[[[TestMutualRecursionB builder] mergeFromInputStream:input] build];
}
+ (TestMutualRecursionB*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestMutualRecursionB*)[[[TestMutualRecursionB builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestMutualRecursionB*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestMutualRecursionB*)[[[TestMutualRecursionB builder] mergeFromCodedInputStream:input] build];
}
+ (TestMutualRecursionB*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestMutualRecursionB*)[[[TestMutualRecursionB builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestMutualRecursionBBuilder*) builder {
  return [[TestMutualRecursionBBuilder alloc] init];
}
+ (TestMutualRecursionBBuilder*) builderWithPrototype:(TestMutualRecursionB*) prototype {
  return [[TestMutualRecursionB builder] mergeFrom:prototype];
}
- (TestMutualRecursionBBuilder*) builder {
  return [TestMutualRecursionB builder];
}
- (TestMutualRecursionBBuilder*) toBuilder {
  return [TestMutualRecursionB builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@ {\n", indent, @"a"];
    [self.a writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt32", [NSNumber numberWithInteger:self.optionalInt32]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.a storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"a"];
  }
  if (self.hasOptionalInt32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalInt32] forKey: @"optionalInt32"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestMutualRecursionB class]]) {
    return NO;
  }
  TestMutualRecursionB *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || [self.a isEqual:otherMessage.a]) &&
      self.hasOptionalInt32 == otherMessage.hasOptionalInt32 &&
      (!self.hasOptionalInt32 || self.optionalInt32 == otherMessage.optionalInt32) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [self.a hash];
  }
  if (self.hasOptionalInt32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalInt32] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestMutualRecursionBBuilder()
@property (strong) TestMutualRecursionB* resultTestMutualRecursionB;
@end

@implementation TestMutualRecursionBBuilder
@synthesize resultTestMutualRecursionB;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestMutualRecursionB = [[TestMutualRecursionB alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestMutualRecursionB;
}
- (TestMutualRecursionBBuilder*) clear {
  self.resultTestMutualRecursionB = [[TestMutualRecursionB alloc] init];
  return self;
}
- (TestMutualRecursionBBuilder*) clone {
  return [TestMutualRecursionB builderWithPrototype:resultTestMutualRecursionB];
}
- (TestMutualRecursionB*) defaultInstance {
  return [TestMutualRecursionB defaultInstance];
}
- (TestMutualRecursionB*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestMutualRecursionB*) buildPartial {
  TestMutualRecursionB* returnMe = resultTestMutualRecursionB;
  self.resultTestMutualRecursionB = nil;
  return returnMe;
}
- (TestMutualRecursionBBuilder*) mergeFrom:(TestMutualRecursionB*) other {
  if (other == [TestMutualRecursionB defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self mergeA:other.a];
  }
  if (other.hasOptionalInt32) {
    [self setOptionalInt32:other.optionalInt32];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestMutualRecursionBBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestMutualRecursionBBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestMutualRecursionABuilder* subBuilder = [TestMutualRecursionA builder];
        if (self.hasA) {
          [subBuilder mergeFrom:self.a];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setA:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setOptionalInt32:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultTestMutualRecursionB.hasA;
}
- (TestMutualRecursionA*) a {
  return resultTestMutualRecursionB.a;
}
- (TestMutualRecursionBBuilder*) setA:(TestMutualRecursionA*) value {
  resultTestMutualRecursionB.hasA = YES;
  resultTestMutualRecursionB.a = value;
  return self;
}
- (TestMutualRecursionBBuilder*) setABuilder:(TestMutualRecursionABuilder*) builderForValue {
  return [self setA:[builderForValue build]];
}
- (TestMutualRecursionBBuilder*) mergeA:(TestMutualRecursionA*) value {
  if (resultTestMutualRecursionB.hasA &&
      resultTestMutualRecursionB.a != [TestMutualRecursionA defaultInstance]) {
    resultTestMutualRecursionB.a =
      [[[TestMutualRecursionA builderWithPrototype:resultTestMutualRecursionB.a] mergeFrom:value] buildPartial];
  } else {
    resultTestMutualRecursionB.a = value;
  }
  resultTestMutualRecursionB.hasA = YES;
  return self;
}
- (TestMutualRecursionBBuilder*) clearA {
  resultTestMutualRecursionB.hasA = NO;
  resultTestMutualRecursionB.a = [TestMutualRecursionA defaultInstance];
  return self;
}
- (BOOL) hasOptionalInt32 {
  return resultTestMutualRecursionB.hasOptionalInt32;
}
- (SInt32) optionalInt32 {
  return resultTestMutualRecursionB.optionalInt32;
}
- (TestMutualRecursionBBuilder*) setOptionalInt32:(SInt32) value {
  resultTestMutualRecursionB.hasOptionalInt32 = YES;
  resultTestMutualRecursionB.optionalInt32 = value;
  return self;
}
- (TestMutualRecursionBBuilder*) clearOptionalInt32 {
  resultTestMutualRecursionB.hasOptionalInt32 = NO;
  resultTestMutualRecursionB.optionalInt32 = 0;
  return self;
}
@end

@interface TestDupFieldNumber ()
@property SInt32 a;
@property (strong) TestDupFieldNumberFoo* foo;
@property (strong) TestDupFieldNumberBar* bar;
@end

@implementation TestDupFieldNumber

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (BOOL) hasFoo {
  return !!hasFoo_;
}
- (void) setHasFoo:(BOOL) _value_ {
  hasFoo_ = !!_value_;
}
@synthesize foo;
- (BOOL) hasBar {
  return !!hasBar_;
}
- (void) setHasBar:(BOOL) _value_ {
  hasBar_ = !!_value_;
}
@synthesize bar;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
    self.foo = [TestDupFieldNumberFoo defaultInstance];
    self.bar = [TestDupFieldNumberBar defaultInstance];
  }
  return self;
}
static TestDupFieldNumber* defaultTestDupFieldNumberInstance = nil;
+ (void) initialize {
  if (self == [TestDupFieldNumber class]) {
    defaultTestDupFieldNumberInstance = [[TestDupFieldNumber alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestDupFieldNumberInstance;
}
- (instancetype) defaultInstance {
  return defaultTestDupFieldNumberInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  if (self.hasFoo) {
    [output writeGroup:2 value:self.foo];
  }
  if (self.hasBar) {
    [output writeGroup:3 value:self.bar];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  if (self.hasFoo) {
    size_ += computeGroupSize(2, self.foo);
  }
  if (self.hasBar) {
    size_ += computeGroupSize(3, self.bar);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestDupFieldNumber*) parseFromData:(NSData*) data {
  return (TestDupFieldNumber*)[[[TestDupFieldNumber builder] mergeFromData:data] build];
}
+ (TestDupFieldNumber*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDupFieldNumber*)[[[TestDupFieldNumber builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestDupFieldNumber*) parseFromInputStream:(NSInputStream*) input {
  return (TestDupFieldNumber*)[[[TestDupFieldNumber builder] mergeFromInputStream:input] build];
}
+ (TestDupFieldNumber*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDupFieldNumber*)[[[TestDupFieldNumber builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDupFieldNumber*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestDupFieldNumber*)[[[TestDupFieldNumber builder] mergeFromCodedInputStream:input] build];
}
+ (TestDupFieldNumber*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDupFieldNumber*)[[[TestDupFieldNumber builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDupFieldNumberBuilder*) builder {
  return [[TestDupFieldNumberBuilder alloc] init];
}
+ (TestDupFieldNumberBuilder*) builderWithPrototype:(TestDupFieldNumber*) prototype {
  return [[TestDupFieldNumber builder] mergeFrom:prototype];
}
- (TestDupFieldNumberBuilder*) builder {
  return [TestDupFieldNumber builder];
}
- (TestDupFieldNumberBuilder*) toBuilder {
  return [TestDupFieldNumber builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  if (self.hasFoo) {
    [output appendFormat:@"%@%@ {\n", indent, @"foo"];
    [self.foo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBar) {
    [output appendFormat:@"%@%@ {\n", indent, @"bar"];
    [self.bar writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  if (self.hasFoo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.foo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"foo"];
  }
  if (self.hasBar) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.bar storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"bar"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDupFieldNumber class]]) {
    return NO;
  }
  TestDupFieldNumber *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      self.hasFoo == otherMessage.hasFoo &&
      (!self.hasFoo || [self.foo isEqual:otherMessage.foo]) &&
      self.hasBar == otherMessage.hasBar &&
      (!self.hasBar || [self.bar isEqual:otherMessage.bar]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  if (self.hasFoo) {
    hashCode = hashCode * 31 + [self.foo hash];
  }
  if (self.hasBar) {
    hashCode = hashCode * 31 + [self.bar hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestDupFieldNumberFoo ()
@property SInt32 a;
@end

@implementation TestDupFieldNumberFoo

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static TestDupFieldNumberFoo* defaultTestDupFieldNumberFooInstance = nil;
+ (void) initialize {
  if (self == [TestDupFieldNumberFoo class]) {
    defaultTestDupFieldNumberFooInstance = [[TestDupFieldNumberFoo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestDupFieldNumberFooInstance;
}
- (instancetype) defaultInstance {
  return defaultTestDupFieldNumberFooInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestDupFieldNumberFoo*) parseFromData:(NSData*) data {
  return (TestDupFieldNumberFoo*)[[[TestDupFieldNumberFoo builder] mergeFromData:data] build];
}
+ (TestDupFieldNumberFoo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDupFieldNumberFoo*)[[[TestDupFieldNumberFoo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestDupFieldNumberFoo*) parseFromInputStream:(NSInputStream*) input {
  return (TestDupFieldNumberFoo*)[[[TestDupFieldNumberFoo builder] mergeFromInputStream:input] build];
}
+ (TestDupFieldNumberFoo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDupFieldNumberFoo*)[[[TestDupFieldNumberFoo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDupFieldNumberFoo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestDupFieldNumberFoo*)[[[TestDupFieldNumberFoo builder] mergeFromCodedInputStream:input] build];
}
+ (TestDupFieldNumberFoo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDupFieldNumberFoo*)[[[TestDupFieldNumberFoo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDupFieldNumberFooBuilder*) builder {
  return [[TestDupFieldNumberFooBuilder alloc] init];
}
+ (TestDupFieldNumberFooBuilder*) builderWithPrototype:(TestDupFieldNumberFoo*) prototype {
  return [[TestDupFieldNumberFoo builder] mergeFrom:prototype];
}
- (TestDupFieldNumberFooBuilder*) builder {
  return [TestDupFieldNumberFoo builder];
}
- (TestDupFieldNumberFooBuilder*) toBuilder {
  return [TestDupFieldNumberFoo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDupFieldNumberFoo class]]) {
    return NO;
  }
  TestDupFieldNumberFoo *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestDupFieldNumberFooBuilder()
@property (strong) TestDupFieldNumberFoo* resultFoo;
@end

@implementation TestDupFieldNumberFooBuilder
@synthesize resultFoo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFoo = [[TestDupFieldNumberFoo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFoo;
}
- (TestDupFieldNumberFooBuilder*) clear {
  self.resultFoo = [[TestDupFieldNumberFoo alloc] init];
  return self;
}
- (TestDupFieldNumberFooBuilder*) clone {
  return [TestDupFieldNumberFoo builderWithPrototype:resultFoo];
}
- (TestDupFieldNumberFoo*) defaultInstance {
  return [TestDupFieldNumberFoo defaultInstance];
}
- (TestDupFieldNumberFoo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDupFieldNumberFoo*) buildPartial {
  TestDupFieldNumberFoo* returnMe = resultFoo;
  self.resultFoo = nil;
  return returnMe;
}
- (TestDupFieldNumberFooBuilder*) mergeFrom:(TestDupFieldNumberFoo*) other {
  if (other == [TestDupFieldNumberFoo defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestDupFieldNumberFooBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestDupFieldNumberFooBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultFoo.hasA;
}
- (SInt32) a {
  return resultFoo.a;
}
- (TestDupFieldNumberFooBuilder*) setA:(SInt32) value {
  resultFoo.hasA = YES;
  resultFoo.a = value;
  return self;
}
- (TestDupFieldNumberFooBuilder*) clearA {
  resultFoo.hasA = NO;
  resultFoo.a = 0;
  return self;
}
@end

@interface TestDupFieldNumberBar ()
@property SInt32 a;
@end

@implementation TestDupFieldNumberBar

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static TestDupFieldNumberBar* defaultTestDupFieldNumberBarInstance = nil;
+ (void) initialize {
  if (self == [TestDupFieldNumberBar class]) {
    defaultTestDupFieldNumberBarInstance = [[TestDupFieldNumberBar alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestDupFieldNumberBarInstance;
}
- (instancetype) defaultInstance {
  return defaultTestDupFieldNumberBarInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestDupFieldNumberBar*) parseFromData:(NSData*) data {
  return (TestDupFieldNumberBar*)[[[TestDupFieldNumberBar builder] mergeFromData:data] build];
}
+ (TestDupFieldNumberBar*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDupFieldNumberBar*)[[[TestDupFieldNumberBar builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestDupFieldNumberBar*) parseFromInputStream:(NSInputStream*) input {
  return (TestDupFieldNumberBar*)[[[TestDupFieldNumberBar builder] mergeFromInputStream:input] build];
}
+ (TestDupFieldNumberBar*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDupFieldNumberBar*)[[[TestDupFieldNumberBar builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDupFieldNumberBar*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestDupFieldNumberBar*)[[[TestDupFieldNumberBar builder] mergeFromCodedInputStream:input] build];
}
+ (TestDupFieldNumberBar*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDupFieldNumberBar*)[[[TestDupFieldNumberBar builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDupFieldNumberBarBuilder*) builder {
  return [[TestDupFieldNumberBarBuilder alloc] init];
}
+ (TestDupFieldNumberBarBuilder*) builderWithPrototype:(TestDupFieldNumberBar*) prototype {
  return [[TestDupFieldNumberBar builder] mergeFrom:prototype];
}
- (TestDupFieldNumberBarBuilder*) builder {
  return [TestDupFieldNumberBar builder];
}
- (TestDupFieldNumberBarBuilder*) toBuilder {
  return [TestDupFieldNumberBar builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDupFieldNumberBar class]]) {
    return NO;
  }
  TestDupFieldNumberBar *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestDupFieldNumberBarBuilder()
@property (strong) TestDupFieldNumberBar* resultBar;
@end

@implementation TestDupFieldNumberBarBuilder
@synthesize resultBar;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBar = [[TestDupFieldNumberBar alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBar;
}
- (TestDupFieldNumberBarBuilder*) clear {
  self.resultBar = [[TestDupFieldNumberBar alloc] init];
  return self;
}
- (TestDupFieldNumberBarBuilder*) clone {
  return [TestDupFieldNumberBar builderWithPrototype:resultBar];
}
- (TestDupFieldNumberBar*) defaultInstance {
  return [TestDupFieldNumberBar defaultInstance];
}
- (TestDupFieldNumberBar*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDupFieldNumberBar*) buildPartial {
  TestDupFieldNumberBar* returnMe = resultBar;
  self.resultBar = nil;
  return returnMe;
}
- (TestDupFieldNumberBarBuilder*) mergeFrom:(TestDupFieldNumberBar*) other {
  if (other == [TestDupFieldNumberBar defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestDupFieldNumberBarBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestDupFieldNumberBarBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultBar.hasA;
}
- (SInt32) a {
  return resultBar.a;
}
- (TestDupFieldNumberBarBuilder*) setA:(SInt32) value {
  resultBar.hasA = YES;
  resultBar.a = value;
  return self;
}
- (TestDupFieldNumberBarBuilder*) clearA {
  resultBar.hasA = NO;
  resultBar.a = 0;
  return self;
}
@end

@interface TestDupFieldNumberBuilder()
@property (strong) TestDupFieldNumber* resultTestDupFieldNumber;
@end

@implementation TestDupFieldNumberBuilder
@synthesize resultTestDupFieldNumber;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestDupFieldNumber = [[TestDupFieldNumber alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestDupFieldNumber;
}
- (TestDupFieldNumberBuilder*) clear {
  self.resultTestDupFieldNumber = [[TestDupFieldNumber alloc] init];
  return self;
}
- (TestDupFieldNumberBuilder*) clone {
  return [TestDupFieldNumber builderWithPrototype:resultTestDupFieldNumber];
}
- (TestDupFieldNumber*) defaultInstance {
  return [TestDupFieldNumber defaultInstance];
}
- (TestDupFieldNumber*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDupFieldNumber*) buildPartial {
  TestDupFieldNumber* returnMe = resultTestDupFieldNumber;
  self.resultTestDupFieldNumber = nil;
  return returnMe;
}
- (TestDupFieldNumberBuilder*) mergeFrom:(TestDupFieldNumber*) other {
  if (other == [TestDupFieldNumber defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasFoo) {
    [self mergeFoo:other.foo];
  }
  if (other.hasBar) {
    [self mergeBar:other.bar];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestDupFieldNumberBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestDupFieldNumberBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
      case 19: {
        TestDupFieldNumberFooBuilder* subBuilder = [TestDupFieldNumberFoo builder];
        if (self.hasFoo) {
          [subBuilder mergeFrom:self.foo];
        }
        [input readGroup:2 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setFoo:[subBuilder buildPartial]];
        break;
      }
      case 27: {
        TestDupFieldNumberBarBuilder* subBuilder = [TestDupFieldNumberBar builder];
        if (self.hasBar) {
          [subBuilder mergeFrom:self.bar];
        }
        [input readGroup:3 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setBar:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultTestDupFieldNumber.hasA;
}
- (SInt32) a {
  return resultTestDupFieldNumber.a;
}
- (TestDupFieldNumberBuilder*) setA:(SInt32) value {
  resultTestDupFieldNumber.hasA = YES;
  resultTestDupFieldNumber.a = value;
  return self;
}
- (TestDupFieldNumberBuilder*) clearA {
  resultTestDupFieldNumber.hasA = NO;
  resultTestDupFieldNumber.a = 0;
  return self;
}
- (BOOL) hasFoo {
  return resultTestDupFieldNumber.hasFoo;
}
- (TestDupFieldNumberFoo*) foo {
  return resultTestDupFieldNumber.foo;
}
- (TestDupFieldNumberBuilder*) setFoo:(TestDupFieldNumberFoo*) value {
  resultTestDupFieldNumber.hasFoo = YES;
  resultTestDupFieldNumber.foo = value;
  return self;
}
- (TestDupFieldNumberBuilder*) setFooBuilder:(TestDupFieldNumberFooBuilder*) builderForValue {
  return [self setFoo:[builderForValue build]];
}
- (TestDupFieldNumberBuilder*) mergeFoo:(TestDupFieldNumberFoo*) value {
  if (resultTestDupFieldNumber.hasFoo &&
      resultTestDupFieldNumber.foo != [TestDupFieldNumberFoo defaultInstance]) {
    resultTestDupFieldNumber.foo =
      [[[TestDupFieldNumberFoo builderWithPrototype:resultTestDupFieldNumber.foo] mergeFrom:value] buildPartial];
  } else {
    resultTestDupFieldNumber.foo = value;
  }
  resultTestDupFieldNumber.hasFoo = YES;
  return self;
}
- (TestDupFieldNumberBuilder*) clearFoo {
  resultTestDupFieldNumber.hasFoo = NO;
  resultTestDupFieldNumber.foo = [TestDupFieldNumberFoo defaultInstance];
  return self;
}
- (BOOL) hasBar {
  return resultTestDupFieldNumber.hasBar;
}
- (TestDupFieldNumberBar*) bar {
  return resultTestDupFieldNumber.bar;
}
- (TestDupFieldNumberBuilder*) setBar:(TestDupFieldNumberBar*) value {
  resultTestDupFieldNumber.hasBar = YES;
  resultTestDupFieldNumber.bar = value;
  return self;
}
- (TestDupFieldNumberBuilder*) setBarBuilder:(TestDupFieldNumberBarBuilder*) builderForValue {
  return [self setBar:[builderForValue build]];
}
- (TestDupFieldNumberBuilder*) mergeBar:(TestDupFieldNumberBar*) value {
  if (resultTestDupFieldNumber.hasBar &&
      resultTestDupFieldNumber.bar != [TestDupFieldNumberBar defaultInstance]) {
    resultTestDupFieldNumber.bar =
      [[[TestDupFieldNumberBar builderWithPrototype:resultTestDupFieldNumber.bar] mergeFrom:value] buildPartial];
  } else {
    resultTestDupFieldNumber.bar = value;
  }
  resultTestDupFieldNumber.hasBar = YES;
  return self;
}
- (TestDupFieldNumberBuilder*) clearBar {
  resultTestDupFieldNumber.hasBar = NO;
  resultTestDupFieldNumber.bar = [TestDupFieldNumberBar defaultInstance];
  return self;
}
@end

@interface TestEagerMessage ()
@property (strong) TestAllTypes* subMessage;
@end

@implementation TestEagerMessage

- (BOOL) hasSubMessage {
  return !!hasSubMessage_;
}
- (void) setHasSubMessage:(BOOL) _value_ {
  hasSubMessage_ = !!_value_;
}
@synthesize subMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.subMessage = [TestAllTypes defaultInstance];
  }
  return self;
}
static TestEagerMessage* defaultTestEagerMessageInstance = nil;
+ (void) initialize {
  if (self == [TestEagerMessage class]) {
    defaultTestEagerMessageInstance = [[TestEagerMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestEagerMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultTestEagerMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSubMessage) {
    [output writeMessage:1 value:self.subMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSubMessage) {
    size_ += computeMessageSize(1, self.subMessage);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestEagerMessage*) parseFromData:(NSData*) data {
  return (TestEagerMessage*)[[[TestEagerMessage builder] mergeFromData:data] build];
}
+ (TestEagerMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEagerMessage*)[[[TestEagerMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestEagerMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TestEagerMessage*)[[[TestEagerMessage builder] mergeFromInputStream:input] build];
}
+ (TestEagerMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEagerMessage*)[[[TestEagerMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestEagerMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestEagerMessage*)[[[TestEagerMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TestEagerMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEagerMessage*)[[[TestEagerMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestEagerMessageBuilder*) builder {
  return [[TestEagerMessageBuilder alloc] init];
}
+ (TestEagerMessageBuilder*) builderWithPrototype:(TestEagerMessage*) prototype {
  return [[TestEagerMessage builder] mergeFrom:prototype];
}
- (TestEagerMessageBuilder*) builder {
  return [TestEagerMessage builder];
}
- (TestEagerMessageBuilder*) toBuilder {
  return [TestEagerMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSubMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"subMessage"];
    [self.subMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSubMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.subMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"subMessage"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestEagerMessage class]]) {
    return NO;
  }
  TestEagerMessage *otherMessage = other;
  return
      self.hasSubMessage == otherMessage.hasSubMessage &&
      (!self.hasSubMessage || [self.subMessage isEqual:otherMessage.subMessage]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSubMessage) {
    hashCode = hashCode * 31 + [self.subMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestEagerMessageBuilder()
@property (strong) TestEagerMessage* resultTestEagerMessage;
@end

@implementation TestEagerMessageBuilder
@synthesize resultTestEagerMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestEagerMessage = [[TestEagerMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestEagerMessage;
}
- (TestEagerMessageBuilder*) clear {
  self.resultTestEagerMessage = [[TestEagerMessage alloc] init];
  return self;
}
- (TestEagerMessageBuilder*) clone {
  return [TestEagerMessage builderWithPrototype:resultTestEagerMessage];
}
- (TestEagerMessage*) defaultInstance {
  return [TestEagerMessage defaultInstance];
}
- (TestEagerMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestEagerMessage*) buildPartial {
  TestEagerMessage* returnMe = resultTestEagerMessage;
  self.resultTestEagerMessage = nil;
  return returnMe;
}
- (TestEagerMessageBuilder*) mergeFrom:(TestEagerMessage*) other {
  if (other == [TestEagerMessage defaultInstance]) {
    return self;
  }
  if (other.hasSubMessage) {
    [self mergeSubMessage:other.subMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestEagerMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestEagerMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        if (self.hasSubMessage) {
          [subBuilder mergeFrom:self.subMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSubMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSubMessage {
  return resultTestEagerMessage.hasSubMessage;
}
- (TestAllTypes*) subMessage {
  return resultTestEagerMessage.subMessage;
}
- (TestEagerMessageBuilder*) setSubMessage:(TestAllTypes*) value {
  resultTestEagerMessage.hasSubMessage = YES;
  resultTestEagerMessage.subMessage = value;
  return self;
}
- (TestEagerMessageBuilder*) setSubMessageBuilder:(TestAllTypesBuilder*) builderForValue {
  return [self setSubMessage:[builderForValue build]];
}
- (TestEagerMessageBuilder*) mergeSubMessage:(TestAllTypes*) value {
  if (resultTestEagerMessage.hasSubMessage &&
      resultTestEagerMessage.subMessage != [TestAllTypes defaultInstance]) {
    resultTestEagerMessage.subMessage =
      [[[TestAllTypes builderWithPrototype:resultTestEagerMessage.subMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestEagerMessage.subMessage = value;
  }
  resultTestEagerMessage.hasSubMessage = YES;
  return self;
}
- (TestEagerMessageBuilder*) clearSubMessage {
  resultTestEagerMessage.hasSubMessage = NO;
  resultTestEagerMessage.subMessage = [TestAllTypes defaultInstance];
  return self;
}
@end

@interface TestLazyMessage ()
@property (strong) TestAllTypes* subMessage;
@end

@implementation TestLazyMessage

- (BOOL) hasSubMessage {
  return !!hasSubMessage_;
}
- (void) setHasSubMessage:(BOOL) _value_ {
  hasSubMessage_ = !!_value_;
}
@synthesize subMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.subMessage = [TestAllTypes defaultInstance];
  }
  return self;
}
static TestLazyMessage* defaultTestLazyMessageInstance = nil;
+ (void) initialize {
  if (self == [TestLazyMessage class]) {
    defaultTestLazyMessageInstance = [[TestLazyMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestLazyMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultTestLazyMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSubMessage) {
    [output writeMessage:1 value:self.subMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSubMessage) {
    size_ += computeMessageSize(1, self.subMessage);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestLazyMessage*) parseFromData:(NSData*) data {
  return (TestLazyMessage*)[[[TestLazyMessage builder] mergeFromData:data] build];
}
+ (TestLazyMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestLazyMessage*)[[[TestLazyMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestLazyMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TestLazyMessage*)[[[TestLazyMessage builder] mergeFromInputStream:input] build];
}
+ (TestLazyMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestLazyMessage*)[[[TestLazyMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestLazyMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestLazyMessage*)[[[TestLazyMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TestLazyMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestLazyMessage*)[[[TestLazyMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestLazyMessageBuilder*) builder {
  return [[TestLazyMessageBuilder alloc] init];
}
+ (TestLazyMessageBuilder*) builderWithPrototype:(TestLazyMessage*) prototype {
  return [[TestLazyMessage builder] mergeFrom:prototype];
}
- (TestLazyMessageBuilder*) builder {
  return [TestLazyMessage builder];
}
- (TestLazyMessageBuilder*) toBuilder {
  return [TestLazyMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSubMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"subMessage"];
    [self.subMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSubMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.subMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"subMessage"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestLazyMessage class]]) {
    return NO;
  }
  TestLazyMessage *otherMessage = other;
  return
      self.hasSubMessage == otherMessage.hasSubMessage &&
      (!self.hasSubMessage || [self.subMessage isEqual:otherMessage.subMessage]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSubMessage) {
    hashCode = hashCode * 31 + [self.subMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestLazyMessageBuilder()
@property (strong) TestLazyMessage* resultTestLazyMessage;
@end

@implementation TestLazyMessageBuilder
@synthesize resultTestLazyMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestLazyMessage = [[TestLazyMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestLazyMessage;
}
- (TestLazyMessageBuilder*) clear {
  self.resultTestLazyMessage = [[TestLazyMessage alloc] init];
  return self;
}
- (TestLazyMessageBuilder*) clone {
  return [TestLazyMessage builderWithPrototype:resultTestLazyMessage];
}
- (TestLazyMessage*) defaultInstance {
  return [TestLazyMessage defaultInstance];
}
- (TestLazyMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestLazyMessage*) buildPartial {
  TestLazyMessage* returnMe = resultTestLazyMessage;
  self.resultTestLazyMessage = nil;
  return returnMe;
}
- (TestLazyMessageBuilder*) mergeFrom:(TestLazyMessage*) other {
  if (other == [TestLazyMessage defaultInstance]) {
    return self;
  }
  if (other.hasSubMessage) {
    [self mergeSubMessage:other.subMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestLazyMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestLazyMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        if (self.hasSubMessage) {
          [subBuilder mergeFrom:self.subMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSubMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSubMessage {
  return resultTestLazyMessage.hasSubMessage;
}
- (TestAllTypes*) subMessage {
  return resultTestLazyMessage.subMessage;
}
- (TestLazyMessageBuilder*) setSubMessage:(TestAllTypes*) value {
  resultTestLazyMessage.hasSubMessage = YES;
  resultTestLazyMessage.subMessage = value;
  return self;
}
- (TestLazyMessageBuilder*) setSubMessageBuilder:(TestAllTypesBuilder*) builderForValue {
  return [self setSubMessage:[builderForValue build]];
}
- (TestLazyMessageBuilder*) mergeSubMessage:(TestAllTypes*) value {
  if (resultTestLazyMessage.hasSubMessage &&
      resultTestLazyMessage.subMessage != [TestAllTypes defaultInstance]) {
    resultTestLazyMessage.subMessage =
      [[[TestAllTypes builderWithPrototype:resultTestLazyMessage.subMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestLazyMessage.subMessage = value;
  }
  resultTestLazyMessage.hasSubMessage = YES;
  return self;
}
- (TestLazyMessageBuilder*) clearSubMessage {
  resultTestLazyMessage.hasSubMessage = NO;
  resultTestLazyMessage.subMessage = [TestAllTypes defaultInstance];
  return self;
}
@end

@interface TestNestedMessageHasBits ()
@property (strong) TestNestedMessageHasBitsNestedMessage* optionalNestedMessage;
@end

@implementation TestNestedMessageHasBits

- (BOOL) hasOptionalNestedMessage {
  return !!hasOptionalNestedMessage_;
}
- (void) setHasOptionalNestedMessage:(BOOL) _value_ {
  hasOptionalNestedMessage_ = !!_value_;
}
@synthesize optionalNestedMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.optionalNestedMessage = [TestNestedMessageHasBitsNestedMessage defaultInstance];
  }
  return self;
}
static TestNestedMessageHasBits* defaultTestNestedMessageHasBitsInstance = nil;
+ (void) initialize {
  if (self == [TestNestedMessageHasBits class]) {
    defaultTestNestedMessageHasBitsInstance = [[TestNestedMessageHasBits alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestNestedMessageHasBitsInstance;
}
- (instancetype) defaultInstance {
  return defaultTestNestedMessageHasBitsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOptionalNestedMessage) {
    [output writeMessage:1 value:self.optionalNestedMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptionalNestedMessage) {
    size_ += computeMessageSize(1, self.optionalNestedMessage);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestNestedMessageHasBits*) parseFromData:(NSData*) data {
  return (TestNestedMessageHasBits*)[[[TestNestedMessageHasBits builder] mergeFromData:data] build];
}
+ (TestNestedMessageHasBits*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedMessageHasBits*)[[[TestNestedMessageHasBits builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestNestedMessageHasBits*) parseFromInputStream:(NSInputStream*) input {
  return (TestNestedMessageHasBits*)[[[TestNestedMessageHasBits builder] mergeFromInputStream:input] build];
}
+ (TestNestedMessageHasBits*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedMessageHasBits*)[[[TestNestedMessageHasBits builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestNestedMessageHasBits*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestNestedMessageHasBits*)[[[TestNestedMessageHasBits builder] mergeFromCodedInputStream:input] build];
}
+ (TestNestedMessageHasBits*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedMessageHasBits*)[[[TestNestedMessageHasBits builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestNestedMessageHasBitsBuilder*) builder {
  return [[TestNestedMessageHasBitsBuilder alloc] init];
}
+ (TestNestedMessageHasBitsBuilder*) builderWithPrototype:(TestNestedMessageHasBits*) prototype {
  return [[TestNestedMessageHasBits builder] mergeFrom:prototype];
}
- (TestNestedMessageHasBitsBuilder*) builder {
  return [TestNestedMessageHasBits builder];
}
- (TestNestedMessageHasBitsBuilder*) toBuilder {
  return [TestNestedMessageHasBits builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOptionalNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalNestedMessage"];
    [self.optionalNestedMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOptionalNestedMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalNestedMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalNestedMessage"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestNestedMessageHasBits class]]) {
    return NO;
  }
  TestNestedMessageHasBits *otherMessage = other;
  return
      self.hasOptionalNestedMessage == otherMessage.hasOptionalNestedMessage &&
      (!self.hasOptionalNestedMessage || [self.optionalNestedMessage isEqual:otherMessage.optionalNestedMessage]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOptionalNestedMessage) {
    hashCode = hashCode * 31 + [self.optionalNestedMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestNestedMessageHasBitsNestedMessage ()
@property (strong) PBAppendableArray * nestedmessageRepeatedInt32Array;
@property (strong) NSMutableArray * nestedmessageRepeatedForeignmessageArray;
@end

@implementation TestNestedMessageHasBitsNestedMessage

@synthesize nestedmessageRepeatedInt32Array;
@dynamic nestedmessageRepeatedInt32;
@synthesize nestedmessageRepeatedForeignmessageArray;
@dynamic nestedmessageRepeatedForeignmessage;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestNestedMessageHasBitsNestedMessage* defaultTestNestedMessageHasBitsNestedMessageInstance = nil;
+ (void) initialize {
  if (self == [TestNestedMessageHasBitsNestedMessage class]) {
    defaultTestNestedMessageHasBitsNestedMessageInstance = [[TestNestedMessageHasBitsNestedMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestNestedMessageHasBitsNestedMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultTestNestedMessageHasBitsNestedMessageInstance;
}
- (PBArray *)nestedmessageRepeatedInt32 {
  return nestedmessageRepeatedInt32Array;
}
- (SInt32)nestedmessageRepeatedInt32AtIndex:(NSUInteger)index {
  return [nestedmessageRepeatedInt32Array int32AtIndex:index];
}
- (NSArray *)nestedmessageRepeatedForeignmessage {
  return nestedmessageRepeatedForeignmessageArray;
}
- (ForeignMessage*)nestedmessageRepeatedForeignmessageAtIndex:(NSUInteger)index {
  return [nestedmessageRepeatedForeignmessageArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger nestedmessageRepeatedInt32ArrayCount = self.nestedmessageRepeatedInt32Array.count;
  if (nestedmessageRepeatedInt32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.nestedmessageRepeatedInt32Array.data;
    for (NSUInteger i = 0; i < nestedmessageRepeatedInt32ArrayCount; ++i) {
      [output writeInt32:1 value:values[i]];
    }
  }
  [self.nestedmessageRepeatedForeignmessageArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.nestedmessageRepeatedInt32Array.count;
    const SInt32 *values = (const SInt32 *)self.nestedmessageRepeatedInt32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.nestedmessageRepeatedForeignmessageArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestNestedMessageHasBitsNestedMessage*) parseFromData:(NSData*) data {
  return (TestNestedMessageHasBitsNestedMessage*)[[[TestNestedMessageHasBitsNestedMessage builder] mergeFromData:data] build];
}
+ (TestNestedMessageHasBitsNestedMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedMessageHasBitsNestedMessage*)[[[TestNestedMessageHasBitsNestedMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestNestedMessageHasBitsNestedMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TestNestedMessageHasBitsNestedMessage*)[[[TestNestedMessageHasBitsNestedMessage builder] mergeFromInputStream:input] build];
}
+ (TestNestedMessageHasBitsNestedMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedMessageHasBitsNestedMessage*)[[[TestNestedMessageHasBitsNestedMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestNestedMessageHasBitsNestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestNestedMessageHasBitsNestedMessage*)[[[TestNestedMessageHasBitsNestedMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TestNestedMessageHasBitsNestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedMessageHasBitsNestedMessage*)[[[TestNestedMessageHasBitsNestedMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestNestedMessageHasBitsNestedMessageBuilder*) builder {
  return [[TestNestedMessageHasBitsNestedMessageBuilder alloc] init];
}
+ (TestNestedMessageHasBitsNestedMessageBuilder*) builderWithPrototype:(TestNestedMessageHasBitsNestedMessage*) prototype {
  return [[TestNestedMessageHasBitsNestedMessage builder] mergeFrom:prototype];
}
- (TestNestedMessageHasBitsNestedMessageBuilder*) builder {
  return [TestNestedMessageHasBitsNestedMessage builder];
}
- (TestNestedMessageHasBitsNestedMessageBuilder*) toBuilder {
  return [TestNestedMessageHasBitsNestedMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.nestedmessageRepeatedInt32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nestedmessageRepeatedInt32", obj];
  }];
  [self.nestedmessageRepeatedForeignmessageArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"nestedmessageRepeatedForeignmessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * nestedmessageRepeatedInt32ArrayArray = [NSMutableArray new];
  NSUInteger nestedmessageRepeatedInt32ArrayCount=self.nestedmessageRepeatedInt32Array.count;
  for(int i=0;i<nestedmessageRepeatedInt32ArrayCount;i++){
    [nestedmessageRepeatedInt32ArrayArray addObject: @([self.nestedmessageRepeatedInt32Array int32AtIndex:i])];
  }
  [dictionary setObject: nestedmessageRepeatedInt32ArrayArray forKey: @"nestedmessageRepeatedInt32"];
  for (ForeignMessage* element in self.nestedmessageRepeatedForeignmessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"nestedmessageRepeatedForeignmessage"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestNestedMessageHasBitsNestedMessage class]]) {
    return NO;
  }
  TestNestedMessageHasBitsNestedMessage *otherMessage = other;
  return
      [self.nestedmessageRepeatedInt32Array isEqualToArray:otherMessage.nestedmessageRepeatedInt32Array] &&
      [self.nestedmessageRepeatedForeignmessageArray isEqualToArray:otherMessage.nestedmessageRepeatedForeignmessageArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.nestedmessageRepeatedInt32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.nestedmessageRepeatedForeignmessageArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestNestedMessageHasBitsNestedMessageBuilder()
@property (strong) TestNestedMessageHasBitsNestedMessage* resultNestedMessage;
@end

@implementation TestNestedMessageHasBitsNestedMessageBuilder
@synthesize resultNestedMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNestedMessage = [[TestNestedMessageHasBitsNestedMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNestedMessage;
}
- (TestNestedMessageHasBitsNestedMessageBuilder*) clear {
  self.resultNestedMessage = [[TestNestedMessageHasBitsNestedMessage alloc] init];
  return self;
}
- (TestNestedMessageHasBitsNestedMessageBuilder*) clone {
  return [TestNestedMessageHasBitsNestedMessage builderWithPrototype:resultNestedMessage];
}
- (TestNestedMessageHasBitsNestedMessage*) defaultInstance {
  return [TestNestedMessageHasBitsNestedMessage defaultInstance];
}
- (TestNestedMessageHasBitsNestedMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestNestedMessageHasBitsNestedMessage*) buildPartial {
  TestNestedMessageHasBitsNestedMessage* returnMe = resultNestedMessage;
  self.resultNestedMessage = nil;
  return returnMe;
}
- (TestNestedMessageHasBitsNestedMessageBuilder*) mergeFrom:(TestNestedMessageHasBitsNestedMessage*) other {
  if (other == [TestNestedMessageHasBitsNestedMessage defaultInstance]) {
    return self;
  }
  if (other.nestedmessageRepeatedInt32Array.count > 0) {
    if (resultNestedMessage.nestedmessageRepeatedInt32Array == nil) {
      resultNestedMessage.nestedmessageRepeatedInt32Array = [other.nestedmessageRepeatedInt32Array copy];
    } else {
      [resultNestedMessage.nestedmessageRepeatedInt32Array appendArray:other.nestedmessageRepeatedInt32Array];
    }
  }
  if (other.nestedmessageRepeatedForeignmessageArray.count > 0) {
    if (resultNestedMessage.nestedmessageRepeatedForeignmessageArray == nil) {
      resultNestedMessage.nestedmessageRepeatedForeignmessageArray = [[NSMutableArray alloc] initWithArray:other.nestedmessageRepeatedForeignmessageArray];
    } else {
      [resultNestedMessage.nestedmessageRepeatedForeignmessageArray addObjectsFromArray:other.nestedmessageRepeatedForeignmessageArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestNestedMessageHasBitsNestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestNestedMessageHasBitsNestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addNestedmessageRepeatedInt32:[input readInt32]];
        break;
      }
      case 18: {
        ForeignMessageBuilder* subBuilder = [ForeignMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNestedmessageRepeatedForeignmessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)nestedmessageRepeatedInt32 {
  return resultNestedMessage.nestedmessageRepeatedInt32Array;
}
- (SInt32)nestedmessageRepeatedInt32AtIndex:(NSUInteger)index {
  return [resultNestedMessage nestedmessageRepeatedInt32AtIndex:index];
}
- (TestNestedMessageHasBitsNestedMessageBuilder *)addNestedmessageRepeatedInt32:(SInt32)value {
  if (resultNestedMessage.nestedmessageRepeatedInt32Array == nil) {
    resultNestedMessage.nestedmessageRepeatedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultNestedMessage.nestedmessageRepeatedInt32Array addInt32:value];
  return self;
}
- (TestNestedMessageHasBitsNestedMessageBuilder *)setNestedmessageRepeatedInt32Array:(NSArray *)array {
  resultNestedMessage.nestedmessageRepeatedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestNestedMessageHasBitsNestedMessageBuilder *)setNestedmessageRepeatedInt32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultNestedMessage.nestedmessageRepeatedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestNestedMessageHasBitsNestedMessageBuilder *)clearNestedmessageRepeatedInt32 {
  resultNestedMessage.nestedmessageRepeatedInt32Array = nil;
  return self;
}
- (NSMutableArray *)nestedmessageRepeatedForeignmessage {
  return resultNestedMessage.nestedmessageRepeatedForeignmessageArray;
}
- (ForeignMessage*)nestedmessageRepeatedForeignmessageAtIndex:(NSUInteger)index {
  return [resultNestedMessage nestedmessageRepeatedForeignmessageAtIndex:index];
}
- (TestNestedMessageHasBitsNestedMessageBuilder *)addNestedmessageRepeatedForeignmessage:(ForeignMessage*)value {
  if (resultNestedMessage.nestedmessageRepeatedForeignmessageArray == nil) {
    resultNestedMessage.nestedmessageRepeatedForeignmessageArray = [[NSMutableArray alloc]init];
  }
  [resultNestedMessage.nestedmessageRepeatedForeignmessageArray addObject:value];
  return self;
}
- (TestNestedMessageHasBitsNestedMessageBuilder *)setNestedmessageRepeatedForeignmessageArray:(NSArray *)array {
  resultNestedMessage.nestedmessageRepeatedForeignmessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestNestedMessageHasBitsNestedMessageBuilder *)clearNestedmessageRepeatedForeignmessage {
  resultNestedMessage.nestedmessageRepeatedForeignmessageArray = nil;
  return self;
}
@end

@interface TestNestedMessageHasBitsBuilder()
@property (strong) TestNestedMessageHasBits* resultTestNestedMessageHasBits;
@end

@implementation TestNestedMessageHasBitsBuilder
@synthesize resultTestNestedMessageHasBits;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestNestedMessageHasBits = [[TestNestedMessageHasBits alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestNestedMessageHasBits;
}
- (TestNestedMessageHasBitsBuilder*) clear {
  self.resultTestNestedMessageHasBits = [[TestNestedMessageHasBits alloc] init];
  return self;
}
- (TestNestedMessageHasBitsBuilder*) clone {
  return [TestNestedMessageHasBits builderWithPrototype:resultTestNestedMessageHasBits];
}
- (TestNestedMessageHasBits*) defaultInstance {
  return [TestNestedMessageHasBits defaultInstance];
}
- (TestNestedMessageHasBits*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestNestedMessageHasBits*) buildPartial {
  TestNestedMessageHasBits* returnMe = resultTestNestedMessageHasBits;
  self.resultTestNestedMessageHasBits = nil;
  return returnMe;
}
- (TestNestedMessageHasBitsBuilder*) mergeFrom:(TestNestedMessageHasBits*) other {
  if (other == [TestNestedMessageHasBits defaultInstance]) {
    return self;
  }
  if (other.hasOptionalNestedMessage) {
    [self mergeOptionalNestedMessage:other.optionalNestedMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestNestedMessageHasBitsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestNestedMessageHasBitsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestNestedMessageHasBitsNestedMessageBuilder* subBuilder = [TestNestedMessageHasBitsNestedMessage builder];
        if (self.hasOptionalNestedMessage) {
          [subBuilder mergeFrom:self.optionalNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalNestedMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOptionalNestedMessage {
  return resultTestNestedMessageHasBits.hasOptionalNestedMessage;
}
- (TestNestedMessageHasBitsNestedMessage*) optionalNestedMessage {
  return resultTestNestedMessageHasBits.optionalNestedMessage;
}
- (TestNestedMessageHasBitsBuilder*) setOptionalNestedMessage:(TestNestedMessageHasBitsNestedMessage*) value {
  resultTestNestedMessageHasBits.hasOptionalNestedMessage = YES;
  resultTestNestedMessageHasBits.optionalNestedMessage = value;
  return self;
}
- (TestNestedMessageHasBitsBuilder*) setOptionalNestedMessageBuilder:(TestNestedMessageHasBitsNestedMessageBuilder*) builderForValue {
  return [self setOptionalNestedMessage:[builderForValue build]];
}
- (TestNestedMessageHasBitsBuilder*) mergeOptionalNestedMessage:(TestNestedMessageHasBitsNestedMessage*) value {
  if (resultTestNestedMessageHasBits.hasOptionalNestedMessage &&
      resultTestNestedMessageHasBits.optionalNestedMessage != [TestNestedMessageHasBitsNestedMessage defaultInstance]) {
    resultTestNestedMessageHasBits.optionalNestedMessage =
      [[[TestNestedMessageHasBitsNestedMessage builderWithPrototype:resultTestNestedMessageHasBits.optionalNestedMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestNestedMessageHasBits.optionalNestedMessage = value;
  }
  resultTestNestedMessageHasBits.hasOptionalNestedMessage = YES;
  return self;
}
- (TestNestedMessageHasBitsBuilder*) clearOptionalNestedMessage {
  resultTestNestedMessageHasBits.hasOptionalNestedMessage = NO;
  resultTestNestedMessageHasBits.optionalNestedMessage = [TestNestedMessageHasBitsNestedMessage defaultInstance];
  return self;
}
@end

@interface TestCamelCaseFieldNames ()
@property SInt32 primitiveField;
@property (strong) NSString* stringField;
@property ForeignEnum enumField;
@property (strong) ForeignMessage* messageField;
@property (strong) NSString* stringPieceField;
@property (strong) NSString* cordField;
@property (strong) PBAppendableArray * repeatedPrimitiveFieldArray;
@property (strong) NSMutableArray * repeatedStringFieldArray;
@property (strong) PBAppendableArray * repeatedEnumFieldArray;
@property (strong) NSMutableArray * repeatedMessageFieldArray;
@property (strong) NSMutableArray * repeatedStringPieceFieldArray;
@property (strong) NSMutableArray * repeatedCordFieldArray;
@end

@implementation TestCamelCaseFieldNames

- (BOOL) hasPrimitiveField {
  return !!hasPrimitiveField_;
}
- (void) setHasPrimitiveField:(BOOL) _value_ {
  hasPrimitiveField_ = !!_value_;
}
@synthesize primitiveField;
- (BOOL) hasStringField {
  return !!hasStringField_;
}
- (void) setHasStringField:(BOOL) _value_ {
  hasStringField_ = !!_value_;
}
@synthesize stringField;
- (BOOL) hasEnumField {
  return !!hasEnumField_;
}
- (void) setHasEnumField:(BOOL) _value_ {
  hasEnumField_ = !!_value_;
}
@synthesize enumField;
- (BOOL) hasMessageField {
  return !!hasMessageField_;
}
- (void) setHasMessageField:(BOOL) _value_ {
  hasMessageField_ = !!_value_;
}
@synthesize messageField;
- (BOOL) hasStringPieceField {
  return !!hasStringPieceField_;
}
- (void) setHasStringPieceField:(BOOL) _value_ {
  hasStringPieceField_ = !!_value_;
}
@synthesize stringPieceField;
- (BOOL) hasCordField {
  return !!hasCordField_;
}
- (void) setHasCordField:(BOOL) _value_ {
  hasCordField_ = !!_value_;
}
@synthesize cordField;
@synthesize repeatedPrimitiveFieldArray;
@dynamic repeatedPrimitiveField;
@synthesize repeatedStringFieldArray;
@dynamic repeatedStringField;
@synthesize repeatedEnumFieldArray;
@dynamic repeatedEnumField;
@synthesize repeatedMessageFieldArray;
@dynamic repeatedMessageField;
@synthesize repeatedStringPieceFieldArray;
@dynamic repeatedStringPieceField;
@synthesize repeatedCordFieldArray;
@dynamic repeatedCordField;
- (instancetype) init {
  if ((self = [super init])) {
    self.primitiveField = 0;
    self.stringField = @"";
    self.enumField = ForeignEnumForeignFoo;
    self.messageField = [ForeignMessage defaultInstance];
    self.stringPieceField = @"";
    self.cordField = @"";
  }
  return self;
}
static TestCamelCaseFieldNames* defaultTestCamelCaseFieldNamesInstance = nil;
+ (void) initialize {
  if (self == [TestCamelCaseFieldNames class]) {
    defaultTestCamelCaseFieldNamesInstance = [[TestCamelCaseFieldNames alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestCamelCaseFieldNamesInstance;
}
- (instancetype) defaultInstance {
  return defaultTestCamelCaseFieldNamesInstance;
}
- (PBArray *)repeatedPrimitiveField {
  return repeatedPrimitiveFieldArray;
}
- (SInt32)repeatedPrimitiveFieldAtIndex:(NSUInteger)index {
  return [repeatedPrimitiveFieldArray int32AtIndex:index];
}
- (NSArray *)repeatedStringField {
  return repeatedStringFieldArray;
}
- (NSString*)repeatedStringFieldAtIndex:(NSUInteger)index {
  return [repeatedStringFieldArray objectAtIndex:index];
}
- (PBArray *)repeatedEnumField {
  return repeatedEnumFieldArray;
}
- (ForeignEnum)repeatedEnumFieldAtIndex:(NSUInteger)index {
  return (ForeignEnum)[repeatedEnumFieldArray enumAtIndex:index];
}
- (NSArray *)repeatedMessageField {
  return repeatedMessageFieldArray;
}
- (ForeignMessage*)repeatedMessageFieldAtIndex:(NSUInteger)index {
  return [repeatedMessageFieldArray objectAtIndex:index];
}
- (NSArray *)repeatedStringPieceField {
  return repeatedStringPieceFieldArray;
}
- (NSString*)repeatedStringPieceFieldAtIndex:(NSUInteger)index {
  return [repeatedStringPieceFieldArray objectAtIndex:index];
}
- (NSArray *)repeatedCordField {
  return repeatedCordFieldArray;
}
- (NSString*)repeatedCordFieldAtIndex:(NSUInteger)index {
  return [repeatedCordFieldArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPrimitiveField) {
    [output writeInt32:1 value:self.primitiveField];
  }
  if (self.hasStringField) {
    [output writeString:2 value:self.stringField];
  }
  if (self.hasEnumField) {
    [output writeEnum:3 value:self.enumField];
  }
  if (self.hasMessageField) {
    [output writeMessage:4 value:self.messageField];
  }
  if (self.hasStringPieceField) {
    [output writeString:5 value:self.stringPieceField];
  }
  if (self.hasCordField) {
    [output writeString:6 value:self.cordField];
  }
  const NSUInteger repeatedPrimitiveFieldArrayCount = self.repeatedPrimitiveFieldArray.count;
  if (repeatedPrimitiveFieldArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.repeatedPrimitiveFieldArray.data;
    for (NSUInteger i = 0; i < repeatedPrimitiveFieldArrayCount; ++i) {
      [output writeInt32:7 value:values[i]];
    }
  }
  [self.repeatedStringFieldArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:8 value:element];
  }];
  const NSUInteger repeatedEnumFieldArrayCount = self.repeatedEnumFieldArray.count;
  const ForeignEnum *repeatedEnumFieldArrayValues = (const ForeignEnum *)self.repeatedEnumFieldArray.data;
  for (NSUInteger i = 0; i < repeatedEnumFieldArrayCount; ++i) {
    [output writeEnum:9 value:repeatedEnumFieldArrayValues[i]];
  }
  [self.repeatedMessageFieldArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  [self.repeatedStringPieceFieldArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:11 value:element];
  }];
  [self.repeatedCordFieldArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:12 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPrimitiveField) {
    size_ += computeInt32Size(1, self.primitiveField);
  }
  if (self.hasStringField) {
    size_ += computeStringSize(2, self.stringField);
  }
  if (self.hasEnumField) {
    size_ += computeEnumSize(3, self.enumField);
  }
  if (self.hasMessageField) {
    size_ += computeMessageSize(4, self.messageField);
  }
  if (self.hasStringPieceField) {
    size_ += computeStringSize(5, self.stringPieceField);
  }
  if (self.hasCordField) {
    size_ += computeStringSize(6, self.cordField);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedPrimitiveFieldArray.count;
    const SInt32 *values = (const SInt32 *)self.repeatedPrimitiveFieldArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedStringFieldArray.count;
    [self.repeatedStringFieldArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedEnumFieldArray.count;
    const ForeignEnum *values = (const ForeignEnum *)self.repeatedEnumFieldArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.repeatedMessageFieldArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedStringPieceFieldArray.count;
    [self.repeatedStringPieceFieldArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedCordFieldArray.count;
    [self.repeatedCordFieldArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestCamelCaseFieldNames*) parseFromData:(NSData*) data {
  return (TestCamelCaseFieldNames*)[[[TestCamelCaseFieldNames builder] mergeFromData:data] build];
}
+ (TestCamelCaseFieldNames*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestCamelCaseFieldNames*)[[[TestCamelCaseFieldNames builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestCamelCaseFieldNames*) parseFromInputStream:(NSInputStream*) input {
  return (TestCamelCaseFieldNames*)[[[TestCamelCaseFieldNames builder] mergeFromInputStream:input] build];
}
+ (TestCamelCaseFieldNames*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestCamelCaseFieldNames*)[[[TestCamelCaseFieldNames builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestCamelCaseFieldNames*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestCamelCaseFieldNames*)[[[TestCamelCaseFieldNames builder] mergeFromCodedInputStream:input] build];
}
+ (TestCamelCaseFieldNames*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestCamelCaseFieldNames*)[[[TestCamelCaseFieldNames builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestCamelCaseFieldNamesBuilder*) builder {
  return [[TestCamelCaseFieldNamesBuilder alloc] init];
}
+ (TestCamelCaseFieldNamesBuilder*) builderWithPrototype:(TestCamelCaseFieldNames*) prototype {
  return [[TestCamelCaseFieldNames builder] mergeFrom:prototype];
}
- (TestCamelCaseFieldNamesBuilder*) builder {
  return [TestCamelCaseFieldNames builder];
}
- (TestCamelCaseFieldNamesBuilder*) toBuilder {
  return [TestCamelCaseFieldNames builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPrimitiveField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"primitiveField", [NSNumber numberWithInteger:self.primitiveField]];
  }
  if (self.hasStringField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stringField", self.stringField];
  }
  if (self.hasEnumField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enumField", NSStringFromForeignEnum(self.enumField)];
  }
  if (self.hasMessageField) {
    [output appendFormat:@"%@%@ {\n", indent, @"messageField"];
    [self.messageField writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStringPieceField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stringPieceField", self.stringPieceField];
  }
  if (self.hasCordField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cordField", self.cordField];
  }
  [self.repeatedPrimitiveFieldArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedPrimitiveField", obj];
  }];
  [self.repeatedStringFieldArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedStringField", obj];
  }];
  [self.repeatedEnumFieldArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedEnumField", NSStringFromForeignEnum([(NSNumber *)element intValue])];
  }];
  [self.repeatedMessageFieldArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedMessageField"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repeatedStringPieceFieldArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedStringPieceField", obj];
  }];
  [self.repeatedCordFieldArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedCordField", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPrimitiveField) {
    [dictionary setObject: [NSNumber numberWithInteger:self.primitiveField] forKey: @"primitiveField"];
  }
  if (self.hasStringField) {
    [dictionary setObject: self.stringField forKey: @"stringField"];
  }
  if (self.hasEnumField) {
    [dictionary setObject: @(self.enumField) forKey: @"enumField"];
  }
  if (self.hasMessageField) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.messageField storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"messageField"];
  }
  if (self.hasStringPieceField) {
    [dictionary setObject: self.stringPieceField forKey: @"stringPieceField"];
  }
  if (self.hasCordField) {
    [dictionary setObject: self.cordField forKey: @"cordField"];
  }
  NSMutableArray * repeatedPrimitiveFieldArrayArray = [NSMutableArray new];
  NSUInteger repeatedPrimitiveFieldArrayCount=self.repeatedPrimitiveFieldArray.count;
  for(int i=0;i<repeatedPrimitiveFieldArrayCount;i++){
    [repeatedPrimitiveFieldArrayArray addObject: @([self.repeatedPrimitiveFieldArray int32AtIndex:i])];
  }
  [dictionary setObject: repeatedPrimitiveFieldArrayArray forKey: @"repeatedPrimitiveField"];
  [dictionary setObject:self.repeatedStringField forKey: @"repeatedStringField"];
  const NSUInteger repeatedEnumFieldArrayCount = self.repeatedEnumFieldArray.count;
  if (repeatedEnumFieldArrayCount > 0) {
    const ForeignEnum *repeatedEnumFieldArrayValues = (const ForeignEnum *)self.repeatedEnumFieldArray.data;
    NSMutableArray * repeatedEnumFieldArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < repeatedEnumFieldArrayCount; ++i) {
      [repeatedEnumFieldArrayArray addObject: @(repeatedEnumFieldArrayValues[i])];
    }
    [dictionary setObject: repeatedEnumFieldArrayArray forKey: @"repeatedEnumField"];
  }
  for (ForeignMessage* element in self.repeatedMessageFieldArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedMessageField"];
  }
  [dictionary setObject:self.repeatedStringPieceField forKey: @"repeatedStringPieceField"];
  [dictionary setObject:self.repeatedCordField forKey: @"repeatedCordField"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestCamelCaseFieldNames class]]) {
    return NO;
  }
  TestCamelCaseFieldNames *otherMessage = other;
  return
      self.hasPrimitiveField == otherMessage.hasPrimitiveField &&
      (!self.hasPrimitiveField || self.primitiveField == otherMessage.primitiveField) &&
      self.hasStringField == otherMessage.hasStringField &&
      (!self.hasStringField || [self.stringField isEqual:otherMessage.stringField]) &&
      self.hasEnumField == otherMessage.hasEnumField &&
      (!self.hasEnumField || self.enumField == otherMessage.enumField) &&
      self.hasMessageField == otherMessage.hasMessageField &&
      (!self.hasMessageField || [self.messageField isEqual:otherMessage.messageField]) &&
      self.hasStringPieceField == otherMessage.hasStringPieceField &&
      (!self.hasStringPieceField || [self.stringPieceField isEqual:otherMessage.stringPieceField]) &&
      self.hasCordField == otherMessage.hasCordField &&
      (!self.hasCordField || [self.cordField isEqual:otherMessage.cordField]) &&
      [self.repeatedPrimitiveFieldArray isEqualToArray:otherMessage.repeatedPrimitiveFieldArray] &&
      [self.repeatedStringFieldArray isEqualToArray:otherMessage.repeatedStringFieldArray] &&
      [self.repeatedEnumFieldArray isEqualToArray:otherMessage.repeatedEnumFieldArray] &&
      [self.repeatedMessageFieldArray isEqualToArray:otherMessage.repeatedMessageFieldArray] &&
      [self.repeatedStringPieceFieldArray isEqualToArray:otherMessage.repeatedStringPieceFieldArray] &&
      [self.repeatedCordFieldArray isEqualToArray:otherMessage.repeatedCordFieldArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPrimitiveField) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.primitiveField] hash];
  }
  if (self.hasStringField) {
    hashCode = hashCode * 31 + [self.stringField hash];
  }
  if (self.hasEnumField) {
    hashCode = hashCode * 31 + self.enumField;
  }
  if (self.hasMessageField) {
    hashCode = hashCode * 31 + [self.messageField hash];
  }
  if (self.hasStringPieceField) {
    hashCode = hashCode * 31 + [self.stringPieceField hash];
  }
  if (self.hasCordField) {
    hashCode = hashCode * 31 + [self.cordField hash];
  }
  [self.repeatedPrimitiveFieldArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedStringFieldArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedEnumFieldArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  [self.repeatedMessageFieldArray enumerateObjectsUsingBlock:^(ForeignMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedStringPieceFieldArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedCordFieldArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestCamelCaseFieldNamesBuilder()
@property (strong) TestCamelCaseFieldNames* resultTestCamelCaseFieldNames;
@end

@implementation TestCamelCaseFieldNamesBuilder
@synthesize resultTestCamelCaseFieldNames;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestCamelCaseFieldNames = [[TestCamelCaseFieldNames alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestCamelCaseFieldNames;
}
- (TestCamelCaseFieldNamesBuilder*) clear {
  self.resultTestCamelCaseFieldNames = [[TestCamelCaseFieldNames alloc] init];
  return self;
}
- (TestCamelCaseFieldNamesBuilder*) clone {
  return [TestCamelCaseFieldNames builderWithPrototype:resultTestCamelCaseFieldNames];
}
- (TestCamelCaseFieldNames*) defaultInstance {
  return [TestCamelCaseFieldNames defaultInstance];
}
- (TestCamelCaseFieldNames*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestCamelCaseFieldNames*) buildPartial {
  TestCamelCaseFieldNames* returnMe = resultTestCamelCaseFieldNames;
  self.resultTestCamelCaseFieldNames = nil;
  return returnMe;
}
- (TestCamelCaseFieldNamesBuilder*) mergeFrom:(TestCamelCaseFieldNames*) other {
  if (other == [TestCamelCaseFieldNames defaultInstance]) {
    return self;
  }
  if (other.hasPrimitiveField) {
    [self setPrimitiveField:other.primitiveField];
  }
  if (other.hasStringField) {
    [self setStringField:other.stringField];
  }
  if (other.hasEnumField) {
    [self setEnumField:other.enumField];
  }
  if (other.hasMessageField) {
    [self mergeMessageField:other.messageField];
  }
  if (other.hasStringPieceField) {
    [self setStringPieceField:other.stringPieceField];
  }
  if (other.hasCordField) {
    [self setCordField:other.cordField];
  }
  if (other.repeatedPrimitiveFieldArray.count > 0) {
    if (resultTestCamelCaseFieldNames.repeatedPrimitiveFieldArray == nil) {
      resultTestCamelCaseFieldNames.repeatedPrimitiveFieldArray = [other.repeatedPrimitiveFieldArray copy];
    } else {
      [resultTestCamelCaseFieldNames.repeatedPrimitiveFieldArray appendArray:other.repeatedPrimitiveFieldArray];
    }
  }
  if (other.repeatedStringFieldArray.count > 0) {
    if (resultTestCamelCaseFieldNames.repeatedStringFieldArray == nil) {
      resultTestCamelCaseFieldNames.repeatedStringFieldArray = [[NSMutableArray alloc] initWithArray:other.repeatedStringFieldArray];
    } else {
      [resultTestCamelCaseFieldNames.repeatedStringFieldArray addObjectsFromArray:other.repeatedStringFieldArray];
    }
  }
  if (other.repeatedEnumFieldArray.count > 0) {
    if (resultTestCamelCaseFieldNames.repeatedEnumFieldArray == nil) {
      resultTestCamelCaseFieldNames.repeatedEnumFieldArray = [other.repeatedEnumFieldArray copy];
    } else {
      [resultTestCamelCaseFieldNames.repeatedEnumFieldArray appendArray:other.repeatedEnumFieldArray];
    }
  }
  if (other.repeatedMessageFieldArray.count > 0) {
    if (resultTestCamelCaseFieldNames.repeatedMessageFieldArray == nil) {
      resultTestCamelCaseFieldNames.repeatedMessageFieldArray = [[NSMutableArray alloc] initWithArray:other.repeatedMessageFieldArray];
    } else {
      [resultTestCamelCaseFieldNames.repeatedMessageFieldArray addObjectsFromArray:other.repeatedMessageFieldArray];
    }
  }
  if (other.repeatedStringPieceFieldArray.count > 0) {
    if (resultTestCamelCaseFieldNames.repeatedStringPieceFieldArray == nil) {
      resultTestCamelCaseFieldNames.repeatedStringPieceFieldArray = [[NSMutableArray alloc] initWithArray:other.repeatedStringPieceFieldArray];
    } else {
      [resultTestCamelCaseFieldNames.repeatedStringPieceFieldArray addObjectsFromArray:other.repeatedStringPieceFieldArray];
    }
  }
  if (other.repeatedCordFieldArray.count > 0) {
    if (resultTestCamelCaseFieldNames.repeatedCordFieldArray == nil) {
      resultTestCamelCaseFieldNames.repeatedCordFieldArray = [[NSMutableArray alloc] initWithArray:other.repeatedCordFieldArray];
    } else {
      [resultTestCamelCaseFieldNames.repeatedCordFieldArray addObjectsFromArray:other.repeatedCordFieldArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestCamelCaseFieldNamesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestCamelCaseFieldNamesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrimitiveField:[input readInt32]];
        break;
      }
      case 18: {
        [self setStringField:[input readString]];
        break;
      }
      case 24: {
        ForeignEnum value = (ForeignEnum)[input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self setEnumField:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        ForeignMessageBuilder* subBuilder = [ForeignMessage builder];
        if (self.hasMessageField) {
          [subBuilder mergeFrom:self.messageField];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMessageField:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setStringPieceField:[input readString]];
        break;
      }
      case 50: {
        [self setCordField:[input readString]];
        break;
      }
      case 56: {
        [self addRepeatedPrimitiveField:[input readInt32]];
        break;
      }
      case 66: {
        [self addRepeatedStringField:[input readString]];
        break;
      }
      case 72: {
        ForeignEnum value = (ForeignEnum)[input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self addRepeatedEnumField:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 82: {
        ForeignMessageBuilder* subBuilder = [ForeignMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedMessageField:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self addRepeatedStringPieceField:[input readString]];
        break;
      }
      case 98: {
        [self addRepeatedCordField:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPrimitiveField {
  return resultTestCamelCaseFieldNames.hasPrimitiveField;
}
- (SInt32) primitiveField {
  return resultTestCamelCaseFieldNames.primitiveField;
}
- (TestCamelCaseFieldNamesBuilder*) setPrimitiveField:(SInt32) value {
  resultTestCamelCaseFieldNames.hasPrimitiveField = YES;
  resultTestCamelCaseFieldNames.primitiveField = value;
  return self;
}
- (TestCamelCaseFieldNamesBuilder*) clearPrimitiveField {
  resultTestCamelCaseFieldNames.hasPrimitiveField = NO;
  resultTestCamelCaseFieldNames.primitiveField = 0;
  return self;
}
- (BOOL) hasStringField {
  return resultTestCamelCaseFieldNames.hasStringField;
}
- (NSString*) stringField {
  return resultTestCamelCaseFieldNames.stringField;
}
- (TestCamelCaseFieldNamesBuilder*) setStringField:(NSString*) value {
  resultTestCamelCaseFieldNames.hasStringField = YES;
  resultTestCamelCaseFieldNames.stringField = value;
  return self;
}
- (TestCamelCaseFieldNamesBuilder*) clearStringField {
  resultTestCamelCaseFieldNames.hasStringField = NO;
  resultTestCamelCaseFieldNames.stringField = @"";
  return self;
}
- (BOOL) hasEnumField {
  return resultTestCamelCaseFieldNames.hasEnumField;
}
- (ForeignEnum) enumField {
  return resultTestCamelCaseFieldNames.enumField;
}
- (TestCamelCaseFieldNamesBuilder*) setEnumField:(ForeignEnum) value {
  resultTestCamelCaseFieldNames.hasEnumField = YES;
  resultTestCamelCaseFieldNames.enumField = value;
  return self;
}
- (TestCamelCaseFieldNamesBuilder*) clearEnumField {
  resultTestCamelCaseFieldNames.hasEnumField = NO;
  resultTestCamelCaseFieldNames.enumField = ForeignEnumForeignFoo;
  return self;
}
- (BOOL) hasMessageField {
  return resultTestCamelCaseFieldNames.hasMessageField;
}
- (ForeignMessage*) messageField {
  return resultTestCamelCaseFieldNames.messageField;
}
- (TestCamelCaseFieldNamesBuilder*) setMessageField:(ForeignMessage*) value {
  resultTestCamelCaseFieldNames.hasMessageField = YES;
  resultTestCamelCaseFieldNames.messageField = value;
  return self;
}
- (TestCamelCaseFieldNamesBuilder*) setMessageFieldBuilder:(ForeignMessageBuilder*) builderForValue {
  return [self setMessageField:[builderForValue build]];
}
- (TestCamelCaseFieldNamesBuilder*) mergeMessageField:(ForeignMessage*) value {
  if (resultTestCamelCaseFieldNames.hasMessageField &&
      resultTestCamelCaseFieldNames.messageField != [ForeignMessage defaultInstance]) {
    resultTestCamelCaseFieldNames.messageField =
      [[[ForeignMessage builderWithPrototype:resultTestCamelCaseFieldNames.messageField] mergeFrom:value] buildPartial];
  } else {
    resultTestCamelCaseFieldNames.messageField = value;
  }
  resultTestCamelCaseFieldNames.hasMessageField = YES;
  return self;
}
- (TestCamelCaseFieldNamesBuilder*) clearMessageField {
  resultTestCamelCaseFieldNames.hasMessageField = NO;
  resultTestCamelCaseFieldNames.messageField = [ForeignMessage defaultInstance];
  return self;
}
- (BOOL) hasStringPieceField {
  return resultTestCamelCaseFieldNames.hasStringPieceField;
}
- (NSString*) stringPieceField {
  return resultTestCamelCaseFieldNames.stringPieceField;
}
- (TestCamelCaseFieldNamesBuilder*) setStringPieceField:(NSString*) value {
  resultTestCamelCaseFieldNames.hasStringPieceField = YES;
  resultTestCamelCaseFieldNames.stringPieceField = value;
  return self;
}
- (TestCamelCaseFieldNamesBuilder*) clearStringPieceField {
  resultTestCamelCaseFieldNames.hasStringPieceField = NO;
  resultTestCamelCaseFieldNames.stringPieceField = @"";
  return self;
}
- (BOOL) hasCordField {
  return resultTestCamelCaseFieldNames.hasCordField;
}
- (NSString*) cordField {
  return resultTestCamelCaseFieldNames.cordField;
}
- (TestCamelCaseFieldNamesBuilder*) setCordField:(NSString*) value {
  resultTestCamelCaseFieldNames.hasCordField = YES;
  resultTestCamelCaseFieldNames.cordField = value;
  return self;
}
- (TestCamelCaseFieldNamesBuilder*) clearCordField {
  resultTestCamelCaseFieldNames.hasCordField = NO;
  resultTestCamelCaseFieldNames.cordField = @"";
  return self;
}
- (PBAppendableArray *)repeatedPrimitiveField {
  return resultTestCamelCaseFieldNames.repeatedPrimitiveFieldArray;
}
- (SInt32)repeatedPrimitiveFieldAtIndex:(NSUInteger)index {
  return [resultTestCamelCaseFieldNames repeatedPrimitiveFieldAtIndex:index];
}
- (TestCamelCaseFieldNamesBuilder *)addRepeatedPrimitiveField:(SInt32)value {
  if (resultTestCamelCaseFieldNames.repeatedPrimitiveFieldArray == nil) {
    resultTestCamelCaseFieldNames.repeatedPrimitiveFieldArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestCamelCaseFieldNames.repeatedPrimitiveFieldArray addInt32:value];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)setRepeatedPrimitiveFieldArray:(NSArray *)array {
  resultTestCamelCaseFieldNames.repeatedPrimitiveFieldArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)setRepeatedPrimitiveFieldValues:(const SInt32 *)values count:(NSUInteger)count {
  resultTestCamelCaseFieldNames.repeatedPrimitiveFieldArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)clearRepeatedPrimitiveField {
  resultTestCamelCaseFieldNames.repeatedPrimitiveFieldArray = nil;
  return self;
}
- (NSMutableArray *)repeatedStringField {
  return resultTestCamelCaseFieldNames.repeatedStringFieldArray;
}
- (NSString*)repeatedStringFieldAtIndex:(NSUInteger)index {
  return [resultTestCamelCaseFieldNames repeatedStringFieldAtIndex:index];
}
- (TestCamelCaseFieldNamesBuilder *)addRepeatedStringField:(NSString*)value {
  if (resultTestCamelCaseFieldNames.repeatedStringFieldArray == nil) {
    resultTestCamelCaseFieldNames.repeatedStringFieldArray = [[NSMutableArray alloc]init];
  }
  [resultTestCamelCaseFieldNames.repeatedStringFieldArray addObject:value];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)setRepeatedStringFieldArray:(NSArray *)array {
  resultTestCamelCaseFieldNames.repeatedStringFieldArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)clearRepeatedStringField {
  resultTestCamelCaseFieldNames.repeatedStringFieldArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedEnumField {
  return resultTestCamelCaseFieldNames.repeatedEnumFieldArray;
}
- (ForeignEnum)repeatedEnumFieldAtIndex:(NSUInteger)index {
  return [resultTestCamelCaseFieldNames repeatedEnumFieldAtIndex:index];
}
- (TestCamelCaseFieldNamesBuilder *)addRepeatedEnumField:(ForeignEnum)value {
  if (resultTestCamelCaseFieldNames.repeatedEnumFieldArray == nil) {
    resultTestCamelCaseFieldNames.repeatedEnumFieldArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestCamelCaseFieldNames.repeatedEnumFieldArray addEnum:value];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)setRepeatedEnumFieldArray:(NSArray *)array {
  resultTestCamelCaseFieldNames.repeatedEnumFieldArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)setRepeatedEnumFieldValues:(const ForeignEnum *)values count:(NSUInteger)count {
  resultTestCamelCaseFieldNames.repeatedEnumFieldArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)clearRepeatedEnumField {
  resultTestCamelCaseFieldNames.repeatedEnumFieldArray = nil;
  return self;
}
- (NSMutableArray *)repeatedMessageField {
  return resultTestCamelCaseFieldNames.repeatedMessageFieldArray;
}
- (ForeignMessage*)repeatedMessageFieldAtIndex:(NSUInteger)index {
  return [resultTestCamelCaseFieldNames repeatedMessageFieldAtIndex:index];
}
- (TestCamelCaseFieldNamesBuilder *)addRepeatedMessageField:(ForeignMessage*)value {
  if (resultTestCamelCaseFieldNames.repeatedMessageFieldArray == nil) {
    resultTestCamelCaseFieldNames.repeatedMessageFieldArray = [[NSMutableArray alloc]init];
  }
  [resultTestCamelCaseFieldNames.repeatedMessageFieldArray addObject:value];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)setRepeatedMessageFieldArray:(NSArray *)array {
  resultTestCamelCaseFieldNames.repeatedMessageFieldArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)clearRepeatedMessageField {
  resultTestCamelCaseFieldNames.repeatedMessageFieldArray = nil;
  return self;
}
- (NSMutableArray *)repeatedStringPieceField {
  return resultTestCamelCaseFieldNames.repeatedStringPieceFieldArray;
}
- (NSString*)repeatedStringPieceFieldAtIndex:(NSUInteger)index {
  return [resultTestCamelCaseFieldNames repeatedStringPieceFieldAtIndex:index];
}
- (TestCamelCaseFieldNamesBuilder *)addRepeatedStringPieceField:(NSString*)value {
  if (resultTestCamelCaseFieldNames.repeatedStringPieceFieldArray == nil) {
    resultTestCamelCaseFieldNames.repeatedStringPieceFieldArray = [[NSMutableArray alloc]init];
  }
  [resultTestCamelCaseFieldNames.repeatedStringPieceFieldArray addObject:value];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)setRepeatedStringPieceFieldArray:(NSArray *)array {
  resultTestCamelCaseFieldNames.repeatedStringPieceFieldArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)clearRepeatedStringPieceField {
  resultTestCamelCaseFieldNames.repeatedStringPieceFieldArray = nil;
  return self;
}
- (NSMutableArray *)repeatedCordField {
  return resultTestCamelCaseFieldNames.repeatedCordFieldArray;
}
- (NSString*)repeatedCordFieldAtIndex:(NSUInteger)index {
  return [resultTestCamelCaseFieldNames repeatedCordFieldAtIndex:index];
}
- (TestCamelCaseFieldNamesBuilder *)addRepeatedCordField:(NSString*)value {
  if (resultTestCamelCaseFieldNames.repeatedCordFieldArray == nil) {
    resultTestCamelCaseFieldNames.repeatedCordFieldArray = [[NSMutableArray alloc]init];
  }
  [resultTestCamelCaseFieldNames.repeatedCordFieldArray addObject:value];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)setRepeatedCordFieldArray:(NSArray *)array {
  resultTestCamelCaseFieldNames.repeatedCordFieldArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestCamelCaseFieldNamesBuilder *)clearRepeatedCordField {
  resultTestCamelCaseFieldNames.repeatedCordFieldArray = nil;
  return self;
}
@end

@interface TestFieldOrderings ()
@property (strong) NSString* myString;
@property SInt64 myInt;
@property Float32 myFloat;
@end

@implementation TestFieldOrderings

- (BOOL) hasMyString {
  return !!hasMyString_;
}
- (void) setHasMyString:(BOOL) _value_ {
  hasMyString_ = !!_value_;
}
@synthesize myString;
- (BOOL) hasMyInt {
  return !!hasMyInt_;
}
- (void) setHasMyInt:(BOOL) _value_ {
  hasMyInt_ = !!_value_;
}
@synthesize myInt;
- (BOOL) hasMyFloat {
  return !!hasMyFloat_;
}
- (void) setHasMyFloat:(BOOL) _value_ {
  hasMyFloat_ = !!_value_;
}
@synthesize myFloat;
- (instancetype) init {
  if ((self = [super init])) {
    self.myString = @"";
    self.myInt = 0L;
    self.myFloat = 0;
  }
  return self;
}
static TestFieldOrderings* defaultTestFieldOrderingsInstance = nil;
+ (void) initialize {
  if (self == [TestFieldOrderings class]) {
    defaultTestFieldOrderingsInstance = [[TestFieldOrderings alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestFieldOrderingsInstance;
}
- (instancetype) defaultInstance {
  return defaultTestFieldOrderingsInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMyInt) {
    [output writeInt64:1 value:self.myInt];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:2
                                        to:11];
  if (self.hasMyString) {
    [output writeString:11 value:self.myString];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:12
                                        to:101];
  if (self.hasMyFloat) {
    [output writeFloat:101 value:self.myFloat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMyInt) {
    size_ += computeInt64Size(1, self.myInt);
  }
  if (self.hasMyString) {
    size_ += computeStringSize(11, self.myString);
  }
  if (self.hasMyFloat) {
    size_ += computeFloatSize(101, self.myFloat);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestFieldOrderings*) parseFromData:(NSData*) data {
  return (TestFieldOrderings*)[[[TestFieldOrderings builder] mergeFromData:data] build];
}
+ (TestFieldOrderings*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestFieldOrderings*)[[[TestFieldOrderings builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestFieldOrderings*) parseFromInputStream:(NSInputStream*) input {
  return (TestFieldOrderings*)[[[TestFieldOrderings builder] mergeFromInputStream:input] build];
}
+ (TestFieldOrderings*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestFieldOrderings*)[[[TestFieldOrderings builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestFieldOrderings*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestFieldOrderings*)[[[TestFieldOrderings builder] mergeFromCodedInputStream:input] build];
}
+ (TestFieldOrderings*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestFieldOrderings*)[[[TestFieldOrderings builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestFieldOrderingsBuilder*) builder {
  return [[TestFieldOrderingsBuilder alloc] init];
}
+ (TestFieldOrderingsBuilder*) builderWithPrototype:(TestFieldOrderings*) prototype {
  return [[TestFieldOrderings builder] mergeFrom:prototype];
}
- (TestFieldOrderingsBuilder*) builder {
  return [TestFieldOrderings builder];
}
- (TestFieldOrderingsBuilder*) toBuilder {
  return [TestFieldOrderings builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMyInt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myInt", [NSNumber numberWithLongLong:self.myInt]];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:2
                                              to:11
                                      withIndent:indent];
  if (self.hasMyString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myString", self.myString];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:12
                                              to:101
                                      withIndent:indent];
  if (self.hasMyFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myFloat", [NSNumber numberWithFloat:self.myFloat]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMyInt) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.myInt] forKey: @"myInt"];
  }
  if (self.hasMyString) {
    [dictionary setObject: self.myString forKey: @"myString"];
  }
  if (self.hasMyFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.myFloat] forKey: @"myFloat"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestFieldOrderings class]]) {
    return NO;
  }
  TestFieldOrderings *otherMessage = other;
  return
      self.hasMyInt == otherMessage.hasMyInt &&
      (!self.hasMyInt || self.myInt == otherMessage.myInt) &&
      [self isEqualExtensionsInOther:otherMessage from:2 to:11] &&

      self.hasMyString == otherMessage.hasMyString &&
      (!self.hasMyString || [self.myString isEqual:otherMessage.myString]) &&
      [self isEqualExtensionsInOther:otherMessage from:12 to:101] &&

      self.hasMyFloat == otherMessage.hasMyFloat &&
      (!self.hasMyFloat || self.myFloat == otherMessage.myFloat) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMyInt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.myInt] hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:2 to:11];
  if (self.hasMyString) {
    hashCode = hashCode * 31 + [self.myString hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:12 to:101];
  if (self.hasMyFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.myFloat] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestFieldOrderingsBuilder()
@property (strong) TestFieldOrderings* resultTestFieldOrderings;
@end

@implementation TestFieldOrderingsBuilder
@synthesize resultTestFieldOrderings;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestFieldOrderings = [[TestFieldOrderings alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return resultTestFieldOrderings;
}
- (TestFieldOrderingsBuilder*) clear {
  self.resultTestFieldOrderings = [[TestFieldOrderings alloc] init];
  return self;
}
- (TestFieldOrderingsBuilder*) clone {
  return [TestFieldOrderings builderWithPrototype:resultTestFieldOrderings];
}
- (TestFieldOrderings*) defaultInstance {
  return [TestFieldOrderings defaultInstance];
}
- (TestFieldOrderings*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestFieldOrderings*) buildPartial {
  TestFieldOrderings* returnMe = resultTestFieldOrderings;
  self.resultTestFieldOrderings = nil;
  return returnMe;
}
- (TestFieldOrderingsBuilder*) mergeFrom:(TestFieldOrderings*) other {
  if (other == [TestFieldOrderings defaultInstance]) {
    return self;
  }
  if (other.hasMyString) {
    [self setMyString:other.myString];
  }
  if (other.hasMyInt) {
    [self setMyInt:other.myInt];
  }
  if (other.hasMyFloat) {
    [self setMyFloat:other.myFloat];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestFieldOrderingsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestFieldOrderingsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMyInt:[input readInt64]];
        break;
      }
      case 90: {
        [self setMyString:[input readString]];
        break;
      }
      case 813: {
        [self setMyFloat:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasMyString {
  return resultTestFieldOrderings.hasMyString;
}
- (NSString*) myString {
  return resultTestFieldOrderings.myString;
}
- (TestFieldOrderingsBuilder*) setMyString:(NSString*) value {
  resultTestFieldOrderings.hasMyString = YES;
  resultTestFieldOrderings.myString = value;
  return self;
}
- (TestFieldOrderingsBuilder*) clearMyString {
  resultTestFieldOrderings.hasMyString = NO;
  resultTestFieldOrderings.myString = @"";
  return self;
}
- (BOOL) hasMyInt {
  return resultTestFieldOrderings.hasMyInt;
}
- (SInt64) myInt {
  return resultTestFieldOrderings.myInt;
}
- (TestFieldOrderingsBuilder*) setMyInt:(SInt64) value {
  resultTestFieldOrderings.hasMyInt = YES;
  resultTestFieldOrderings.myInt = value;
  return self;
}
- (TestFieldOrderingsBuilder*) clearMyInt {
  resultTestFieldOrderings.hasMyInt = NO;
  resultTestFieldOrderings.myInt = 0L;
  return self;
}
- (BOOL) hasMyFloat {
  return resultTestFieldOrderings.hasMyFloat;
}
- (Float32) myFloat {
  return resultTestFieldOrderings.myFloat;
}
- (TestFieldOrderingsBuilder*) setMyFloat:(Float32) value {
  resultTestFieldOrderings.hasMyFloat = YES;
  resultTestFieldOrderings.myFloat = value;
  return self;
}
- (TestFieldOrderingsBuilder*) clearMyFloat {
  resultTestFieldOrderings.hasMyFloat = NO;
  resultTestFieldOrderings.myFloat = 0;
  return self;
}
@end

@interface TestExtremeDefaultValues ()
@property (strong) NSData* escapedBytes;
@property UInt32 largeUint32;
@property UInt64 largeUint64;
@property SInt32 smallInt32;
@property SInt64 smallInt64;
@property SInt32 reallySmallInt32;
@property SInt64 reallySmallInt64;
@property (strong) NSString* utf8String;
@property Float32 zeroFloat;
@property Float32 oneFloat;
@property Float32 smallFloat;
@property Float32 negativeOneFloat;
@property Float32 negativeFloat;
@property Float32 largeFloat;
@property Float32 smallNegativeFloat;
@property Float64 infDouble;
@property Float64 negInfDouble;
@property Float64 nanDouble;
@property Float32 infFloat;
@property Float32 negInfFloat;
@property Float32 nanFloat;
@property (strong) NSString* cppTrigraph;
@property (strong) NSString* stringWithZero;
@property (strong) NSData* bytesWithZero;
@property (strong) NSString* stringPieceWithZero;
@property (strong) NSString* cordWithZero;
@property (strong) NSString* replacementString;
@end

@implementation TestExtremeDefaultValues

- (BOOL) hasEscapedBytes {
  return !!hasEscapedBytes_;
}
- (void) setHasEscapedBytes:(BOOL) _value_ {
  hasEscapedBytes_ = !!_value_;
}
@synthesize escapedBytes;
- (BOOL) hasLargeUint32 {
  return !!hasLargeUint32_;
}
- (void) setHasLargeUint32:(BOOL) _value_ {
  hasLargeUint32_ = !!_value_;
}
@synthesize largeUint32;
- (BOOL) hasLargeUint64 {
  return !!hasLargeUint64_;
}
- (void) setHasLargeUint64:(BOOL) _value_ {
  hasLargeUint64_ = !!_value_;
}
@synthesize largeUint64;
- (BOOL) hasSmallInt32 {
  return !!hasSmallInt32_;
}
- (void) setHasSmallInt32:(BOOL) _value_ {
  hasSmallInt32_ = !!_value_;
}
@synthesize smallInt32;
- (BOOL) hasSmallInt64 {
  return !!hasSmallInt64_;
}
- (void) setHasSmallInt64:(BOOL) _value_ {
  hasSmallInt64_ = !!_value_;
}
@synthesize smallInt64;
- (BOOL) hasReallySmallInt32 {
  return !!hasReallySmallInt32_;
}
- (void) setHasReallySmallInt32:(BOOL) _value_ {
  hasReallySmallInt32_ = !!_value_;
}
@synthesize reallySmallInt32;
- (BOOL) hasReallySmallInt64 {
  return !!hasReallySmallInt64_;
}
- (void) setHasReallySmallInt64:(BOOL) _value_ {
  hasReallySmallInt64_ = !!_value_;
}
@synthesize reallySmallInt64;
- (BOOL) hasUtf8String {
  return !!hasUtf8String_;
}
- (void) setHasUtf8String:(BOOL) _value_ {
  hasUtf8String_ = !!_value_;
}
@synthesize utf8String;
- (BOOL) hasZeroFloat {
  return !!hasZeroFloat_;
}
- (void) setHasZeroFloat:(BOOL) _value_ {
  hasZeroFloat_ = !!_value_;
}
@synthesize zeroFloat;
- (BOOL) hasOneFloat {
  return !!hasOneFloat_;
}
- (void) setHasOneFloat:(BOOL) _value_ {
  hasOneFloat_ = !!_value_;
}
@synthesize oneFloat;
- (BOOL) hasSmallFloat {
  return !!hasSmallFloat_;
}
- (void) setHasSmallFloat:(BOOL) _value_ {
  hasSmallFloat_ = !!_value_;
}
@synthesize smallFloat;
- (BOOL) hasNegativeOneFloat {
  return !!hasNegativeOneFloat_;
}
- (void) setHasNegativeOneFloat:(BOOL) _value_ {
  hasNegativeOneFloat_ = !!_value_;
}
@synthesize negativeOneFloat;
- (BOOL) hasNegativeFloat {
  return !!hasNegativeFloat_;
}
- (void) setHasNegativeFloat:(BOOL) _value_ {
  hasNegativeFloat_ = !!_value_;
}
@synthesize negativeFloat;
- (BOOL) hasLargeFloat {
  return !!hasLargeFloat_;
}
- (void) setHasLargeFloat:(BOOL) _value_ {
  hasLargeFloat_ = !!_value_;
}
@synthesize largeFloat;
- (BOOL) hasSmallNegativeFloat {
  return !!hasSmallNegativeFloat_;
}
- (void) setHasSmallNegativeFloat:(BOOL) _value_ {
  hasSmallNegativeFloat_ = !!_value_;
}
@synthesize smallNegativeFloat;
- (BOOL) hasInfDouble {
  return !!hasInfDouble_;
}
- (void) setHasInfDouble:(BOOL) _value_ {
  hasInfDouble_ = !!_value_;
}
@synthesize infDouble;
- (BOOL) hasNegInfDouble {
  return !!hasNegInfDouble_;
}
- (void) setHasNegInfDouble:(BOOL) _value_ {
  hasNegInfDouble_ = !!_value_;
}
@synthesize negInfDouble;
- (BOOL) hasNanDouble {
  return !!hasNanDouble_;
}
- (void) setHasNanDouble:(BOOL) _value_ {
  hasNanDouble_ = !!_value_;
}
@synthesize nanDouble;
- (BOOL) hasInfFloat {
  return !!hasInfFloat_;
}
- (void) setHasInfFloat:(BOOL) _value_ {
  hasInfFloat_ = !!_value_;
}
@synthesize infFloat;
- (BOOL) hasNegInfFloat {
  return !!hasNegInfFloat_;
}
- (void) setHasNegInfFloat:(BOOL) _value_ {
  hasNegInfFloat_ = !!_value_;
}
@synthesize negInfFloat;
- (BOOL) hasNanFloat {
  return !!hasNanFloat_;
}
- (void) setHasNanFloat:(BOOL) _value_ {
  hasNanFloat_ = !!_value_;
}
@synthesize nanFloat;
- (BOOL) hasCppTrigraph {
  return !!hasCppTrigraph_;
}
- (void) setHasCppTrigraph:(BOOL) _value_ {
  hasCppTrigraph_ = !!_value_;
}
@synthesize cppTrigraph;
- (BOOL) hasStringWithZero {
  return !!hasStringWithZero_;
}
- (void) setHasStringWithZero:(BOOL) _value_ {
  hasStringWithZero_ = !!_value_;
}
@synthesize stringWithZero;
- (BOOL) hasBytesWithZero {
  return !!hasBytesWithZero_;
}
- (void) setHasBytesWithZero:(BOOL) _value_ {
  hasBytesWithZero_ = !!_value_;
}
@synthesize bytesWithZero;
- (BOOL) hasStringPieceWithZero {
  return !!hasStringPieceWithZero_;
}
- (void) setHasStringPieceWithZero:(BOOL) _value_ {
  hasStringPieceWithZero_ = !!_value_;
}
@synthesize stringPieceWithZero;
- (BOOL) hasCordWithZero {
  return !!hasCordWithZero_;
}
- (void) setHasCordWithZero:(BOOL) _value_ {
  hasCordWithZero_ = !!_value_;
}
@synthesize cordWithZero;
- (BOOL) hasReplacementString {
  return !!hasReplacementString_;
}
- (void) setHasReplacementString:(BOOL) _value_ {
  hasReplacementString_ = !!_value_;
}
@synthesize replacementString;
- (instancetype) init {
  if ((self = [super init])) {
    self.escapedBytes = [NSData dataWithBytes:"\000\001\007\010\014\n\r\t\013\\\'\"\376" length:13];
    self.largeUint32 = -1;
    self.largeUint64 = -1L;
    self.smallInt32 = -2147483647;
    self.smallInt64 = -9223372036854775807L;
    self.reallySmallInt32 = -2147483648;
    self.reallySmallInt64 = -9223372036854775808L;
    self.utf8String = [NSString stringWithUTF8String:"\341\210\264"];
    self.zeroFloat = 0;
    self.oneFloat = 1;
    self.smallFloat = 1.5;
    self.negativeOneFloat = -1;
    self.negativeFloat = -1.5;
    self.largeFloat = 2e+08;
    self.smallNegativeFloat = -8e-28;
    self.infDouble = HUGE_VAL;
    self.negInfDouble = -HUGE_VAL;
    self.nanDouble = NAN;
    self.infFloat = HUGE_VALF;
    self.negInfFloat = -HUGE_VALF;
    self.nanFloat = NAN;
    self.cppTrigraph = @"\? \? \?\? \?\? \?\?\? \?\?/ \?\?-";
    self.stringWithZero = @"hel\000lo";
    self.bytesWithZero = [NSData dataWithBytes:"wor\000ld" length:6];
    self.stringPieceWithZero = @"ab\000c";
    self.cordWithZero = @"12\0003";
    self.replacementString = @"${unknown}";
  }
  return self;
}
static TestExtremeDefaultValues* defaultTestExtremeDefaultValuesInstance = nil;
+ (void) initialize {
  if (self == [TestExtremeDefaultValues class]) {
    defaultTestExtremeDefaultValuesInstance = [[TestExtremeDefaultValues alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestExtremeDefaultValuesInstance;
}
- (instancetype) defaultInstance {
  return defaultTestExtremeDefaultValuesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEscapedBytes) {
    [output writeData:1 value:self.escapedBytes];
  }
  if (self.hasLargeUint32) {
    [output writeUInt32:2 value:self.largeUint32];
  }
  if (self.hasLargeUint64) {
    [output writeUInt64:3 value:self.largeUint64];
  }
  if (self.hasSmallInt32) {
    [output writeInt32:4 value:self.smallInt32];
  }
  if (self.hasSmallInt64) {
    [output writeInt64:5 value:self.smallInt64];
  }
  if (self.hasUtf8String) {
    [output writeString:6 value:self.utf8String];
  }
  if (self.hasZeroFloat) {
    [output writeFloat:7 value:self.zeroFloat];
  }
  if (self.hasOneFloat) {
    [output writeFloat:8 value:self.oneFloat];
  }
  if (self.hasSmallFloat) {
    [output writeFloat:9 value:self.smallFloat];
  }
  if (self.hasNegativeOneFloat) {
    [output writeFloat:10 value:self.negativeOneFloat];
  }
  if (self.hasNegativeFloat) {
    [output writeFloat:11 value:self.negativeFloat];
  }
  if (self.hasLargeFloat) {
    [output writeFloat:12 value:self.largeFloat];
  }
  if (self.hasSmallNegativeFloat) {
    [output writeFloat:13 value:self.smallNegativeFloat];
  }
  if (self.hasInfDouble) {
    [output writeDouble:14 value:self.infDouble];
  }
  if (self.hasNegInfDouble) {
    [output writeDouble:15 value:self.negInfDouble];
  }
  if (self.hasNanDouble) {
    [output writeDouble:16 value:self.nanDouble];
  }
  if (self.hasInfFloat) {
    [output writeFloat:17 value:self.infFloat];
  }
  if (self.hasNegInfFloat) {
    [output writeFloat:18 value:self.negInfFloat];
  }
  if (self.hasNanFloat) {
    [output writeFloat:19 value:self.nanFloat];
  }
  if (self.hasCppTrigraph) {
    [output writeString:20 value:self.cppTrigraph];
  }
  if (self.hasReallySmallInt32) {
    [output writeInt32:21 value:self.reallySmallInt32];
  }
  if (self.hasReallySmallInt64) {
    [output writeInt64:22 value:self.reallySmallInt64];
  }
  if (self.hasStringWithZero) {
    [output writeString:23 value:self.stringWithZero];
  }
  if (self.hasBytesWithZero) {
    [output writeData:24 value:self.bytesWithZero];
  }
  if (self.hasStringPieceWithZero) {
    [output writeString:25 value:self.stringPieceWithZero];
  }
  if (self.hasCordWithZero) {
    [output writeString:26 value:self.cordWithZero];
  }
  if (self.hasReplacementString) {
    [output writeString:27 value:self.replacementString];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEscapedBytes) {
    size_ += computeDataSize(1, self.escapedBytes);
  }
  if (self.hasLargeUint32) {
    size_ += computeUInt32Size(2, self.largeUint32);
  }
  if (self.hasLargeUint64) {
    size_ += computeUInt64Size(3, self.largeUint64);
  }
  if (self.hasSmallInt32) {
    size_ += computeInt32Size(4, self.smallInt32);
  }
  if (self.hasSmallInt64) {
    size_ += computeInt64Size(5, self.smallInt64);
  }
  if (self.hasUtf8String) {
    size_ += computeStringSize(6, self.utf8String);
  }
  if (self.hasZeroFloat) {
    size_ += computeFloatSize(7, self.zeroFloat);
  }
  if (self.hasOneFloat) {
    size_ += computeFloatSize(8, self.oneFloat);
  }
  if (self.hasSmallFloat) {
    size_ += computeFloatSize(9, self.smallFloat);
  }
  if (self.hasNegativeOneFloat) {
    size_ += computeFloatSize(10, self.negativeOneFloat);
  }
  if (self.hasNegativeFloat) {
    size_ += computeFloatSize(11, self.negativeFloat);
  }
  if (self.hasLargeFloat) {
    size_ += computeFloatSize(12, self.largeFloat);
  }
  if (self.hasSmallNegativeFloat) {
    size_ += computeFloatSize(13, self.smallNegativeFloat);
  }
  if (self.hasInfDouble) {
    size_ += computeDoubleSize(14, self.infDouble);
  }
  if (self.hasNegInfDouble) {
    size_ += computeDoubleSize(15, self.negInfDouble);
  }
  if (self.hasNanDouble) {
    size_ += computeDoubleSize(16, self.nanDouble);
  }
  if (self.hasInfFloat) {
    size_ += computeFloatSize(17, self.infFloat);
  }
  if (self.hasNegInfFloat) {
    size_ += computeFloatSize(18, self.negInfFloat);
  }
  if (self.hasNanFloat) {
    size_ += computeFloatSize(19, self.nanFloat);
  }
  if (self.hasCppTrigraph) {
    size_ += computeStringSize(20, self.cppTrigraph);
  }
  if (self.hasReallySmallInt32) {
    size_ += computeInt32Size(21, self.reallySmallInt32);
  }
  if (self.hasReallySmallInt64) {
    size_ += computeInt64Size(22, self.reallySmallInt64);
  }
  if (self.hasStringWithZero) {
    size_ += computeStringSize(23, self.stringWithZero);
  }
  if (self.hasBytesWithZero) {
    size_ += computeDataSize(24, self.bytesWithZero);
  }
  if (self.hasStringPieceWithZero) {
    size_ += computeStringSize(25, self.stringPieceWithZero);
  }
  if (self.hasCordWithZero) {
    size_ += computeStringSize(26, self.cordWithZero);
  }
  if (self.hasReplacementString) {
    size_ += computeStringSize(27, self.replacementString);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestExtremeDefaultValues*) parseFromData:(NSData*) data {
  return (TestExtremeDefaultValues*)[[[TestExtremeDefaultValues builder] mergeFromData:data] build];
}
+ (TestExtremeDefaultValues*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestExtremeDefaultValues*)[[[TestExtremeDefaultValues builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestExtremeDefaultValues*) parseFromInputStream:(NSInputStream*) input {
  return (TestExtremeDefaultValues*)[[[TestExtremeDefaultValues builder] mergeFromInputStream:input] build];
}
+ (TestExtremeDefaultValues*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestExtremeDefaultValues*)[[[TestExtremeDefaultValues builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestExtremeDefaultValues*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestExtremeDefaultValues*)[[[TestExtremeDefaultValues builder] mergeFromCodedInputStream:input] build];
}
+ (TestExtremeDefaultValues*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestExtremeDefaultValues*)[[[TestExtremeDefaultValues builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestExtremeDefaultValuesBuilder*) builder {
  return [[TestExtremeDefaultValuesBuilder alloc] init];
}
+ (TestExtremeDefaultValuesBuilder*) builderWithPrototype:(TestExtremeDefaultValues*) prototype {
  return [[TestExtremeDefaultValues builder] mergeFrom:prototype];
}
- (TestExtremeDefaultValuesBuilder*) builder {
  return [TestExtremeDefaultValues builder];
}
- (TestExtremeDefaultValuesBuilder*) toBuilder {
  return [TestExtremeDefaultValues builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEscapedBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"escapedBytes", self.escapedBytes];
  }
  if (self.hasLargeUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"largeUint32", [NSNumber numberWithInteger:self.largeUint32]];
  }
  if (self.hasLargeUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"largeUint64", [NSNumber numberWithLongLong:self.largeUint64]];
  }
  if (self.hasSmallInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallInt32", [NSNumber numberWithInteger:self.smallInt32]];
  }
  if (self.hasSmallInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallInt64", [NSNumber numberWithLongLong:self.smallInt64]];
  }
  if (self.hasUtf8String) {
    [output appendFormat:@"%@%@: %@\n", indent, @"utf8String", self.utf8String];
  }
  if (self.hasZeroFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zeroFloat", [NSNumber numberWithFloat:self.zeroFloat]];
  }
  if (self.hasOneFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneFloat", [NSNumber numberWithFloat:self.oneFloat]];
  }
  if (self.hasSmallFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallFloat", [NSNumber numberWithFloat:self.smallFloat]];
  }
  if (self.hasNegativeOneFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negativeOneFloat", [NSNumber numberWithFloat:self.negativeOneFloat]];
  }
  if (self.hasNegativeFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negativeFloat", [NSNumber numberWithFloat:self.negativeFloat]];
  }
  if (self.hasLargeFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"largeFloat", [NSNumber numberWithFloat:self.largeFloat]];
  }
  if (self.hasSmallNegativeFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallNegativeFloat", [NSNumber numberWithFloat:self.smallNegativeFloat]];
  }
  if (self.hasInfDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"infDouble", [NSNumber numberWithDouble:self.infDouble]];
  }
  if (self.hasNegInfDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negInfDouble", [NSNumber numberWithDouble:self.negInfDouble]];
  }
  if (self.hasNanDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nanDouble", [NSNumber numberWithDouble:self.nanDouble]];
  }
  if (self.hasInfFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"infFloat", [NSNumber numberWithFloat:self.infFloat]];
  }
  if (self.hasNegInfFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negInfFloat", [NSNumber numberWithFloat:self.negInfFloat]];
  }
  if (self.hasNanFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nanFloat", [NSNumber numberWithFloat:self.nanFloat]];
  }
  if (self.hasCppTrigraph) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cppTrigraph", self.cppTrigraph];
  }
  if (self.hasReallySmallInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reallySmallInt32", [NSNumber numberWithInteger:self.reallySmallInt32]];
  }
  if (self.hasReallySmallInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reallySmallInt64", [NSNumber numberWithLongLong:self.reallySmallInt64]];
  }
  if (self.hasStringWithZero) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stringWithZero", self.stringWithZero];
  }
  if (self.hasBytesWithZero) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesWithZero", self.bytesWithZero];
  }
  if (self.hasStringPieceWithZero) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stringPieceWithZero", self.stringPieceWithZero];
  }
  if (self.hasCordWithZero) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cordWithZero", self.cordWithZero];
  }
  if (self.hasReplacementString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replacementString", self.replacementString];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEscapedBytes) {
    [dictionary setObject: self.escapedBytes forKey: @"escapedBytes"];
  }
  if (self.hasLargeUint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.largeUint32] forKey: @"largeUint32"];
  }
  if (self.hasLargeUint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.largeUint64] forKey: @"largeUint64"];
  }
  if (self.hasSmallInt32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.smallInt32] forKey: @"smallInt32"];
  }
  if (self.hasSmallInt64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.smallInt64] forKey: @"smallInt64"];
  }
  if (self.hasUtf8String) {
    [dictionary setObject: self.utf8String forKey: @"utf8String"];
  }
  if (self.hasZeroFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.zeroFloat] forKey: @"zeroFloat"];
  }
  if (self.hasOneFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.oneFloat] forKey: @"oneFloat"];
  }
  if (self.hasSmallFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.smallFloat] forKey: @"smallFloat"];
  }
  if (self.hasNegativeOneFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.negativeOneFloat] forKey: @"negativeOneFloat"];
  }
  if (self.hasNegativeFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.negativeFloat] forKey: @"negativeFloat"];
  }
  if (self.hasLargeFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.largeFloat] forKey: @"largeFloat"];
  }
  if (self.hasSmallNegativeFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.smallNegativeFloat] forKey: @"smallNegativeFloat"];
  }
  if (self.hasInfDouble) {
    [dictionary setObject: [NSNumber numberWithDouble:self.infDouble] forKey: @"infDouble"];
  }
  if (self.hasNegInfDouble) {
    [dictionary setObject: [NSNumber numberWithDouble:self.negInfDouble] forKey: @"negInfDouble"];
  }
  if (self.hasNanDouble) {
    [dictionary setObject: [NSNumber numberWithDouble:self.nanDouble] forKey: @"nanDouble"];
  }
  if (self.hasInfFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.infFloat] forKey: @"infFloat"];
  }
  if (self.hasNegInfFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.negInfFloat] forKey: @"negInfFloat"];
  }
  if (self.hasNanFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.nanFloat] forKey: @"nanFloat"];
  }
  if (self.hasCppTrigraph) {
    [dictionary setObject: self.cppTrigraph forKey: @"cppTrigraph"];
  }
  if (self.hasReallySmallInt32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.reallySmallInt32] forKey: @"reallySmallInt32"];
  }
  if (self.hasReallySmallInt64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.reallySmallInt64] forKey: @"reallySmallInt64"];
  }
  if (self.hasStringWithZero) {
    [dictionary setObject: self.stringWithZero forKey: @"stringWithZero"];
  }
  if (self.hasBytesWithZero) {
    [dictionary setObject: self.bytesWithZero forKey: @"bytesWithZero"];
  }
  if (self.hasStringPieceWithZero) {
    [dictionary setObject: self.stringPieceWithZero forKey: @"stringPieceWithZero"];
  }
  if (self.hasCordWithZero) {
    [dictionary setObject: self.cordWithZero forKey: @"cordWithZero"];
  }
  if (self.hasReplacementString) {
    [dictionary setObject: self.replacementString forKey: @"replacementString"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestExtremeDefaultValues class]]) {
    return NO;
  }
  TestExtremeDefaultValues *otherMessage = other;
  return
      self.hasEscapedBytes == otherMessage.hasEscapedBytes &&
      (!self.hasEscapedBytes || [self.escapedBytes isEqual:otherMessage.escapedBytes]) &&
      self.hasLargeUint32 == otherMessage.hasLargeUint32 &&
      (!self.hasLargeUint32 || self.largeUint32 == otherMessage.largeUint32) &&
      self.hasLargeUint64 == otherMessage.hasLargeUint64 &&
      (!self.hasLargeUint64 || self.largeUint64 == otherMessage.largeUint64) &&
      self.hasSmallInt32 == otherMessage.hasSmallInt32 &&
      (!self.hasSmallInt32 || self.smallInt32 == otherMessage.smallInt32) &&
      self.hasSmallInt64 == otherMessage.hasSmallInt64 &&
      (!self.hasSmallInt64 || self.smallInt64 == otherMessage.smallInt64) &&
      self.hasUtf8String == otherMessage.hasUtf8String &&
      (!self.hasUtf8String || [self.utf8String isEqual:otherMessage.utf8String]) &&
      self.hasZeroFloat == otherMessage.hasZeroFloat &&
      (!self.hasZeroFloat || self.zeroFloat == otherMessage.zeroFloat) &&
      self.hasOneFloat == otherMessage.hasOneFloat &&
      (!self.hasOneFloat || self.oneFloat == otherMessage.oneFloat) &&
      self.hasSmallFloat == otherMessage.hasSmallFloat &&
      (!self.hasSmallFloat || self.smallFloat == otherMessage.smallFloat) &&
      self.hasNegativeOneFloat == otherMessage.hasNegativeOneFloat &&
      (!self.hasNegativeOneFloat || self.negativeOneFloat == otherMessage.negativeOneFloat) &&
      self.hasNegativeFloat == otherMessage.hasNegativeFloat &&
      (!self.hasNegativeFloat || self.negativeFloat == otherMessage.negativeFloat) &&
      self.hasLargeFloat == otherMessage.hasLargeFloat &&
      (!self.hasLargeFloat || self.largeFloat == otherMessage.largeFloat) &&
      self.hasSmallNegativeFloat == otherMessage.hasSmallNegativeFloat &&
      (!self.hasSmallNegativeFloat || self.smallNegativeFloat == otherMessage.smallNegativeFloat) &&
      self.hasInfDouble == otherMessage.hasInfDouble &&
      (!self.hasInfDouble || self.infDouble == otherMessage.infDouble) &&
      self.hasNegInfDouble == otherMessage.hasNegInfDouble &&
      (!self.hasNegInfDouble || self.negInfDouble == otherMessage.negInfDouble) &&
      self.hasNanDouble == otherMessage.hasNanDouble &&
      (!self.hasNanDouble || self.nanDouble == otherMessage.nanDouble) &&
      self.hasInfFloat == otherMessage.hasInfFloat &&
      (!self.hasInfFloat || self.infFloat == otherMessage.infFloat) &&
      self.hasNegInfFloat == otherMessage.hasNegInfFloat &&
      (!self.hasNegInfFloat || self.negInfFloat == otherMessage.negInfFloat) &&
      self.hasNanFloat == otherMessage.hasNanFloat &&
      (!self.hasNanFloat || self.nanFloat == otherMessage.nanFloat) &&
      self.hasCppTrigraph == otherMessage.hasCppTrigraph &&
      (!self.hasCppTrigraph || [self.cppTrigraph isEqual:otherMessage.cppTrigraph]) &&
      self.hasReallySmallInt32 == otherMessage.hasReallySmallInt32 &&
      (!self.hasReallySmallInt32 || self.reallySmallInt32 == otherMessage.reallySmallInt32) &&
      self.hasReallySmallInt64 == otherMessage.hasReallySmallInt64 &&
      (!self.hasReallySmallInt64 || self.reallySmallInt64 == otherMessage.reallySmallInt64) &&
      self.hasStringWithZero == otherMessage.hasStringWithZero &&
      (!self.hasStringWithZero || [self.stringWithZero isEqual:otherMessage.stringWithZero]) &&
      self.hasBytesWithZero == otherMessage.hasBytesWithZero &&
      (!self.hasBytesWithZero || [self.bytesWithZero isEqual:otherMessage.bytesWithZero]) &&
      self.hasStringPieceWithZero == otherMessage.hasStringPieceWithZero &&
      (!self.hasStringPieceWithZero || [self.stringPieceWithZero isEqual:otherMessage.stringPieceWithZero]) &&
      self.hasCordWithZero == otherMessage.hasCordWithZero &&
      (!self.hasCordWithZero || [self.cordWithZero isEqual:otherMessage.cordWithZero]) &&
      self.hasReplacementString == otherMessage.hasReplacementString &&
      (!self.hasReplacementString || [self.replacementString isEqual:otherMessage.replacementString]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEscapedBytes) {
    hashCode = hashCode * 31 + [self.escapedBytes hash];
  }
  if (self.hasLargeUint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.largeUint32] hash];
  }
  if (self.hasLargeUint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.largeUint64] hash];
  }
  if (self.hasSmallInt32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.smallInt32] hash];
  }
  if (self.hasSmallInt64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.smallInt64] hash];
  }
  if (self.hasUtf8String) {
    hashCode = hashCode * 31 + [self.utf8String hash];
  }
  if (self.hasZeroFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.zeroFloat] hash];
  }
  if (self.hasOneFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.oneFloat] hash];
  }
  if (self.hasSmallFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.smallFloat] hash];
  }
  if (self.hasNegativeOneFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.negativeOneFloat] hash];
  }
  if (self.hasNegativeFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.negativeFloat] hash];
  }
  if (self.hasLargeFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.largeFloat] hash];
  }
  if (self.hasSmallNegativeFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.smallNegativeFloat] hash];
  }
  if (self.hasInfDouble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.infDouble] hash];
  }
  if (self.hasNegInfDouble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.negInfDouble] hash];
  }
  if (self.hasNanDouble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.nanDouble] hash];
  }
  if (self.hasInfFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.infFloat] hash];
  }
  if (self.hasNegInfFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.negInfFloat] hash];
  }
  if (self.hasNanFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.nanFloat] hash];
  }
  if (self.hasCppTrigraph) {
    hashCode = hashCode * 31 + [self.cppTrigraph hash];
  }
  if (self.hasReallySmallInt32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.reallySmallInt32] hash];
  }
  if (self.hasReallySmallInt64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.reallySmallInt64] hash];
  }
  if (self.hasStringWithZero) {
    hashCode = hashCode * 31 + [self.stringWithZero hash];
  }
  if (self.hasBytesWithZero) {
    hashCode = hashCode * 31 + [self.bytesWithZero hash];
  }
  if (self.hasStringPieceWithZero) {
    hashCode = hashCode * 31 + [self.stringPieceWithZero hash];
  }
  if (self.hasCordWithZero) {
    hashCode = hashCode * 31 + [self.cordWithZero hash];
  }
  if (self.hasReplacementString) {
    hashCode = hashCode * 31 + [self.replacementString hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestExtremeDefaultValuesBuilder()
@property (strong) TestExtremeDefaultValues* resultTestExtremeDefaultValues;
@end

@implementation TestExtremeDefaultValuesBuilder
@synthesize resultTestExtremeDefaultValues;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestExtremeDefaultValues = [[TestExtremeDefaultValues alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestExtremeDefaultValues;
}
- (TestExtremeDefaultValuesBuilder*) clear {
  self.resultTestExtremeDefaultValues = [[TestExtremeDefaultValues alloc] init];
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clone {
  return [TestExtremeDefaultValues builderWithPrototype:resultTestExtremeDefaultValues];
}
- (TestExtremeDefaultValues*) defaultInstance {
  return [TestExtremeDefaultValues defaultInstance];
}
- (TestExtremeDefaultValues*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestExtremeDefaultValues*) buildPartial {
  TestExtremeDefaultValues* returnMe = resultTestExtremeDefaultValues;
  self.resultTestExtremeDefaultValues = nil;
  return returnMe;
}
- (TestExtremeDefaultValuesBuilder*) mergeFrom:(TestExtremeDefaultValues*) other {
  if (other == [TestExtremeDefaultValues defaultInstance]) {
    return self;
  }
  if (other.hasEscapedBytes) {
    [self setEscapedBytes:other.escapedBytes];
  }
  if (other.hasLargeUint32) {
    [self setLargeUint32:other.largeUint32];
  }
  if (other.hasLargeUint64) {
    [self setLargeUint64:other.largeUint64];
  }
  if (other.hasSmallInt32) {
    [self setSmallInt32:other.smallInt32];
  }
  if (other.hasSmallInt64) {
    [self setSmallInt64:other.smallInt64];
  }
  if (other.hasReallySmallInt32) {
    [self setReallySmallInt32:other.reallySmallInt32];
  }
  if (other.hasReallySmallInt64) {
    [self setReallySmallInt64:other.reallySmallInt64];
  }
  if (other.hasUtf8String) {
    [self setUtf8String:other.utf8String];
  }
  if (other.hasZeroFloat) {
    [self setZeroFloat:other.zeroFloat];
  }
  if (other.hasOneFloat) {
    [self setOneFloat:other.oneFloat];
  }
  if (other.hasSmallFloat) {
    [self setSmallFloat:other.smallFloat];
  }
  if (other.hasNegativeOneFloat) {
    [self setNegativeOneFloat:other.negativeOneFloat];
  }
  if (other.hasNegativeFloat) {
    [self setNegativeFloat:other.negativeFloat];
  }
  if (other.hasLargeFloat) {
    [self setLargeFloat:other.largeFloat];
  }
  if (other.hasSmallNegativeFloat) {
    [self setSmallNegativeFloat:other.smallNegativeFloat];
  }
  if (other.hasInfDouble) {
    [self setInfDouble:other.infDouble];
  }
  if (other.hasNegInfDouble) {
    [self setNegInfDouble:other.negInfDouble];
  }
  if (other.hasNanDouble) {
    [self setNanDouble:other.nanDouble];
  }
  if (other.hasInfFloat) {
    [self setInfFloat:other.infFloat];
  }
  if (other.hasNegInfFloat) {
    [self setNegInfFloat:other.negInfFloat];
  }
  if (other.hasNanFloat) {
    [self setNanFloat:other.nanFloat];
  }
  if (other.hasCppTrigraph) {
    [self setCppTrigraph:other.cppTrigraph];
  }
  if (other.hasStringWithZero) {
    [self setStringWithZero:other.stringWithZero];
  }
  if (other.hasBytesWithZero) {
    [self setBytesWithZero:other.bytesWithZero];
  }
  if (other.hasStringPieceWithZero) {
    [self setStringPieceWithZero:other.stringPieceWithZero];
  }
  if (other.hasCordWithZero) {
    [self setCordWithZero:other.cordWithZero];
  }
  if (other.hasReplacementString) {
    [self setReplacementString:other.replacementString];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestExtremeDefaultValuesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestExtremeDefaultValuesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEscapedBytes:[input readData]];
        break;
      }
      case 16: {
        [self setLargeUint32:[input readUInt32]];
        break;
      }
      case 24: {
        [self setLargeUint64:[input readUInt64]];
        break;
      }
      case 32: {
        [self setSmallInt32:[input readInt32]];
        break;
      }
      case 40: {
        [self setSmallInt64:[input readInt64]];
        break;
      }
      case 50: {
        [self setUtf8String:[input readString]];
        break;
      }
      case 61: {
        [self setZeroFloat:[input readFloat]];
        break;
      }
      case 69: {
        [self setOneFloat:[input readFloat]];
        break;
      }
      case 77: {
        [self setSmallFloat:[input readFloat]];
        break;
      }
      case 85: {
        [self setNegativeOneFloat:[input readFloat]];
        break;
      }
      case 93: {
        [self setNegativeFloat:[input readFloat]];
        break;
      }
      case 101: {
        [self setLargeFloat:[input readFloat]];
        break;
      }
      case 109: {
        [self setSmallNegativeFloat:[input readFloat]];
        break;
      }
      case 113: {
        [self setInfDouble:[input readDouble]];
        break;
      }
      case 121: {
        [self setNegInfDouble:[input readDouble]];
        break;
      }
      case 129: {
        [self setNanDouble:[input readDouble]];
        break;
      }
      case 141: {
        [self setInfFloat:[input readFloat]];
        break;
      }
      case 149: {
        [self setNegInfFloat:[input readFloat]];
        break;
      }
      case 157: {
        [self setNanFloat:[input readFloat]];
        break;
      }
      case 162: {
        [self setCppTrigraph:[input readString]];
        break;
      }
      case 168: {
        [self setReallySmallInt32:[input readInt32]];
        break;
      }
      case 176: {
        [self setReallySmallInt64:[input readInt64]];
        break;
      }
      case 186: {
        [self setStringWithZero:[input readString]];
        break;
      }
      case 194: {
        [self setBytesWithZero:[input readData]];
        break;
      }
      case 202: {
        [self setStringPieceWithZero:[input readString]];
        break;
      }
      case 210: {
        [self setCordWithZero:[input readString]];
        break;
      }
      case 218: {
        [self setReplacementString:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasEscapedBytes {
  return resultTestExtremeDefaultValues.hasEscapedBytes;
}
- (NSData*) escapedBytes {
  return resultTestExtremeDefaultValues.escapedBytes;
}
- (TestExtremeDefaultValuesBuilder*) setEscapedBytes:(NSData*) value {
  resultTestExtremeDefaultValues.hasEscapedBytes = YES;
  resultTestExtremeDefaultValues.escapedBytes = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearEscapedBytes {
  resultTestExtremeDefaultValues.hasEscapedBytes = NO;
  resultTestExtremeDefaultValues.escapedBytes = [NSData dataWithBytes:"\000\001\007\010\014\n\r\t\013\\\'\"\376" length:13];
  return self;
}
- (BOOL) hasLargeUint32 {
  return resultTestExtremeDefaultValues.hasLargeUint32;
}
- (UInt32) largeUint32 {
  return resultTestExtremeDefaultValues.largeUint32;
}
- (TestExtremeDefaultValuesBuilder*) setLargeUint32:(UInt32) value {
  resultTestExtremeDefaultValues.hasLargeUint32 = YES;
  resultTestExtremeDefaultValues.largeUint32 = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearLargeUint32 {
  resultTestExtremeDefaultValues.hasLargeUint32 = NO;
  resultTestExtremeDefaultValues.largeUint32 = -1;
  return self;
}
- (BOOL) hasLargeUint64 {
  return resultTestExtremeDefaultValues.hasLargeUint64;
}
- (UInt64) largeUint64 {
  return resultTestExtremeDefaultValues.largeUint64;
}
- (TestExtremeDefaultValuesBuilder*) setLargeUint64:(UInt64) value {
  resultTestExtremeDefaultValues.hasLargeUint64 = YES;
  resultTestExtremeDefaultValues.largeUint64 = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearLargeUint64 {
  resultTestExtremeDefaultValues.hasLargeUint64 = NO;
  resultTestExtremeDefaultValues.largeUint64 = -1L;
  return self;
}
- (BOOL) hasSmallInt32 {
  return resultTestExtremeDefaultValues.hasSmallInt32;
}
- (SInt32) smallInt32 {
  return resultTestExtremeDefaultValues.smallInt32;
}
- (TestExtremeDefaultValuesBuilder*) setSmallInt32:(SInt32) value {
  resultTestExtremeDefaultValues.hasSmallInt32 = YES;
  resultTestExtremeDefaultValues.smallInt32 = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearSmallInt32 {
  resultTestExtremeDefaultValues.hasSmallInt32 = NO;
  resultTestExtremeDefaultValues.smallInt32 = -2147483647;
  return self;
}
- (BOOL) hasSmallInt64 {
  return resultTestExtremeDefaultValues.hasSmallInt64;
}
- (SInt64) smallInt64 {
  return resultTestExtremeDefaultValues.smallInt64;
}
- (TestExtremeDefaultValuesBuilder*) setSmallInt64:(SInt64) value {
  resultTestExtremeDefaultValues.hasSmallInt64 = YES;
  resultTestExtremeDefaultValues.smallInt64 = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearSmallInt64 {
  resultTestExtremeDefaultValues.hasSmallInt64 = NO;
  resultTestExtremeDefaultValues.smallInt64 = -9223372036854775807L;
  return self;
}
- (BOOL) hasReallySmallInt32 {
  return resultTestExtremeDefaultValues.hasReallySmallInt32;
}
- (SInt32) reallySmallInt32 {
  return resultTestExtremeDefaultValues.reallySmallInt32;
}
- (TestExtremeDefaultValuesBuilder*) setReallySmallInt32:(SInt32) value {
  resultTestExtremeDefaultValues.hasReallySmallInt32 = YES;
  resultTestExtremeDefaultValues.reallySmallInt32 = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearReallySmallInt32 {
  resultTestExtremeDefaultValues.hasReallySmallInt32 = NO;
  resultTestExtremeDefaultValues.reallySmallInt32 = -2147483648;
  return self;
}
- (BOOL) hasReallySmallInt64 {
  return resultTestExtremeDefaultValues.hasReallySmallInt64;
}
- (SInt64) reallySmallInt64 {
  return resultTestExtremeDefaultValues.reallySmallInt64;
}
- (TestExtremeDefaultValuesBuilder*) setReallySmallInt64:(SInt64) value {
  resultTestExtremeDefaultValues.hasReallySmallInt64 = YES;
  resultTestExtremeDefaultValues.reallySmallInt64 = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearReallySmallInt64 {
  resultTestExtremeDefaultValues.hasReallySmallInt64 = NO;
  resultTestExtremeDefaultValues.reallySmallInt64 = -9223372036854775808L;
  return self;
}
- (BOOL) hasUtf8String {
  return resultTestExtremeDefaultValues.hasUtf8String;
}
- (NSString*) utf8String {
  return resultTestExtremeDefaultValues.utf8String;
}
- (TestExtremeDefaultValuesBuilder*) setUtf8String:(NSString*) value {
  resultTestExtremeDefaultValues.hasUtf8String = YES;
  resultTestExtremeDefaultValues.utf8String = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearUtf8String {
  resultTestExtremeDefaultValues.hasUtf8String = NO;
  resultTestExtremeDefaultValues.utf8String = [NSString stringWithUTF8String:"\341\210\264"];
  return self;
}
- (BOOL) hasZeroFloat {
  return resultTestExtremeDefaultValues.hasZeroFloat;
}
- (Float32) zeroFloat {
  return resultTestExtremeDefaultValues.zeroFloat;
}
- (TestExtremeDefaultValuesBuilder*) setZeroFloat:(Float32) value {
  resultTestExtremeDefaultValues.hasZeroFloat = YES;
  resultTestExtremeDefaultValues.zeroFloat = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearZeroFloat {
  resultTestExtremeDefaultValues.hasZeroFloat = NO;
  resultTestExtremeDefaultValues.zeroFloat = 0;
  return self;
}
- (BOOL) hasOneFloat {
  return resultTestExtremeDefaultValues.hasOneFloat;
}
- (Float32) oneFloat {
  return resultTestExtremeDefaultValues.oneFloat;
}
- (TestExtremeDefaultValuesBuilder*) setOneFloat:(Float32) value {
  resultTestExtremeDefaultValues.hasOneFloat = YES;
  resultTestExtremeDefaultValues.oneFloat = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearOneFloat {
  resultTestExtremeDefaultValues.hasOneFloat = NO;
  resultTestExtremeDefaultValues.oneFloat = 1;
  return self;
}
- (BOOL) hasSmallFloat {
  return resultTestExtremeDefaultValues.hasSmallFloat;
}
- (Float32) smallFloat {
  return resultTestExtremeDefaultValues.smallFloat;
}
- (TestExtremeDefaultValuesBuilder*) setSmallFloat:(Float32) value {
  resultTestExtremeDefaultValues.hasSmallFloat = YES;
  resultTestExtremeDefaultValues.smallFloat = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearSmallFloat {
  resultTestExtremeDefaultValues.hasSmallFloat = NO;
  resultTestExtremeDefaultValues.smallFloat = 1.5;
  return self;
}
- (BOOL) hasNegativeOneFloat {
  return resultTestExtremeDefaultValues.hasNegativeOneFloat;
}
- (Float32) negativeOneFloat {
  return resultTestExtremeDefaultValues.negativeOneFloat;
}
- (TestExtremeDefaultValuesBuilder*) setNegativeOneFloat:(Float32) value {
  resultTestExtremeDefaultValues.hasNegativeOneFloat = YES;
  resultTestExtremeDefaultValues.negativeOneFloat = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearNegativeOneFloat {
  resultTestExtremeDefaultValues.hasNegativeOneFloat = NO;
  resultTestExtremeDefaultValues.negativeOneFloat = -1;
  return self;
}
- (BOOL) hasNegativeFloat {
  return resultTestExtremeDefaultValues.hasNegativeFloat;
}
- (Float32) negativeFloat {
  return resultTestExtremeDefaultValues.negativeFloat;
}
- (TestExtremeDefaultValuesBuilder*) setNegativeFloat:(Float32) value {
  resultTestExtremeDefaultValues.hasNegativeFloat = YES;
  resultTestExtremeDefaultValues.negativeFloat = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearNegativeFloat {
  resultTestExtremeDefaultValues.hasNegativeFloat = NO;
  resultTestExtremeDefaultValues.negativeFloat = -1.5;
  return self;
}
- (BOOL) hasLargeFloat {
  return resultTestExtremeDefaultValues.hasLargeFloat;
}
- (Float32) largeFloat {
  return resultTestExtremeDefaultValues.largeFloat;
}
- (TestExtremeDefaultValuesBuilder*) setLargeFloat:(Float32) value {
  resultTestExtremeDefaultValues.hasLargeFloat = YES;
  resultTestExtremeDefaultValues.largeFloat = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearLargeFloat {
  resultTestExtremeDefaultValues.hasLargeFloat = NO;
  resultTestExtremeDefaultValues.largeFloat = 2e+08;
  return self;
}
- (BOOL) hasSmallNegativeFloat {
  return resultTestExtremeDefaultValues.hasSmallNegativeFloat;
}
- (Float32) smallNegativeFloat {
  return resultTestExtremeDefaultValues.smallNegativeFloat;
}
- (TestExtremeDefaultValuesBuilder*) setSmallNegativeFloat:(Float32) value {
  resultTestExtremeDefaultValues.hasSmallNegativeFloat = YES;
  resultTestExtremeDefaultValues.smallNegativeFloat = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearSmallNegativeFloat {
  resultTestExtremeDefaultValues.hasSmallNegativeFloat = NO;
  resultTestExtremeDefaultValues.smallNegativeFloat = -8e-28;
  return self;
}
- (BOOL) hasInfDouble {
  return resultTestExtremeDefaultValues.hasInfDouble;
}
- (Float64) infDouble {
  return resultTestExtremeDefaultValues.infDouble;
}
- (TestExtremeDefaultValuesBuilder*) setInfDouble:(Float64) value {
  resultTestExtremeDefaultValues.hasInfDouble = YES;
  resultTestExtremeDefaultValues.infDouble = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearInfDouble {
  resultTestExtremeDefaultValues.hasInfDouble = NO;
  resultTestExtremeDefaultValues.infDouble = HUGE_VAL;
  return self;
}
- (BOOL) hasNegInfDouble {
  return resultTestExtremeDefaultValues.hasNegInfDouble;
}
- (Float64) negInfDouble {
  return resultTestExtremeDefaultValues.negInfDouble;
}
- (TestExtremeDefaultValuesBuilder*) setNegInfDouble:(Float64) value {
  resultTestExtremeDefaultValues.hasNegInfDouble = YES;
  resultTestExtremeDefaultValues.negInfDouble = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearNegInfDouble {
  resultTestExtremeDefaultValues.hasNegInfDouble = NO;
  resultTestExtremeDefaultValues.negInfDouble = -HUGE_VAL;
  return self;
}
- (BOOL) hasNanDouble {
  return resultTestExtremeDefaultValues.hasNanDouble;
}
- (Float64) nanDouble {
  return resultTestExtremeDefaultValues.nanDouble;
}
- (TestExtremeDefaultValuesBuilder*) setNanDouble:(Float64) value {
  resultTestExtremeDefaultValues.hasNanDouble = YES;
  resultTestExtremeDefaultValues.nanDouble = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearNanDouble {
  resultTestExtremeDefaultValues.hasNanDouble = NO;
  resultTestExtremeDefaultValues.nanDouble = NAN;
  return self;
}
- (BOOL) hasInfFloat {
  return resultTestExtremeDefaultValues.hasInfFloat;
}
- (Float32) infFloat {
  return resultTestExtremeDefaultValues.infFloat;
}
- (TestExtremeDefaultValuesBuilder*) setInfFloat:(Float32) value {
  resultTestExtremeDefaultValues.hasInfFloat = YES;
  resultTestExtremeDefaultValues.infFloat = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearInfFloat {
  resultTestExtremeDefaultValues.hasInfFloat = NO;
  resultTestExtremeDefaultValues.infFloat = HUGE_VALF;
  return self;
}
- (BOOL) hasNegInfFloat {
  return resultTestExtremeDefaultValues.hasNegInfFloat;
}
- (Float32) negInfFloat {
  return resultTestExtremeDefaultValues.negInfFloat;
}
- (TestExtremeDefaultValuesBuilder*) setNegInfFloat:(Float32) value {
  resultTestExtremeDefaultValues.hasNegInfFloat = YES;
  resultTestExtremeDefaultValues.negInfFloat = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearNegInfFloat {
  resultTestExtremeDefaultValues.hasNegInfFloat = NO;
  resultTestExtremeDefaultValues.negInfFloat = -HUGE_VALF;
  return self;
}
- (BOOL) hasNanFloat {
  return resultTestExtremeDefaultValues.hasNanFloat;
}
- (Float32) nanFloat {
  return resultTestExtremeDefaultValues.nanFloat;
}
- (TestExtremeDefaultValuesBuilder*) setNanFloat:(Float32) value {
  resultTestExtremeDefaultValues.hasNanFloat = YES;
  resultTestExtremeDefaultValues.nanFloat = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearNanFloat {
  resultTestExtremeDefaultValues.hasNanFloat = NO;
  resultTestExtremeDefaultValues.nanFloat = NAN;
  return self;
}
- (BOOL) hasCppTrigraph {
  return resultTestExtremeDefaultValues.hasCppTrigraph;
}
- (NSString*) cppTrigraph {
  return resultTestExtremeDefaultValues.cppTrigraph;
}
- (TestExtremeDefaultValuesBuilder*) setCppTrigraph:(NSString*) value {
  resultTestExtremeDefaultValues.hasCppTrigraph = YES;
  resultTestExtremeDefaultValues.cppTrigraph = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearCppTrigraph {
  resultTestExtremeDefaultValues.hasCppTrigraph = NO;
  resultTestExtremeDefaultValues.cppTrigraph = @"\? \? \?\? \?\? \?\?\? \?\?/ \?\?-";
  return self;
}
- (BOOL) hasStringWithZero {
  return resultTestExtremeDefaultValues.hasStringWithZero;
}
- (NSString*) stringWithZero {
  return resultTestExtremeDefaultValues.stringWithZero;
}
- (TestExtremeDefaultValuesBuilder*) setStringWithZero:(NSString*) value {
  resultTestExtremeDefaultValues.hasStringWithZero = YES;
  resultTestExtremeDefaultValues.stringWithZero = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearStringWithZero {
  resultTestExtremeDefaultValues.hasStringWithZero = NO;
  resultTestExtremeDefaultValues.stringWithZero = @"hel\000lo";
  return self;
}
- (BOOL) hasBytesWithZero {
  return resultTestExtremeDefaultValues.hasBytesWithZero;
}
- (NSData*) bytesWithZero {
  return resultTestExtremeDefaultValues.bytesWithZero;
}
- (TestExtremeDefaultValuesBuilder*) setBytesWithZero:(NSData*) value {
  resultTestExtremeDefaultValues.hasBytesWithZero = YES;
  resultTestExtremeDefaultValues.bytesWithZero = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearBytesWithZero {
  resultTestExtremeDefaultValues.hasBytesWithZero = NO;
  resultTestExtremeDefaultValues.bytesWithZero = [NSData dataWithBytes:"wor\000ld" length:6];
  return self;
}
- (BOOL) hasStringPieceWithZero {
  return resultTestExtremeDefaultValues.hasStringPieceWithZero;
}
- (NSString*) stringPieceWithZero {
  return resultTestExtremeDefaultValues.stringPieceWithZero;
}
- (TestExtremeDefaultValuesBuilder*) setStringPieceWithZero:(NSString*) value {
  resultTestExtremeDefaultValues.hasStringPieceWithZero = YES;
  resultTestExtremeDefaultValues.stringPieceWithZero = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearStringPieceWithZero {
  resultTestExtremeDefaultValues.hasStringPieceWithZero = NO;
  resultTestExtremeDefaultValues.stringPieceWithZero = @"ab\000c";
  return self;
}
- (BOOL) hasCordWithZero {
  return resultTestExtremeDefaultValues.hasCordWithZero;
}
- (NSString*) cordWithZero {
  return resultTestExtremeDefaultValues.cordWithZero;
}
- (TestExtremeDefaultValuesBuilder*) setCordWithZero:(NSString*) value {
  resultTestExtremeDefaultValues.hasCordWithZero = YES;
  resultTestExtremeDefaultValues.cordWithZero = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearCordWithZero {
  resultTestExtremeDefaultValues.hasCordWithZero = NO;
  resultTestExtremeDefaultValues.cordWithZero = @"12\0003";
  return self;
}
- (BOOL) hasReplacementString {
  return resultTestExtremeDefaultValues.hasReplacementString;
}
- (NSString*) replacementString {
  return resultTestExtremeDefaultValues.replacementString;
}
- (TestExtremeDefaultValuesBuilder*) setReplacementString:(NSString*) value {
  resultTestExtremeDefaultValues.hasReplacementString = YES;
  resultTestExtremeDefaultValues.replacementString = value;
  return self;
}
- (TestExtremeDefaultValuesBuilder*) clearReplacementString {
  resultTestExtremeDefaultValues.hasReplacementString = NO;
  resultTestExtremeDefaultValues.replacementString = @"${unknown}";
  return self;
}
@end

@interface SparseEnumMessage ()
@property TestSparseEnum sparseEnum;
@end

@implementation SparseEnumMessage

- (BOOL) hasSparseEnum {
  return !!hasSparseEnum_;
}
- (void) setHasSparseEnum:(BOOL) _value_ {
  hasSparseEnum_ = !!_value_;
}
@synthesize sparseEnum;
- (instancetype) init {
  if ((self = [super init])) {
    self.sparseEnum = TestSparseEnumSparseA;
  }
  return self;
}
static SparseEnumMessage* defaultSparseEnumMessageInstance = nil;
+ (void) initialize {
  if (self == [SparseEnumMessage class]) {
    defaultSparseEnumMessageInstance = [[SparseEnumMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSparseEnumMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultSparseEnumMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSparseEnum) {
    [output writeEnum:1 value:self.sparseEnum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSparseEnum) {
    size_ += computeEnumSize(1, self.sparseEnum);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SparseEnumMessage*) parseFromData:(NSData*) data {
  return (SparseEnumMessage*)[[[SparseEnumMessage builder] mergeFromData:data] build];
}
+ (SparseEnumMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SparseEnumMessage*)[[[SparseEnumMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SparseEnumMessage*) parseFromInputStream:(NSInputStream*) input {
  return (SparseEnumMessage*)[[[SparseEnumMessage builder] mergeFromInputStream:input] build];
}
+ (SparseEnumMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SparseEnumMessage*)[[[SparseEnumMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SparseEnumMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SparseEnumMessage*)[[[SparseEnumMessage builder] mergeFromCodedInputStream:input] build];
}
+ (SparseEnumMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SparseEnumMessage*)[[[SparseEnumMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SparseEnumMessageBuilder*) builder {
  return [[SparseEnumMessageBuilder alloc] init];
}
+ (SparseEnumMessageBuilder*) builderWithPrototype:(SparseEnumMessage*) prototype {
  return [[SparseEnumMessage builder] mergeFrom:prototype];
}
- (SparseEnumMessageBuilder*) builder {
  return [SparseEnumMessage builder];
}
- (SparseEnumMessageBuilder*) toBuilder {
  return [SparseEnumMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSparseEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sparseEnum", NSStringFromTestSparseEnum(self.sparseEnum)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSparseEnum) {
    [dictionary setObject: @(self.sparseEnum) forKey: @"sparseEnum"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SparseEnumMessage class]]) {
    return NO;
  }
  SparseEnumMessage *otherMessage = other;
  return
      self.hasSparseEnum == otherMessage.hasSparseEnum &&
      (!self.hasSparseEnum || self.sparseEnum == otherMessage.sparseEnum) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSparseEnum) {
    hashCode = hashCode * 31 + self.sparseEnum;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SparseEnumMessageBuilder()
@property (strong) SparseEnumMessage* resultSparseEnumMessage;
@end

@implementation SparseEnumMessageBuilder
@synthesize resultSparseEnumMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSparseEnumMessage = [[SparseEnumMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSparseEnumMessage;
}
- (SparseEnumMessageBuilder*) clear {
  self.resultSparseEnumMessage = [[SparseEnumMessage alloc] init];
  return self;
}
- (SparseEnumMessageBuilder*) clone {
  return [SparseEnumMessage builderWithPrototype:resultSparseEnumMessage];
}
- (SparseEnumMessage*) defaultInstance {
  return [SparseEnumMessage defaultInstance];
}
- (SparseEnumMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SparseEnumMessage*) buildPartial {
  SparseEnumMessage* returnMe = resultSparseEnumMessage;
  self.resultSparseEnumMessage = nil;
  return returnMe;
}
- (SparseEnumMessageBuilder*) mergeFrom:(SparseEnumMessage*) other {
  if (other == [SparseEnumMessage defaultInstance]) {
    return self;
  }
  if (other.hasSparseEnum) {
    [self setSparseEnum:other.sparseEnum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SparseEnumMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SparseEnumMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        TestSparseEnum value = (TestSparseEnum)[input readEnum];
        if (TestSparseEnumIsValidValue(value)) {
          [self setSparseEnum:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasSparseEnum {
  return resultSparseEnumMessage.hasSparseEnum;
}
- (TestSparseEnum) sparseEnum {
  return resultSparseEnumMessage.sparseEnum;
}
- (SparseEnumMessageBuilder*) setSparseEnum:(TestSparseEnum) value {
  resultSparseEnumMessage.hasSparseEnum = YES;
  resultSparseEnumMessage.sparseEnum = value;
  return self;
}
- (SparseEnumMessageBuilder*) clearSparseEnum {
  resultSparseEnumMessage.hasSparseEnum = NO;
  resultSparseEnumMessage.sparseEnum = TestSparseEnumSparseA;
  return self;
}
@end

@interface OneString ()
@property (strong) NSString* data;
@end

@implementation OneString

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.data = @"";
  }
  return self;
}
static OneString* defaultOneStringInstance = nil;
+ (void) initialize {
  if (self == [OneString class]) {
    defaultOneStringInstance = [[OneString alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOneStringInstance;
}
- (instancetype) defaultInstance {
  return defaultOneStringInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeString:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeStringSize(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OneString*) parseFromData:(NSData*) data {
  return (OneString*)[[[OneString builder] mergeFromData:data] build];
}
+ (OneString*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OneString*)[[[OneString builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OneString*) parseFromInputStream:(NSInputStream*) input {
  return (OneString*)[[[OneString builder] mergeFromInputStream:input] build];
}
+ (OneString*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OneString*)[[[OneString builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OneString*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OneString*)[[[OneString builder] mergeFromCodedInputStream:input] build];
}
+ (OneString*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OneString*)[[[OneString builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OneStringBuilder*) builder {
  return [[OneStringBuilder alloc] init];
}
+ (OneStringBuilder*) builderWithPrototype:(OneString*) prototype {
  return [[OneString builder] mergeFrom:prototype];
}
- (OneStringBuilder*) builder {
  return [OneString builder];
}
- (OneStringBuilder*) toBuilder {
  return [OneString builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OneString class]]) {
    return NO;
  }
  OneString *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OneStringBuilder()
@property (strong) OneString* resultOneString;
@end

@implementation OneStringBuilder
@synthesize resultOneString;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOneString = [[OneString alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOneString;
}
- (OneStringBuilder*) clear {
  self.resultOneString = [[OneString alloc] init];
  return self;
}
- (OneStringBuilder*) clone {
  return [OneString builderWithPrototype:resultOneString];
}
- (OneString*) defaultInstance {
  return [OneString defaultInstance];
}
- (OneString*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OneString*) buildPartial {
  OneString* returnMe = resultOneString;
  self.resultOneString = nil;
  return returnMe;
}
- (OneStringBuilder*) mergeFrom:(OneString*) other {
  if (other == [OneString defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OneStringBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OneStringBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setData:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return resultOneString.hasData;
}
- (NSString*) data {
  return resultOneString.data;
}
- (OneStringBuilder*) setData:(NSString*) value {
  resultOneString.hasData = YES;
  resultOneString.data = value;
  return self;
}
- (OneStringBuilder*) clearData {
  resultOneString.hasData = NO;
  resultOneString.data = @"";
  return self;
}
@end

@interface MoreString ()
@property (strong) NSMutableArray * dataArray;
@end

@implementation MoreString

@synthesize dataArray;
@dynamic data;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static MoreString* defaultMoreStringInstance = nil;
+ (void) initialize {
  if (self == [MoreString class]) {
    defaultMoreStringInstance = [[MoreString alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMoreStringInstance;
}
- (instancetype) defaultInstance {
  return defaultMoreStringInstance;
}
- (NSArray *)data {
  return dataArray;
}
- (NSString*)dataAtIndex:(NSUInteger)index {
  return [dataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.dataArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.dataArray.count;
    [self.dataArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MoreString*) parseFromData:(NSData*) data {
  return (MoreString*)[[[MoreString builder] mergeFromData:data] build];
}
+ (MoreString*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MoreString*)[[[MoreString builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MoreString*) parseFromInputStream:(NSInputStream*) input {
  return (MoreString*)[[[MoreString builder] mergeFromInputStream:input] build];
}
+ (MoreString*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MoreString*)[[[MoreString builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MoreString*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MoreString*)[[[MoreString builder] mergeFromCodedInputStream:input] build];
}
+ (MoreString*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MoreString*)[[[MoreString builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MoreStringBuilder*) builder {
  return [[MoreStringBuilder alloc] init];
}
+ (MoreStringBuilder*) builderWithPrototype:(MoreString*) prototype {
  return [[MoreString builder] mergeFrom:prototype];
}
- (MoreStringBuilder*) builder {
  return [MoreString builder];
}
- (MoreStringBuilder*) toBuilder {
  return [MoreString builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.dataArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.data forKey: @"data"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MoreString class]]) {
    return NO;
  }
  MoreString *otherMessage = other;
  return
      [self.dataArray isEqualToArray:otherMessage.dataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.dataArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MoreStringBuilder()
@property (strong) MoreString* resultMoreString;
@end

@implementation MoreStringBuilder
@synthesize resultMoreString;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMoreString = [[MoreString alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMoreString;
}
- (MoreStringBuilder*) clear {
  self.resultMoreString = [[MoreString alloc] init];
  return self;
}
- (MoreStringBuilder*) clone {
  return [MoreString builderWithPrototype:resultMoreString];
}
- (MoreString*) defaultInstance {
  return [MoreString defaultInstance];
}
- (MoreString*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MoreString*) buildPartial {
  MoreString* returnMe = resultMoreString;
  self.resultMoreString = nil;
  return returnMe;
}
- (MoreStringBuilder*) mergeFrom:(MoreString*) other {
  if (other == [MoreString defaultInstance]) {
    return self;
  }
  if (other.dataArray.count > 0) {
    if (resultMoreString.dataArray == nil) {
      resultMoreString.dataArray = [[NSMutableArray alloc] initWithArray:other.dataArray];
    } else {
      [resultMoreString.dataArray addObjectsFromArray:other.dataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MoreStringBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MoreStringBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addData:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)data {
  return resultMoreString.dataArray;
}
- (NSString*)dataAtIndex:(NSUInteger)index {
  return [resultMoreString dataAtIndex:index];
}
- (MoreStringBuilder *)addData:(NSString*)value {
  if (resultMoreString.dataArray == nil) {
    resultMoreString.dataArray = [[NSMutableArray alloc]init];
  }
  [resultMoreString.dataArray addObject:value];
  return self;
}
- (MoreStringBuilder *)setDataArray:(NSArray *)array {
  resultMoreString.dataArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (MoreStringBuilder *)clearData {
  resultMoreString.dataArray = nil;
  return self;
}
@end

@interface OneBytes ()
@property (strong) NSData* data;
@end

@implementation OneBytes

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.data = [NSData data];
  }
  return self;
}
static OneBytes* defaultOneBytesInstance = nil;
+ (void) initialize {
  if (self == [OneBytes class]) {
    defaultOneBytesInstance = [[OneBytes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOneBytesInstance;
}
- (instancetype) defaultInstance {
  return defaultOneBytesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeData:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeDataSize(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OneBytes*) parseFromData:(NSData*) data {
  return (OneBytes*)[[[OneBytes builder] mergeFromData:data] build];
}
+ (OneBytes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OneBytes*)[[[OneBytes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OneBytes*) parseFromInputStream:(NSInputStream*) input {
  return (OneBytes*)[[[OneBytes builder] mergeFromInputStream:input] build];
}
+ (OneBytes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OneBytes*)[[[OneBytes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OneBytes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OneBytes*)[[[OneBytes builder] mergeFromCodedInputStream:input] build];
}
+ (OneBytes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OneBytes*)[[[OneBytes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OneBytesBuilder*) builder {
  return [[OneBytesBuilder alloc] init];
}
+ (OneBytesBuilder*) builderWithPrototype:(OneBytes*) prototype {
  return [[OneBytes builder] mergeFrom:prototype];
}
- (OneBytesBuilder*) builder {
  return [OneBytes builder];
}
- (OneBytesBuilder*) toBuilder {
  return [OneBytes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OneBytes class]]) {
    return NO;
  }
  OneBytes *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OneBytesBuilder()
@property (strong) OneBytes* resultOneBytes;
@end

@implementation OneBytesBuilder
@synthesize resultOneBytes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOneBytes = [[OneBytes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOneBytes;
}
- (OneBytesBuilder*) clear {
  self.resultOneBytes = [[OneBytes alloc] init];
  return self;
}
- (OneBytesBuilder*) clone {
  return [OneBytes builderWithPrototype:resultOneBytes];
}
- (OneBytes*) defaultInstance {
  return [OneBytes defaultInstance];
}
- (OneBytes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OneBytes*) buildPartial {
  OneBytes* returnMe = resultOneBytes;
  self.resultOneBytes = nil;
  return returnMe;
}
- (OneBytesBuilder*) mergeFrom:(OneBytes*) other {
  if (other == [OneBytes defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OneBytesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OneBytesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return resultOneBytes.hasData;
}
- (NSData*) data {
  return resultOneBytes.data;
}
- (OneBytesBuilder*) setData:(NSData*) value {
  resultOneBytes.hasData = YES;
  resultOneBytes.data = value;
  return self;
}
- (OneBytesBuilder*) clearData {
  resultOneBytes.hasData = NO;
  resultOneBytes.data = [NSData data];
  return self;
}
@end

@interface MoreBytes ()
@property (strong) NSMutableArray * dataArray;
@end

@implementation MoreBytes

@synthesize dataArray;
@dynamic data;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static MoreBytes* defaultMoreBytesInstance = nil;
+ (void) initialize {
  if (self == [MoreBytes class]) {
    defaultMoreBytesInstance = [[MoreBytes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMoreBytesInstance;
}
- (instancetype) defaultInstance {
  return defaultMoreBytesInstance;
}
- (NSArray *)data {
  return dataArray;
}
- (NSData*)dataAtIndex:(NSUInteger)index {
  return [dataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.dataArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    [output writeData:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.dataArray.count;
    [self.dataArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeDataSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MoreBytes*) parseFromData:(NSData*) data {
  return (MoreBytes*)[[[MoreBytes builder] mergeFromData:data] build];
}
+ (MoreBytes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MoreBytes*)[[[MoreBytes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MoreBytes*) parseFromInputStream:(NSInputStream*) input {
  return (MoreBytes*)[[[MoreBytes builder] mergeFromInputStream:input] build];
}
+ (MoreBytes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MoreBytes*)[[[MoreBytes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MoreBytes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MoreBytes*)[[[MoreBytes builder] mergeFromCodedInputStream:input] build];
}
+ (MoreBytes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MoreBytes*)[[[MoreBytes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MoreBytesBuilder*) builder {
  return [[MoreBytesBuilder alloc] init];
}
+ (MoreBytesBuilder*) builderWithPrototype:(MoreBytes*) prototype {
  return [[MoreBytes builder] mergeFrom:prototype];
}
- (MoreBytesBuilder*) builder {
  return [MoreBytes builder];
}
- (MoreBytesBuilder*) toBuilder {
  return [MoreBytes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.dataArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.data forKey: @"data"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MoreBytes class]]) {
    return NO;
  }
  MoreBytes *otherMessage = other;
  return
      [self.dataArray isEqualToArray:otherMessage.dataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.dataArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MoreBytesBuilder()
@property (strong) MoreBytes* resultMoreBytes;
@end

@implementation MoreBytesBuilder
@synthesize resultMoreBytes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMoreBytes = [[MoreBytes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMoreBytes;
}
- (MoreBytesBuilder*) clear {
  self.resultMoreBytes = [[MoreBytes alloc] init];
  return self;
}
- (MoreBytesBuilder*) clone {
  return [MoreBytes builderWithPrototype:resultMoreBytes];
}
- (MoreBytes*) defaultInstance {
  return [MoreBytes defaultInstance];
}
- (MoreBytes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MoreBytes*) buildPartial {
  MoreBytes* returnMe = resultMoreBytes;
  self.resultMoreBytes = nil;
  return returnMe;
}
- (MoreBytesBuilder*) mergeFrom:(MoreBytes*) other {
  if (other == [MoreBytes defaultInstance]) {
    return self;
  }
  if (other.dataArray.count > 0) {
    if (resultMoreBytes.dataArray == nil) {
      resultMoreBytes.dataArray = [[NSMutableArray alloc] initWithArray:other.dataArray];
    } else {
      [resultMoreBytes.dataArray addObjectsFromArray:other.dataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MoreBytesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MoreBytesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addData:[input readData]];
        break;
      }
    }
  }
}
- (NSMutableArray *)data {
  return resultMoreBytes.dataArray;
}
- (NSData*)dataAtIndex:(NSUInteger)index {
  return [resultMoreBytes dataAtIndex:index];
}
- (MoreBytesBuilder *)addData:(NSData*)value {
  if (resultMoreBytes.dataArray == nil) {
    resultMoreBytes.dataArray = [[NSMutableArray alloc]init];
  }
  [resultMoreBytes.dataArray addObject:value];
  return self;
}
- (MoreBytesBuilder *)setDataArray:(NSArray *)array {
  resultMoreBytes.dataArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (MoreBytesBuilder *)clearData {
  resultMoreBytes.dataArray = nil;
  return self;
}
@end

@interface Int32Message ()
@property SInt32 data;
@end

@implementation Int32Message

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.data = 0;
  }
  return self;
}
static Int32Message* defaultInt32MessageInstance = nil;
+ (void) initialize {
  if (self == [Int32Message class]) {
    defaultInt32MessageInstance = [[Int32Message alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultInt32MessageInstance;
}
- (instancetype) defaultInstance {
  return defaultInt32MessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeInt32:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeInt32Size(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Int32Message*) parseFromData:(NSData*) data {
  return (Int32Message*)[[[Int32Message builder] mergeFromData:data] build];
}
+ (Int32Message*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int32Message*)[[[Int32Message builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Int32Message*) parseFromInputStream:(NSInputStream*) input {
  return (Int32Message*)[[[Int32Message builder] mergeFromInputStream:input] build];
}
+ (Int32Message*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int32Message*)[[[Int32Message builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Int32Message*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Int32Message*)[[[Int32Message builder] mergeFromCodedInputStream:input] build];
}
+ (Int32Message*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int32Message*)[[[Int32Message builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Int32MessageBuilder*) builder {
  return [[Int32MessageBuilder alloc] init];
}
+ (Int32MessageBuilder*) builderWithPrototype:(Int32Message*) prototype {
  return [[Int32Message builder] mergeFrom:prototype];
}
- (Int32MessageBuilder*) builder {
  return [Int32Message builder];
}
- (Int32MessageBuilder*) toBuilder {
  return [Int32Message builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", [NSNumber numberWithInteger:self.data]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasData) {
    [dictionary setObject: [NSNumber numberWithInteger:self.data] forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Int32Message class]]) {
    return NO;
  }
  Int32Message *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || self.data == otherMessage.data) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.data] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Int32MessageBuilder()
@property (strong) Int32Message* resultInt32Message;
@end

@implementation Int32MessageBuilder
@synthesize resultInt32Message;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultInt32Message = [[Int32Message alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultInt32Message;
}
- (Int32MessageBuilder*) clear {
  self.resultInt32Message = [[Int32Message alloc] init];
  return self;
}
- (Int32MessageBuilder*) clone {
  return [Int32Message builderWithPrototype:resultInt32Message];
}
- (Int32Message*) defaultInstance {
  return [Int32Message defaultInstance];
}
- (Int32Message*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Int32Message*) buildPartial {
  Int32Message* returnMe = resultInt32Message;
  self.resultInt32Message = nil;
  return returnMe;
}
- (Int32MessageBuilder*) mergeFrom:(Int32Message*) other {
  if (other == [Int32Message defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Int32MessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Int32MessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setData:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return resultInt32Message.hasData;
}
- (SInt32) data {
  return resultInt32Message.data;
}
- (Int32MessageBuilder*) setData:(SInt32) value {
  resultInt32Message.hasData = YES;
  resultInt32Message.data = value;
  return self;
}
- (Int32MessageBuilder*) clearData {
  resultInt32Message.hasData = NO;
  resultInt32Message.data = 0;
  return self;
}
@end

@interface Uint32Message ()
@property UInt32 data;
@end

@implementation Uint32Message

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.data = 0;
  }
  return self;
}
static Uint32Message* defaultUint32MessageInstance = nil;
+ (void) initialize {
  if (self == [Uint32Message class]) {
    defaultUint32MessageInstance = [[Uint32Message alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUint32MessageInstance;
}
- (instancetype) defaultInstance {
  return defaultUint32MessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeUInt32:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeUInt32Size(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Uint32Message*) parseFromData:(NSData*) data {
  return (Uint32Message*)[[[Uint32Message builder] mergeFromData:data] build];
}
+ (Uint32Message*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Uint32Message*)[[[Uint32Message builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Uint32Message*) parseFromInputStream:(NSInputStream*) input {
  return (Uint32Message*)[[[Uint32Message builder] mergeFromInputStream:input] build];
}
+ (Uint32Message*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Uint32Message*)[[[Uint32Message builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Uint32Message*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Uint32Message*)[[[Uint32Message builder] mergeFromCodedInputStream:input] build];
}
+ (Uint32Message*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Uint32Message*)[[[Uint32Message builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Uint32MessageBuilder*) builder {
  return [[Uint32MessageBuilder alloc] init];
}
+ (Uint32MessageBuilder*) builderWithPrototype:(Uint32Message*) prototype {
  return [[Uint32Message builder] mergeFrom:prototype];
}
- (Uint32MessageBuilder*) builder {
  return [Uint32Message builder];
}
- (Uint32MessageBuilder*) toBuilder {
  return [Uint32Message builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", [NSNumber numberWithInteger:self.data]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasData) {
    [dictionary setObject: [NSNumber numberWithInteger:self.data] forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Uint32Message class]]) {
    return NO;
  }
  Uint32Message *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || self.data == otherMessage.data) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.data] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Uint32MessageBuilder()
@property (strong) Uint32Message* resultUint32Message;
@end

@implementation Uint32MessageBuilder
@synthesize resultUint32Message;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUint32Message = [[Uint32Message alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUint32Message;
}
- (Uint32MessageBuilder*) clear {
  self.resultUint32Message = [[Uint32Message alloc] init];
  return self;
}
- (Uint32MessageBuilder*) clone {
  return [Uint32Message builderWithPrototype:resultUint32Message];
}
- (Uint32Message*) defaultInstance {
  return [Uint32Message defaultInstance];
}
- (Uint32Message*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Uint32Message*) buildPartial {
  Uint32Message* returnMe = resultUint32Message;
  self.resultUint32Message = nil;
  return returnMe;
}
- (Uint32MessageBuilder*) mergeFrom:(Uint32Message*) other {
  if (other == [Uint32Message defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Uint32MessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Uint32MessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setData:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return resultUint32Message.hasData;
}
- (UInt32) data {
  return resultUint32Message.data;
}
- (Uint32MessageBuilder*) setData:(UInt32) value {
  resultUint32Message.hasData = YES;
  resultUint32Message.data = value;
  return self;
}
- (Uint32MessageBuilder*) clearData {
  resultUint32Message.hasData = NO;
  resultUint32Message.data = 0;
  return self;
}
@end

@interface Int64Message ()
@property SInt64 data;
@end

@implementation Int64Message

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.data = 0L;
  }
  return self;
}
static Int64Message* defaultInt64MessageInstance = nil;
+ (void) initialize {
  if (self == [Int64Message class]) {
    defaultInt64MessageInstance = [[Int64Message alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultInt64MessageInstance;
}
- (instancetype) defaultInstance {
  return defaultInt64MessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeInt64:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeInt64Size(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Int64Message*) parseFromData:(NSData*) data {
  return (Int64Message*)[[[Int64Message builder] mergeFromData:data] build];
}
+ (Int64Message*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int64Message*)[[[Int64Message builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Int64Message*) parseFromInputStream:(NSInputStream*) input {
  return (Int64Message*)[[[Int64Message builder] mergeFromInputStream:input] build];
}
+ (Int64Message*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int64Message*)[[[Int64Message builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Int64Message*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Int64Message*)[[[Int64Message builder] mergeFromCodedInputStream:input] build];
}
+ (Int64Message*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int64Message*)[[[Int64Message builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Int64MessageBuilder*) builder {
  return [[Int64MessageBuilder alloc] init];
}
+ (Int64MessageBuilder*) builderWithPrototype:(Int64Message*) prototype {
  return [[Int64Message builder] mergeFrom:prototype];
}
- (Int64MessageBuilder*) builder {
  return [Int64Message builder];
}
- (Int64MessageBuilder*) toBuilder {
  return [Int64Message builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", [NSNumber numberWithLongLong:self.data]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasData) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.data] forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Int64Message class]]) {
    return NO;
  }
  Int64Message *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || self.data == otherMessage.data) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.data] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Int64MessageBuilder()
@property (strong) Int64Message* resultInt64Message;
@end

@implementation Int64MessageBuilder
@synthesize resultInt64Message;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultInt64Message = [[Int64Message alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultInt64Message;
}
- (Int64MessageBuilder*) clear {
  self.resultInt64Message = [[Int64Message alloc] init];
  return self;
}
- (Int64MessageBuilder*) clone {
  return [Int64Message builderWithPrototype:resultInt64Message];
}
- (Int64Message*) defaultInstance {
  return [Int64Message defaultInstance];
}
- (Int64Message*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Int64Message*) buildPartial {
  Int64Message* returnMe = resultInt64Message;
  self.resultInt64Message = nil;
  return returnMe;
}
- (Int64MessageBuilder*) mergeFrom:(Int64Message*) other {
  if (other == [Int64Message defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Int64MessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Int64MessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setData:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return resultInt64Message.hasData;
}
- (SInt64) data {
  return resultInt64Message.data;
}
- (Int64MessageBuilder*) setData:(SInt64) value {
  resultInt64Message.hasData = YES;
  resultInt64Message.data = value;
  return self;
}
- (Int64MessageBuilder*) clearData {
  resultInt64Message.hasData = NO;
  resultInt64Message.data = 0L;
  return self;
}
@end

@interface Uint64Message ()
@property UInt64 data;
@end

@implementation Uint64Message

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.data = 0L;
  }
  return self;
}
static Uint64Message* defaultUint64MessageInstance = nil;
+ (void) initialize {
  if (self == [Uint64Message class]) {
    defaultUint64MessageInstance = [[Uint64Message alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUint64MessageInstance;
}
- (instancetype) defaultInstance {
  return defaultUint64MessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeUInt64:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeUInt64Size(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Uint64Message*) parseFromData:(NSData*) data {
  return (Uint64Message*)[[[Uint64Message builder] mergeFromData:data] build];
}
+ (Uint64Message*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Uint64Message*)[[[Uint64Message builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Uint64Message*) parseFromInputStream:(NSInputStream*) input {
  return (Uint64Message*)[[[Uint64Message builder] mergeFromInputStream:input] build];
}
+ (Uint64Message*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Uint64Message*)[[[Uint64Message builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Uint64Message*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Uint64Message*)[[[Uint64Message builder] mergeFromCodedInputStream:input] build];
}
+ (Uint64Message*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Uint64Message*)[[[Uint64Message builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Uint64MessageBuilder*) builder {
  return [[Uint64MessageBuilder alloc] init];
}
+ (Uint64MessageBuilder*) builderWithPrototype:(Uint64Message*) prototype {
  return [[Uint64Message builder] mergeFrom:prototype];
}
- (Uint64MessageBuilder*) builder {
  return [Uint64Message builder];
}
- (Uint64MessageBuilder*) toBuilder {
  return [Uint64Message builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", [NSNumber numberWithLongLong:self.data]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasData) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.data] forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Uint64Message class]]) {
    return NO;
  }
  Uint64Message *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || self.data == otherMessage.data) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.data] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Uint64MessageBuilder()
@property (strong) Uint64Message* resultUint64Message;
@end

@implementation Uint64MessageBuilder
@synthesize resultUint64Message;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUint64Message = [[Uint64Message alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUint64Message;
}
- (Uint64MessageBuilder*) clear {
  self.resultUint64Message = [[Uint64Message alloc] init];
  return self;
}
- (Uint64MessageBuilder*) clone {
  return [Uint64Message builderWithPrototype:resultUint64Message];
}
- (Uint64Message*) defaultInstance {
  return [Uint64Message defaultInstance];
}
- (Uint64Message*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Uint64Message*) buildPartial {
  Uint64Message* returnMe = resultUint64Message;
  self.resultUint64Message = nil;
  return returnMe;
}
- (Uint64MessageBuilder*) mergeFrom:(Uint64Message*) other {
  if (other == [Uint64Message defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Uint64MessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Uint64MessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setData:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return resultUint64Message.hasData;
}
- (UInt64) data {
  return resultUint64Message.data;
}
- (Uint64MessageBuilder*) setData:(UInt64) value {
  resultUint64Message.hasData = YES;
  resultUint64Message.data = value;
  return self;
}
- (Uint64MessageBuilder*) clearData {
  resultUint64Message.hasData = NO;
  resultUint64Message.data = 0L;
  return self;
}
@end

@interface BoolMessage ()
@property BOOL data;
@end

@implementation BoolMessage

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
- (BOOL) data {
  return !!data_;
}
- (void) setData:(BOOL) _value_ {
  data_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.data = NO;
  }
  return self;
}
static BoolMessage* defaultBoolMessageInstance = nil;
+ (void) initialize {
  if (self == [BoolMessage class]) {
    defaultBoolMessageInstance = [[BoolMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBoolMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultBoolMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeBool:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeBoolSize(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BoolMessage*) parseFromData:(NSData*) data {
  return (BoolMessage*)[[[BoolMessage builder] mergeFromData:data] build];
}
+ (BoolMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoolMessage*)[[[BoolMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BoolMessage*) parseFromInputStream:(NSInputStream*) input {
  return (BoolMessage*)[[[BoolMessage builder] mergeFromInputStream:input] build];
}
+ (BoolMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoolMessage*)[[[BoolMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BoolMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BoolMessage*)[[[BoolMessage builder] mergeFromCodedInputStream:input] build];
}
+ (BoolMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoolMessage*)[[[BoolMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BoolMessageBuilder*) builder {
  return [[BoolMessageBuilder alloc] init];
}
+ (BoolMessageBuilder*) builderWithPrototype:(BoolMessage*) prototype {
  return [[BoolMessage builder] mergeFrom:prototype];
}
- (BoolMessageBuilder*) builder {
  return [BoolMessage builder];
}
- (BoolMessageBuilder*) toBuilder {
  return [BoolMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", [NSNumber numberWithBool:self.data]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasData) {
    [dictionary setObject: [NSNumber numberWithBool:self.data] forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BoolMessage class]]) {
    return NO;
  }
  BoolMessage *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || self.data == otherMessage.data) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.data] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BoolMessageBuilder()
@property (strong) BoolMessage* resultBoolMessage;
@end

@implementation BoolMessageBuilder
@synthesize resultBoolMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBoolMessage = [[BoolMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBoolMessage;
}
- (BoolMessageBuilder*) clear {
  self.resultBoolMessage = [[BoolMessage alloc] init];
  return self;
}
- (BoolMessageBuilder*) clone {
  return [BoolMessage builderWithPrototype:resultBoolMessage];
}
- (BoolMessage*) defaultInstance {
  return [BoolMessage defaultInstance];
}
- (BoolMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BoolMessage*) buildPartial {
  BoolMessage* returnMe = resultBoolMessage;
  self.resultBoolMessage = nil;
  return returnMe;
}
- (BoolMessageBuilder*) mergeFrom:(BoolMessage*) other {
  if (other == [BoolMessage defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BoolMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BoolMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setData:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return resultBoolMessage.hasData;
}
- (BOOL) data {
  return resultBoolMessage.data;
}
- (BoolMessageBuilder*) setData:(BOOL) value {
  resultBoolMessage.hasData = YES;
  resultBoolMessage.data = value;
  return self;
}
- (BoolMessageBuilder*) clearData {
  resultBoolMessage.hasData = NO;
  resultBoolMessage.data = NO;
  return self;
}
@end

@interface TestOneof ()
@property SInt32 fooInt;
@property (strong) NSString* fooString;
@property (strong) TestAllTypes* fooMessage;
@property (strong) TestOneofFooGroup* fooGroup;
@end

@implementation TestOneof

- (BOOL) hasFooInt {
  return !!hasFooInt_;
}
- (void) setHasFooInt:(BOOL) _value_ {
  hasFooInt_ = !!_value_;
}
@synthesize fooInt;
- (BOOL) hasFooString {
  return !!hasFooString_;
}
- (void) setHasFooString:(BOOL) _value_ {
  hasFooString_ = !!_value_;
}
@synthesize fooString;
- (BOOL) hasFooMessage {
  return !!hasFooMessage_;
}
- (void) setHasFooMessage:(BOOL) _value_ {
  hasFooMessage_ = !!_value_;
}
@synthesize fooMessage;
- (BOOL) hasFooGroup {
  return !!hasFooGroup_;
}
- (void) setHasFooGroup:(BOOL) _value_ {
  hasFooGroup_ = !!_value_;
}
@synthesize fooGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.fooInt = 0;
    self.fooString = @"";
    self.fooMessage = [TestAllTypes defaultInstance];
    self.fooGroup = [TestOneofFooGroup defaultInstance];
  }
  return self;
}
static TestOneof* defaultTestOneofInstance = nil;
+ (void) initialize {
  if (self == [TestOneof class]) {
    defaultTestOneofInstance = [[TestOneof alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestOneofInstance;
}
- (instancetype) defaultInstance {
  return defaultTestOneofInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFooInt) {
    [output writeInt32:1 value:self.fooInt];
  }
  if (self.hasFooString) {
    [output writeString:2 value:self.fooString];
  }
  if (self.hasFooMessage) {
    [output writeMessage:3 value:self.fooMessage];
  }
  if (self.hasFooGroup) {
    [output writeGroup:4 value:self.fooGroup];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFooInt) {
    size_ += computeInt32Size(1, self.fooInt);
  }
  if (self.hasFooString) {
    size_ += computeStringSize(2, self.fooString);
  }
  if (self.hasFooMessage) {
    size_ += computeMessageSize(3, self.fooMessage);
  }
  if (self.hasFooGroup) {
    size_ += computeGroupSize(4, self.fooGroup);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestOneof*) parseFromData:(NSData*) data {
  return (TestOneof*)[[[TestOneof builder] mergeFromData:data] build];
}
+ (TestOneof*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof*)[[[TestOneof builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestOneof*) parseFromInputStream:(NSInputStream*) input {
  return (TestOneof*)[[[TestOneof builder] mergeFromInputStream:input] build];
}
+ (TestOneof*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof*)[[[TestOneof builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneof*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestOneof*)[[[TestOneof builder] mergeFromCodedInputStream:input] build];
}
+ (TestOneof*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof*)[[[TestOneof builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneofBuilder*) builder {
  return [[TestOneofBuilder alloc] init];
}
+ (TestOneofBuilder*) builderWithPrototype:(TestOneof*) prototype {
  return [[TestOneof builder] mergeFrom:prototype];
}
- (TestOneofBuilder*) builder {
  return [TestOneof builder];
}
- (TestOneofBuilder*) toBuilder {
  return [TestOneof builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFooInt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooInt", [NSNumber numberWithInteger:self.fooInt]];
  }
  if (self.hasFooString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooString", self.fooString];
  }
  if (self.hasFooMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"fooMessage"];
    [self.fooMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFooGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"fooGroup"];
    [self.fooGroup writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFooInt) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fooInt] forKey: @"fooInt"];
  }
  if (self.hasFooString) {
    [dictionary setObject: self.fooString forKey: @"fooString"];
  }
  if (self.hasFooMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fooMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fooMessage"];
  }
  if (self.hasFooGroup) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fooGroup storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fooGroup"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestOneof class]]) {
    return NO;
  }
  TestOneof *otherMessage = other;
  return
      self.hasFooInt == otherMessage.hasFooInt &&
      (!self.hasFooInt || self.fooInt == otherMessage.fooInt) &&
      self.hasFooString == otherMessage.hasFooString &&
      (!self.hasFooString || [self.fooString isEqual:otherMessage.fooString]) &&
      self.hasFooMessage == otherMessage.hasFooMessage &&
      (!self.hasFooMessage || [self.fooMessage isEqual:otherMessage.fooMessage]) &&
      self.hasFooGroup == otherMessage.hasFooGroup &&
      (!self.hasFooGroup || [self.fooGroup isEqual:otherMessage.fooGroup]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFooInt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fooInt] hash];
  }
  if (self.hasFooString) {
    hashCode = hashCode * 31 + [self.fooString hash];
  }
  if (self.hasFooMessage) {
    hashCode = hashCode * 31 + [self.fooMessage hash];
  }
  if (self.hasFooGroup) {
    hashCode = hashCode * 31 + [self.fooGroup hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestOneofFooGroup ()
@property SInt32 a;
@property (strong) NSString* b;
@end

@implementation TestOneofFooGroup

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (BOOL) hasB {
  return !!hasB_;
}
- (void) setHasB:(BOOL) _value_ {
  hasB_ = !!_value_;
}
@synthesize b;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
    self.b = @"";
  }
  return self;
}
static TestOneofFooGroup* defaultTestOneofFooGroupInstance = nil;
+ (void) initialize {
  if (self == [TestOneofFooGroup class]) {
    defaultTestOneofFooGroupInstance = [[TestOneofFooGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestOneofFooGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestOneofFooGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:5 value:self.a];
  }
  if (self.hasB) {
    [output writeString:6 value:self.b];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(5, self.a);
  }
  if (self.hasB) {
    size_ += computeStringSize(6, self.b);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestOneofFooGroup*) parseFromData:(NSData*) data {
  return (TestOneofFooGroup*)[[[TestOneofFooGroup builder] mergeFromData:data] build];
}
+ (TestOneofFooGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneofFooGroup*)[[[TestOneofFooGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestOneofFooGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestOneofFooGroup*)[[[TestOneofFooGroup builder] mergeFromInputStream:input] build];
}
+ (TestOneofFooGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneofFooGroup*)[[[TestOneofFooGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneofFooGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestOneofFooGroup*)[[[TestOneofFooGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestOneofFooGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneofFooGroup*)[[[TestOneofFooGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneofFooGroupBuilder*) builder {
  return [[TestOneofFooGroupBuilder alloc] init];
}
+ (TestOneofFooGroupBuilder*) builderWithPrototype:(TestOneofFooGroup*) prototype {
  return [[TestOneofFooGroup builder] mergeFrom:prototype];
}
- (TestOneofFooGroupBuilder*) builder {
  return [TestOneofFooGroup builder];
}
- (TestOneofFooGroupBuilder*) toBuilder {
  return [TestOneofFooGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  if (self.hasB) {
    [output appendFormat:@"%@%@: %@\n", indent, @"b", self.b];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  if (self.hasB) {
    [dictionary setObject: self.b forKey: @"b"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestOneofFooGroup class]]) {
    return NO;
  }
  TestOneofFooGroup *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      self.hasB == otherMessage.hasB &&
      (!self.hasB || [self.b isEqual:otherMessage.b]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  if (self.hasB) {
    hashCode = hashCode * 31 + [self.b hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestOneofFooGroupBuilder()
@property (strong) TestOneofFooGroup* resultFooGroup;
@end

@implementation TestOneofFooGroupBuilder
@synthesize resultFooGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFooGroup = [[TestOneofFooGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFooGroup;
}
- (TestOneofFooGroupBuilder*) clear {
  self.resultFooGroup = [[TestOneofFooGroup alloc] init];
  return self;
}
- (TestOneofFooGroupBuilder*) clone {
  return [TestOneofFooGroup builderWithPrototype:resultFooGroup];
}
- (TestOneofFooGroup*) defaultInstance {
  return [TestOneofFooGroup defaultInstance];
}
- (TestOneofFooGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestOneofFooGroup*) buildPartial {
  TestOneofFooGroup* returnMe = resultFooGroup;
  self.resultFooGroup = nil;
  return returnMe;
}
- (TestOneofFooGroupBuilder*) mergeFrom:(TestOneofFooGroup*) other {
  if (other == [TestOneofFooGroup defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasB) {
    [self setB:other.b];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestOneofFooGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestOneofFooGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 40: {
        [self setA:[input readInt32]];
        break;
      }
      case 50: {
        [self setB:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultFooGroup.hasA;
}
- (SInt32) a {
  return resultFooGroup.a;
}
- (TestOneofFooGroupBuilder*) setA:(SInt32) value {
  resultFooGroup.hasA = YES;
  resultFooGroup.a = value;
  return self;
}
- (TestOneofFooGroupBuilder*) clearA {
  resultFooGroup.hasA = NO;
  resultFooGroup.a = 0;
  return self;
}
- (BOOL) hasB {
  return resultFooGroup.hasB;
}
- (NSString*) b {
  return resultFooGroup.b;
}
- (TestOneofFooGroupBuilder*) setB:(NSString*) value {
  resultFooGroup.hasB = YES;
  resultFooGroup.b = value;
  return self;
}
- (TestOneofFooGroupBuilder*) clearB {
  resultFooGroup.hasB = NO;
  resultFooGroup.b = @"";
  return self;
}
@end

@interface TestOneofBuilder()
@property (strong) TestOneof* resultTestOneof;
@end

@implementation TestOneofBuilder
@synthesize resultTestOneof;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestOneof = [[TestOneof alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestOneof;
}
- (TestOneofBuilder*) clear {
  self.resultTestOneof = [[TestOneof alloc] init];
  return self;
}
- (TestOneofBuilder*) clone {
  return [TestOneof builderWithPrototype:resultTestOneof];
}
- (TestOneof*) defaultInstance {
  return [TestOneof defaultInstance];
}
- (TestOneof*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestOneof*) buildPartial {
  TestOneof* returnMe = resultTestOneof;
  self.resultTestOneof = nil;
  return returnMe;
}
- (TestOneofBuilder*) mergeFrom:(TestOneof*) other {
  if (other == [TestOneof defaultInstance]) {
    return self;
  }
  if (other.hasFooInt) {
    [self setFooInt:other.fooInt];
  }
  if (other.hasFooString) {
    [self setFooString:other.fooString];
  }
  if (other.hasFooMessage) {
    [self mergeFooMessage:other.fooMessage];
  }
  if (other.hasFooGroup) {
    [self mergeFooGroup:other.fooGroup];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestOneofBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestOneofBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFooInt:[input readInt32]];
        break;
      }
      case 18: {
        [self setFooString:[input readString]];
        break;
      }
      case 26: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        if (self.hasFooMessage) {
          [subBuilder mergeFrom:self.fooMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFooMessage:[subBuilder buildPartial]];
        break;
      }
      case 35: {
        TestOneofFooGroupBuilder* subBuilder = [TestOneofFooGroup builder];
        if (self.hasFooGroup) {
          [subBuilder mergeFrom:self.fooGroup];
        }
        [input readGroup:4 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setFooGroup:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasFooInt {
  return resultTestOneof.hasFooInt;
}
- (SInt32) fooInt {
  return resultTestOneof.fooInt;
}
- (TestOneofBuilder*) setFooInt:(SInt32) value {
  resultTestOneof.hasFooInt = YES;
  resultTestOneof.fooInt = value;
  return self;
}
- (TestOneofBuilder*) clearFooInt {
  resultTestOneof.hasFooInt = NO;
  resultTestOneof.fooInt = 0;
  return self;
}
- (BOOL) hasFooString {
  return resultTestOneof.hasFooString;
}
- (NSString*) fooString {
  return resultTestOneof.fooString;
}
- (TestOneofBuilder*) setFooString:(NSString*) value {
  resultTestOneof.hasFooString = YES;
  resultTestOneof.fooString = value;
  return self;
}
- (TestOneofBuilder*) clearFooString {
  resultTestOneof.hasFooString = NO;
  resultTestOneof.fooString = @"";
  return self;
}
- (BOOL) hasFooMessage {
  return resultTestOneof.hasFooMessage;
}
- (TestAllTypes*) fooMessage {
  return resultTestOneof.fooMessage;
}
- (TestOneofBuilder*) setFooMessage:(TestAllTypes*) value {
  resultTestOneof.hasFooMessage = YES;
  resultTestOneof.fooMessage = value;
  return self;
}
- (TestOneofBuilder*) setFooMessageBuilder:(TestAllTypesBuilder*) builderForValue {
  return [self setFooMessage:[builderForValue build]];
}
- (TestOneofBuilder*) mergeFooMessage:(TestAllTypes*) value {
  if (resultTestOneof.hasFooMessage &&
      resultTestOneof.fooMessage != [TestAllTypes defaultInstance]) {
    resultTestOneof.fooMessage =
      [[[TestAllTypes builderWithPrototype:resultTestOneof.fooMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestOneof.fooMessage = value;
  }
  resultTestOneof.hasFooMessage = YES;
  return self;
}
- (TestOneofBuilder*) clearFooMessage {
  resultTestOneof.hasFooMessage = NO;
  resultTestOneof.fooMessage = [TestAllTypes defaultInstance];
  return self;
}
- (BOOL) hasFooGroup {
  return resultTestOneof.hasFooGroup;
}
- (TestOneofFooGroup*) fooGroup {
  return resultTestOneof.fooGroup;
}
- (TestOneofBuilder*) setFooGroup:(TestOneofFooGroup*) value {
  resultTestOneof.hasFooGroup = YES;
  resultTestOneof.fooGroup = value;
  return self;
}
- (TestOneofBuilder*) setFooGroupBuilder:(TestOneofFooGroupBuilder*) builderForValue {
  return [self setFooGroup:[builderForValue build]];
}
- (TestOneofBuilder*) mergeFooGroup:(TestOneofFooGroup*) value {
  if (resultTestOneof.hasFooGroup &&
      resultTestOneof.fooGroup != [TestOneofFooGroup defaultInstance]) {
    resultTestOneof.fooGroup =
      [[[TestOneofFooGroup builderWithPrototype:resultTestOneof.fooGroup] mergeFrom:value] buildPartial];
  } else {
    resultTestOneof.fooGroup = value;
  }
  resultTestOneof.hasFooGroup = YES;
  return self;
}
- (TestOneofBuilder*) clearFooGroup {
  resultTestOneof.hasFooGroup = NO;
  resultTestOneof.fooGroup = [TestOneofFooGroup defaultInstance];
  return self;
}
@end

@interface TestOneofBackwardsCompatible ()
@property SInt32 fooInt;
@property (strong) NSString* fooString;
@property (strong) TestAllTypes* fooMessage;
@property (strong) TestOneofBackwardsCompatibleFooGroup* fooGroup;
@end

@implementation TestOneofBackwardsCompatible

- (BOOL) hasFooInt {
  return !!hasFooInt_;
}
- (void) setHasFooInt:(BOOL) _value_ {
  hasFooInt_ = !!_value_;
}
@synthesize fooInt;
- (BOOL) hasFooString {
  return !!hasFooString_;
}
- (void) setHasFooString:(BOOL) _value_ {
  hasFooString_ = !!_value_;
}
@synthesize fooString;
- (BOOL) hasFooMessage {
  return !!hasFooMessage_;
}
- (void) setHasFooMessage:(BOOL) _value_ {
  hasFooMessage_ = !!_value_;
}
@synthesize fooMessage;
- (BOOL) hasFooGroup {
  return !!hasFooGroup_;
}
- (void) setHasFooGroup:(BOOL) _value_ {
  hasFooGroup_ = !!_value_;
}
@synthesize fooGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.fooInt = 0;
    self.fooString = @"";
    self.fooMessage = [TestAllTypes defaultInstance];
    self.fooGroup = [TestOneofBackwardsCompatibleFooGroup defaultInstance];
  }
  return self;
}
static TestOneofBackwardsCompatible* defaultTestOneofBackwardsCompatibleInstance = nil;
+ (void) initialize {
  if (self == [TestOneofBackwardsCompatible class]) {
    defaultTestOneofBackwardsCompatibleInstance = [[TestOneofBackwardsCompatible alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestOneofBackwardsCompatibleInstance;
}
- (instancetype) defaultInstance {
  return defaultTestOneofBackwardsCompatibleInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFooInt) {
    [output writeInt32:1 value:self.fooInt];
  }
  if (self.hasFooString) {
    [output writeString:2 value:self.fooString];
  }
  if (self.hasFooMessage) {
    [output writeMessage:3 value:self.fooMessage];
  }
  if (self.hasFooGroup) {
    [output writeGroup:4 value:self.fooGroup];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFooInt) {
    size_ += computeInt32Size(1, self.fooInt);
  }
  if (self.hasFooString) {
    size_ += computeStringSize(2, self.fooString);
  }
  if (self.hasFooMessage) {
    size_ += computeMessageSize(3, self.fooMessage);
  }
  if (self.hasFooGroup) {
    size_ += computeGroupSize(4, self.fooGroup);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestOneofBackwardsCompatible*) parseFromData:(NSData*) data {
  return (TestOneofBackwardsCompatible*)[[[TestOneofBackwardsCompatible builder] mergeFromData:data] build];
}
+ (TestOneofBackwardsCompatible*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneofBackwardsCompatible*)[[[TestOneofBackwardsCompatible builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestOneofBackwardsCompatible*) parseFromInputStream:(NSInputStream*) input {
  return (TestOneofBackwardsCompatible*)[[[TestOneofBackwardsCompatible builder] mergeFromInputStream:input] build];
}
+ (TestOneofBackwardsCompatible*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneofBackwardsCompatible*)[[[TestOneofBackwardsCompatible builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneofBackwardsCompatible*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestOneofBackwardsCompatible*)[[[TestOneofBackwardsCompatible builder] mergeFromCodedInputStream:input] build];
}
+ (TestOneofBackwardsCompatible*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneofBackwardsCompatible*)[[[TestOneofBackwardsCompatible builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneofBackwardsCompatibleBuilder*) builder {
  return [[TestOneofBackwardsCompatibleBuilder alloc] init];
}
+ (TestOneofBackwardsCompatibleBuilder*) builderWithPrototype:(TestOneofBackwardsCompatible*) prototype {
  return [[TestOneofBackwardsCompatible builder] mergeFrom:prototype];
}
- (TestOneofBackwardsCompatibleBuilder*) builder {
  return [TestOneofBackwardsCompatible builder];
}
- (TestOneofBackwardsCompatibleBuilder*) toBuilder {
  return [TestOneofBackwardsCompatible builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFooInt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooInt", [NSNumber numberWithInteger:self.fooInt]];
  }
  if (self.hasFooString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooString", self.fooString];
  }
  if (self.hasFooMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"fooMessage"];
    [self.fooMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFooGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"fooGroup"];
    [self.fooGroup writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFooInt) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fooInt] forKey: @"fooInt"];
  }
  if (self.hasFooString) {
    [dictionary setObject: self.fooString forKey: @"fooString"];
  }
  if (self.hasFooMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fooMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fooMessage"];
  }
  if (self.hasFooGroup) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fooGroup storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fooGroup"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestOneofBackwardsCompatible class]]) {
    return NO;
  }
  TestOneofBackwardsCompatible *otherMessage = other;
  return
      self.hasFooInt == otherMessage.hasFooInt &&
      (!self.hasFooInt || self.fooInt == otherMessage.fooInt) &&
      self.hasFooString == otherMessage.hasFooString &&
      (!self.hasFooString || [self.fooString isEqual:otherMessage.fooString]) &&
      self.hasFooMessage == otherMessage.hasFooMessage &&
      (!self.hasFooMessage || [self.fooMessage isEqual:otherMessage.fooMessage]) &&
      self.hasFooGroup == otherMessage.hasFooGroup &&
      (!self.hasFooGroup || [self.fooGroup isEqual:otherMessage.fooGroup]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFooInt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fooInt] hash];
  }
  if (self.hasFooString) {
    hashCode = hashCode * 31 + [self.fooString hash];
  }
  if (self.hasFooMessage) {
    hashCode = hashCode * 31 + [self.fooMessage hash];
  }
  if (self.hasFooGroup) {
    hashCode = hashCode * 31 + [self.fooGroup hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestOneofBackwardsCompatibleFooGroup ()
@property SInt32 a;
@property (strong) NSString* b;
@end

@implementation TestOneofBackwardsCompatibleFooGroup

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (BOOL) hasB {
  return !!hasB_;
}
- (void) setHasB:(BOOL) _value_ {
  hasB_ = !!_value_;
}
@synthesize b;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
    self.b = @"";
  }
  return self;
}
static TestOneofBackwardsCompatibleFooGroup* defaultTestOneofBackwardsCompatibleFooGroupInstance = nil;
+ (void) initialize {
  if (self == [TestOneofBackwardsCompatibleFooGroup class]) {
    defaultTestOneofBackwardsCompatibleFooGroupInstance = [[TestOneofBackwardsCompatibleFooGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestOneofBackwardsCompatibleFooGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestOneofBackwardsCompatibleFooGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:5 value:self.a];
  }
  if (self.hasB) {
    [output writeString:6 value:self.b];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(5, self.a);
  }
  if (self.hasB) {
    size_ += computeStringSize(6, self.b);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestOneofBackwardsCompatibleFooGroup*) parseFromData:(NSData*) data {
  return (TestOneofBackwardsCompatibleFooGroup*)[[[TestOneofBackwardsCompatibleFooGroup builder] mergeFromData:data] build];
}
+ (TestOneofBackwardsCompatibleFooGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneofBackwardsCompatibleFooGroup*)[[[TestOneofBackwardsCompatibleFooGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestOneofBackwardsCompatibleFooGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestOneofBackwardsCompatibleFooGroup*)[[[TestOneofBackwardsCompatibleFooGroup builder] mergeFromInputStream:input] build];
}
+ (TestOneofBackwardsCompatibleFooGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneofBackwardsCompatibleFooGroup*)[[[TestOneofBackwardsCompatibleFooGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneofBackwardsCompatibleFooGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestOneofBackwardsCompatibleFooGroup*)[[[TestOneofBackwardsCompatibleFooGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestOneofBackwardsCompatibleFooGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneofBackwardsCompatibleFooGroup*)[[[TestOneofBackwardsCompatibleFooGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneofBackwardsCompatibleFooGroupBuilder*) builder {
  return [[TestOneofBackwardsCompatibleFooGroupBuilder alloc] init];
}
+ (TestOneofBackwardsCompatibleFooGroupBuilder*) builderWithPrototype:(TestOneofBackwardsCompatibleFooGroup*) prototype {
  return [[TestOneofBackwardsCompatibleFooGroup builder] mergeFrom:prototype];
}
- (TestOneofBackwardsCompatibleFooGroupBuilder*) builder {
  return [TestOneofBackwardsCompatibleFooGroup builder];
}
- (TestOneofBackwardsCompatibleFooGroupBuilder*) toBuilder {
  return [TestOneofBackwardsCompatibleFooGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  if (self.hasB) {
    [output appendFormat:@"%@%@: %@\n", indent, @"b", self.b];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  if (self.hasB) {
    [dictionary setObject: self.b forKey: @"b"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestOneofBackwardsCompatibleFooGroup class]]) {
    return NO;
  }
  TestOneofBackwardsCompatibleFooGroup *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      self.hasB == otherMessage.hasB &&
      (!self.hasB || [self.b isEqual:otherMessage.b]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  if (self.hasB) {
    hashCode = hashCode * 31 + [self.b hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestOneofBackwardsCompatibleFooGroupBuilder()
@property (strong) TestOneofBackwardsCompatibleFooGroup* resultFooGroup;
@end

@implementation TestOneofBackwardsCompatibleFooGroupBuilder
@synthesize resultFooGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFooGroup = [[TestOneofBackwardsCompatibleFooGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFooGroup;
}
- (TestOneofBackwardsCompatibleFooGroupBuilder*) clear {
  self.resultFooGroup = [[TestOneofBackwardsCompatibleFooGroup alloc] init];
  return self;
}
- (TestOneofBackwardsCompatibleFooGroupBuilder*) clone {
  return [TestOneofBackwardsCompatibleFooGroup builderWithPrototype:resultFooGroup];
}
- (TestOneofBackwardsCompatibleFooGroup*) defaultInstance {
  return [TestOneofBackwardsCompatibleFooGroup defaultInstance];
}
- (TestOneofBackwardsCompatibleFooGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestOneofBackwardsCompatibleFooGroup*) buildPartial {
  TestOneofBackwardsCompatibleFooGroup* returnMe = resultFooGroup;
  self.resultFooGroup = nil;
  return returnMe;
}
- (TestOneofBackwardsCompatibleFooGroupBuilder*) mergeFrom:(TestOneofBackwardsCompatibleFooGroup*) other {
  if (other == [TestOneofBackwardsCompatibleFooGroup defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasB) {
    [self setB:other.b];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestOneofBackwardsCompatibleFooGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestOneofBackwardsCompatibleFooGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 40: {
        [self setA:[input readInt32]];
        break;
      }
      case 50: {
        [self setB:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultFooGroup.hasA;
}
- (SInt32) a {
  return resultFooGroup.a;
}
- (TestOneofBackwardsCompatibleFooGroupBuilder*) setA:(SInt32) value {
  resultFooGroup.hasA = YES;
  resultFooGroup.a = value;
  return self;
}
- (TestOneofBackwardsCompatibleFooGroupBuilder*) clearA {
  resultFooGroup.hasA = NO;
  resultFooGroup.a = 0;
  return self;
}
- (BOOL) hasB {
  return resultFooGroup.hasB;
}
- (NSString*) b {
  return resultFooGroup.b;
}
- (TestOneofBackwardsCompatibleFooGroupBuilder*) setB:(NSString*) value {
  resultFooGroup.hasB = YES;
  resultFooGroup.b = value;
  return self;
}
- (TestOneofBackwardsCompatibleFooGroupBuilder*) clearB {
  resultFooGroup.hasB = NO;
  resultFooGroup.b = @"";
  return self;
}
@end

@interface TestOneofBackwardsCompatibleBuilder()
@property (strong) TestOneofBackwardsCompatible* resultTestOneofBackwardsCompatible;
@end

@implementation TestOneofBackwardsCompatibleBuilder
@synthesize resultTestOneofBackwardsCompatible;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestOneofBackwardsCompatible = [[TestOneofBackwardsCompatible alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestOneofBackwardsCompatible;
}
- (TestOneofBackwardsCompatibleBuilder*) clear {
  self.resultTestOneofBackwardsCompatible = [[TestOneofBackwardsCompatible alloc] init];
  return self;
}
- (TestOneofBackwardsCompatibleBuilder*) clone {
  return [TestOneofBackwardsCompatible builderWithPrototype:resultTestOneofBackwardsCompatible];
}
- (TestOneofBackwardsCompatible*) defaultInstance {
  return [TestOneofBackwardsCompatible defaultInstance];
}
- (TestOneofBackwardsCompatible*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestOneofBackwardsCompatible*) buildPartial {
  TestOneofBackwardsCompatible* returnMe = resultTestOneofBackwardsCompatible;
  self.resultTestOneofBackwardsCompatible = nil;
  return returnMe;
}
- (TestOneofBackwardsCompatibleBuilder*) mergeFrom:(TestOneofBackwardsCompatible*) other {
  if (other == [TestOneofBackwardsCompatible defaultInstance]) {
    return self;
  }
  if (other.hasFooInt) {
    [self setFooInt:other.fooInt];
  }
  if (other.hasFooString) {
    [self setFooString:other.fooString];
  }
  if (other.hasFooMessage) {
    [self mergeFooMessage:other.fooMessage];
  }
  if (other.hasFooGroup) {
    [self mergeFooGroup:other.fooGroup];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestOneofBackwardsCompatibleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestOneofBackwardsCompatibleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFooInt:[input readInt32]];
        break;
      }
      case 18: {
        [self setFooString:[input readString]];
        break;
      }
      case 26: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        if (self.hasFooMessage) {
          [subBuilder mergeFrom:self.fooMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFooMessage:[subBuilder buildPartial]];
        break;
      }
      case 35: {
        TestOneofBackwardsCompatibleFooGroupBuilder* subBuilder = [TestOneofBackwardsCompatibleFooGroup builder];
        if (self.hasFooGroup) {
          [subBuilder mergeFrom:self.fooGroup];
        }
        [input readGroup:4 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setFooGroup:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasFooInt {
  return resultTestOneofBackwardsCompatible.hasFooInt;
}
- (SInt32) fooInt {
  return resultTestOneofBackwardsCompatible.fooInt;
}
- (TestOneofBackwardsCompatibleBuilder*) setFooInt:(SInt32) value {
  resultTestOneofBackwardsCompatible.hasFooInt = YES;
  resultTestOneofBackwardsCompatible.fooInt = value;
  return self;
}
- (TestOneofBackwardsCompatibleBuilder*) clearFooInt {
  resultTestOneofBackwardsCompatible.hasFooInt = NO;
  resultTestOneofBackwardsCompatible.fooInt = 0;
  return self;
}
- (BOOL) hasFooString {
  return resultTestOneofBackwardsCompatible.hasFooString;
}
- (NSString*) fooString {
  return resultTestOneofBackwardsCompatible.fooString;
}
- (TestOneofBackwardsCompatibleBuilder*) setFooString:(NSString*) value {
  resultTestOneofBackwardsCompatible.hasFooString = YES;
  resultTestOneofBackwardsCompatible.fooString = value;
  return self;
}
- (TestOneofBackwardsCompatibleBuilder*) clearFooString {
  resultTestOneofBackwardsCompatible.hasFooString = NO;
  resultTestOneofBackwardsCompatible.fooString = @"";
  return self;
}
- (BOOL) hasFooMessage {
  return resultTestOneofBackwardsCompatible.hasFooMessage;
}
- (TestAllTypes*) fooMessage {
  return resultTestOneofBackwardsCompatible.fooMessage;
}
- (TestOneofBackwardsCompatibleBuilder*) setFooMessage:(TestAllTypes*) value {
  resultTestOneofBackwardsCompatible.hasFooMessage = YES;
  resultTestOneofBackwardsCompatible.fooMessage = value;
  return self;
}
- (TestOneofBackwardsCompatibleBuilder*) setFooMessageBuilder:(TestAllTypesBuilder*) builderForValue {
  return [self setFooMessage:[builderForValue build]];
}
- (TestOneofBackwardsCompatibleBuilder*) mergeFooMessage:(TestAllTypes*) value {
  if (resultTestOneofBackwardsCompatible.hasFooMessage &&
      resultTestOneofBackwardsCompatible.fooMessage != [TestAllTypes defaultInstance]) {
    resultTestOneofBackwardsCompatible.fooMessage =
      [[[TestAllTypes builderWithPrototype:resultTestOneofBackwardsCompatible.fooMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestOneofBackwardsCompatible.fooMessage = value;
  }
  resultTestOneofBackwardsCompatible.hasFooMessage = YES;
  return self;
}
- (TestOneofBackwardsCompatibleBuilder*) clearFooMessage {
  resultTestOneofBackwardsCompatible.hasFooMessage = NO;
  resultTestOneofBackwardsCompatible.fooMessage = [TestAllTypes defaultInstance];
  return self;
}
- (BOOL) hasFooGroup {
  return resultTestOneofBackwardsCompatible.hasFooGroup;
}
- (TestOneofBackwardsCompatibleFooGroup*) fooGroup {
  return resultTestOneofBackwardsCompatible.fooGroup;
}
- (TestOneofBackwardsCompatibleBuilder*) setFooGroup:(TestOneofBackwardsCompatibleFooGroup*) value {
  resultTestOneofBackwardsCompatible.hasFooGroup = YES;
  resultTestOneofBackwardsCompatible.fooGroup = value;
  return self;
}
- (TestOneofBackwardsCompatibleBuilder*) setFooGroupBuilder:(TestOneofBackwardsCompatibleFooGroupBuilder*) builderForValue {
  return [self setFooGroup:[builderForValue build]];
}
- (TestOneofBackwardsCompatibleBuilder*) mergeFooGroup:(TestOneofBackwardsCompatibleFooGroup*) value {
  if (resultTestOneofBackwardsCompatible.hasFooGroup &&
      resultTestOneofBackwardsCompatible.fooGroup != [TestOneofBackwardsCompatibleFooGroup defaultInstance]) {
    resultTestOneofBackwardsCompatible.fooGroup =
      [[[TestOneofBackwardsCompatibleFooGroup builderWithPrototype:resultTestOneofBackwardsCompatible.fooGroup] mergeFrom:value] buildPartial];
  } else {
    resultTestOneofBackwardsCompatible.fooGroup = value;
  }
  resultTestOneofBackwardsCompatible.hasFooGroup = YES;
  return self;
}
- (TestOneofBackwardsCompatibleBuilder*) clearFooGroup {
  resultTestOneofBackwardsCompatible.hasFooGroup = NO;
  resultTestOneofBackwardsCompatible.fooGroup = [TestOneofBackwardsCompatibleFooGroup defaultInstance];
  return self;
}
@end

@interface TestOneof2 ()
@property SInt32 fooInt;
@property (strong) NSString* fooString;
@property (strong) NSString* fooCord;
@property (strong) NSString* fooStringPiece;
@property (strong) NSData* fooBytes;
@property TestOneof2NestedEnum fooEnum;
@property (strong) TestOneof2NestedMessage* fooMessage;
@property (strong) TestOneof2FooGroup* fooGroup;
@property (strong) TestOneof2NestedMessage* fooLazyMessage;
@property SInt32 barInt;
@property (strong) NSString* barString;
@property (strong) NSString* barCord;
@property (strong) NSString* barStringPiece;
@property (strong) NSData* barBytes;
@property TestOneof2NestedEnum barEnum;
@property SInt32 bazInt;
@property (strong) NSString* bazString;
@end

@implementation TestOneof2

- (BOOL) hasFooInt {
  return !!hasFooInt_;
}
- (void) setHasFooInt:(BOOL) _value_ {
  hasFooInt_ = !!_value_;
}
@synthesize fooInt;
- (BOOL) hasFooString {
  return !!hasFooString_;
}
- (void) setHasFooString:(BOOL) _value_ {
  hasFooString_ = !!_value_;
}
@synthesize fooString;
- (BOOL) hasFooCord {
  return !!hasFooCord_;
}
- (void) setHasFooCord:(BOOL) _value_ {
  hasFooCord_ = !!_value_;
}
@synthesize fooCord;
- (BOOL) hasFooStringPiece {
  return !!hasFooStringPiece_;
}
- (void) setHasFooStringPiece:(BOOL) _value_ {
  hasFooStringPiece_ = !!_value_;
}
@synthesize fooStringPiece;
- (BOOL) hasFooBytes {
  return !!hasFooBytes_;
}
- (void) setHasFooBytes:(BOOL) _value_ {
  hasFooBytes_ = !!_value_;
}
@synthesize fooBytes;
- (BOOL) hasFooEnum {
  return !!hasFooEnum_;
}
- (void) setHasFooEnum:(BOOL) _value_ {
  hasFooEnum_ = !!_value_;
}
@synthesize fooEnum;
- (BOOL) hasFooMessage {
  return !!hasFooMessage_;
}
- (void) setHasFooMessage:(BOOL) _value_ {
  hasFooMessage_ = !!_value_;
}
@synthesize fooMessage;
- (BOOL) hasFooGroup {
  return !!hasFooGroup_;
}
- (void) setHasFooGroup:(BOOL) _value_ {
  hasFooGroup_ = !!_value_;
}
@synthesize fooGroup;
- (BOOL) hasFooLazyMessage {
  return !!hasFooLazyMessage_;
}
- (void) setHasFooLazyMessage:(BOOL) _value_ {
  hasFooLazyMessage_ = !!_value_;
}
@synthesize fooLazyMessage;
- (BOOL) hasBarInt {
  return !!hasBarInt_;
}
- (void) setHasBarInt:(BOOL) _value_ {
  hasBarInt_ = !!_value_;
}
@synthesize barInt;
- (BOOL) hasBarString {
  return !!hasBarString_;
}
- (void) setHasBarString:(BOOL) _value_ {
  hasBarString_ = !!_value_;
}
@synthesize barString;
- (BOOL) hasBarCord {
  return !!hasBarCord_;
}
- (void) setHasBarCord:(BOOL) _value_ {
  hasBarCord_ = !!_value_;
}
@synthesize barCord;
- (BOOL) hasBarStringPiece {
  return !!hasBarStringPiece_;
}
- (void) setHasBarStringPiece:(BOOL) _value_ {
  hasBarStringPiece_ = !!_value_;
}
@synthesize barStringPiece;
- (BOOL) hasBarBytes {
  return !!hasBarBytes_;
}
- (void) setHasBarBytes:(BOOL) _value_ {
  hasBarBytes_ = !!_value_;
}
@synthesize barBytes;
- (BOOL) hasBarEnum {
  return !!hasBarEnum_;
}
- (void) setHasBarEnum:(BOOL) _value_ {
  hasBarEnum_ = !!_value_;
}
@synthesize barEnum;
- (BOOL) hasBazInt {
  return !!hasBazInt_;
}
- (void) setHasBazInt:(BOOL) _value_ {
  hasBazInt_ = !!_value_;
}
@synthesize bazInt;
- (BOOL) hasBazString {
  return !!hasBazString_;
}
- (void) setHasBazString:(BOOL) _value_ {
  hasBazString_ = !!_value_;
}
@synthesize bazString;
- (instancetype) init {
  if ((self = [super init])) {
    self.fooInt = 0;
    self.fooString = @"";
    self.fooCord = @"";
    self.fooStringPiece = @"";
    self.fooBytes = [NSData data];
    self.fooEnum = TestOneof2NestedEnumFoo;
    self.fooMessage = [TestOneof2NestedMessage defaultInstance];
    self.fooGroup = [TestOneof2FooGroup defaultInstance];
    self.fooLazyMessage = [TestOneof2NestedMessage defaultInstance];
    self.barInt = 5;
    self.barString = @"STRING";
    self.barCord = @"CORD";
    self.barStringPiece = @"SPIECE";
    self.barBytes = [NSData dataWithBytes:"BYTES" length:5];
    self.barEnum = TestOneof2NestedEnumBar;
    self.bazInt = 0;
    self.bazString = @"BAZ";
  }
  return self;
}
static TestOneof2* defaultTestOneof2Instance = nil;
+ (void) initialize {
  if (self == [TestOneof2 class]) {
    defaultTestOneof2Instance = [[TestOneof2 alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestOneof2Instance;
}
- (instancetype) defaultInstance {
  return defaultTestOneof2Instance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFooInt) {
    [output writeInt32:1 value:self.fooInt];
  }
  if (self.hasFooString) {
    [output writeString:2 value:self.fooString];
  }
  if (self.hasFooCord) {
    [output writeString:3 value:self.fooCord];
  }
  if (self.hasFooStringPiece) {
    [output writeString:4 value:self.fooStringPiece];
  }
  if (self.hasFooBytes) {
    [output writeData:5 value:self.fooBytes];
  }
  if (self.hasFooEnum) {
    [output writeEnum:6 value:self.fooEnum];
  }
  if (self.hasFooMessage) {
    [output writeMessage:7 value:self.fooMessage];
  }
  if (self.hasFooGroup) {
    [output writeGroup:8 value:self.fooGroup];
  }
  if (self.hasFooLazyMessage) {
    [output writeMessage:11 value:self.fooLazyMessage];
  }
  if (self.hasBarInt) {
    [output writeInt32:12 value:self.barInt];
  }
  if (self.hasBarString) {
    [output writeString:13 value:self.barString];
  }
  if (self.hasBarCord) {
    [output writeString:14 value:self.barCord];
  }
  if (self.hasBarStringPiece) {
    [output writeString:15 value:self.barStringPiece];
  }
  if (self.hasBarBytes) {
    [output writeData:16 value:self.barBytes];
  }
  if (self.hasBarEnum) {
    [output writeEnum:17 value:self.barEnum];
  }
  if (self.hasBazInt) {
    [output writeInt32:18 value:self.bazInt];
  }
  if (self.hasBazString) {
    [output writeString:19 value:self.bazString];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFooInt) {
    size_ += computeInt32Size(1, self.fooInt);
  }
  if (self.hasFooString) {
    size_ += computeStringSize(2, self.fooString);
  }
  if (self.hasFooCord) {
    size_ += computeStringSize(3, self.fooCord);
  }
  if (self.hasFooStringPiece) {
    size_ += computeStringSize(4, self.fooStringPiece);
  }
  if (self.hasFooBytes) {
    size_ += computeDataSize(5, self.fooBytes);
  }
  if (self.hasFooEnum) {
    size_ += computeEnumSize(6, self.fooEnum);
  }
  if (self.hasFooMessage) {
    size_ += computeMessageSize(7, self.fooMessage);
  }
  if (self.hasFooGroup) {
    size_ += computeGroupSize(8, self.fooGroup);
  }
  if (self.hasFooLazyMessage) {
    size_ += computeMessageSize(11, self.fooLazyMessage);
  }
  if (self.hasBarInt) {
    size_ += computeInt32Size(12, self.barInt);
  }
  if (self.hasBarString) {
    size_ += computeStringSize(13, self.barString);
  }
  if (self.hasBarCord) {
    size_ += computeStringSize(14, self.barCord);
  }
  if (self.hasBarStringPiece) {
    size_ += computeStringSize(15, self.barStringPiece);
  }
  if (self.hasBarBytes) {
    size_ += computeDataSize(16, self.barBytes);
  }
  if (self.hasBarEnum) {
    size_ += computeEnumSize(17, self.barEnum);
  }
  if (self.hasBazInt) {
    size_ += computeInt32Size(18, self.bazInt);
  }
  if (self.hasBazString) {
    size_ += computeStringSize(19, self.bazString);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestOneof2*) parseFromData:(NSData*) data {
  return (TestOneof2*)[[[TestOneof2 builder] mergeFromData:data] build];
}
+ (TestOneof2*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof2*)[[[TestOneof2 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestOneof2*) parseFromInputStream:(NSInputStream*) input {
  return (TestOneof2*)[[[TestOneof2 builder] mergeFromInputStream:input] build];
}
+ (TestOneof2*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof2*)[[[TestOneof2 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneof2*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestOneof2*)[[[TestOneof2 builder] mergeFromCodedInputStream:input] build];
}
+ (TestOneof2*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof2*)[[[TestOneof2 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneof2Builder*) builder {
  return [[TestOneof2Builder alloc] init];
}
+ (TestOneof2Builder*) builderWithPrototype:(TestOneof2*) prototype {
  return [[TestOneof2 builder] mergeFrom:prototype];
}
- (TestOneof2Builder*) builder {
  return [TestOneof2 builder];
}
- (TestOneof2Builder*) toBuilder {
  return [TestOneof2 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFooInt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooInt", [NSNumber numberWithInteger:self.fooInt]];
  }
  if (self.hasFooString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooString", self.fooString];
  }
  if (self.hasFooCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooCord", self.fooCord];
  }
  if (self.hasFooStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooStringPiece", self.fooStringPiece];
  }
  if (self.hasFooBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooBytes", self.fooBytes];
  }
  if (self.hasFooEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooEnum", NSStringFromTestOneof2NestedEnum(self.fooEnum)];
  }
  if (self.hasFooMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"fooMessage"];
    [self.fooMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFooGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"fooGroup"];
    [self.fooGroup writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFooLazyMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"fooLazyMessage"];
    [self.fooLazyMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBarInt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"barInt", [NSNumber numberWithInteger:self.barInt]];
  }
  if (self.hasBarString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"barString", self.barString];
  }
  if (self.hasBarCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"barCord", self.barCord];
  }
  if (self.hasBarStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"barStringPiece", self.barStringPiece];
  }
  if (self.hasBarBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"barBytes", self.barBytes];
  }
  if (self.hasBarEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"barEnum", NSStringFromTestOneof2NestedEnum(self.barEnum)];
  }
  if (self.hasBazInt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bazInt", [NSNumber numberWithInteger:self.bazInt]];
  }
  if (self.hasBazString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bazString", self.bazString];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFooInt) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fooInt] forKey: @"fooInt"];
  }
  if (self.hasFooString) {
    [dictionary setObject: self.fooString forKey: @"fooString"];
  }
  if (self.hasFooCord) {
    [dictionary setObject: self.fooCord forKey: @"fooCord"];
  }
  if (self.hasFooStringPiece) {
    [dictionary setObject: self.fooStringPiece forKey: @"fooStringPiece"];
  }
  if (self.hasFooBytes) {
    [dictionary setObject: self.fooBytes forKey: @"fooBytes"];
  }
  if (self.hasFooEnum) {
    [dictionary setObject: @(self.fooEnum) forKey: @"fooEnum"];
  }
  if (self.hasFooMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fooMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fooMessage"];
  }
  if (self.hasFooGroup) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fooGroup storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fooGroup"];
  }
  if (self.hasFooLazyMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fooLazyMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fooLazyMessage"];
  }
  if (self.hasBarInt) {
    [dictionary setObject: [NSNumber numberWithInteger:self.barInt] forKey: @"barInt"];
  }
  if (self.hasBarString) {
    [dictionary setObject: self.barString forKey: @"barString"];
  }
  if (self.hasBarCord) {
    [dictionary setObject: self.barCord forKey: @"barCord"];
  }
  if (self.hasBarStringPiece) {
    [dictionary setObject: self.barStringPiece forKey: @"barStringPiece"];
  }
  if (self.hasBarBytes) {
    [dictionary setObject: self.barBytes forKey: @"barBytes"];
  }
  if (self.hasBarEnum) {
    [dictionary setObject: @(self.barEnum) forKey: @"barEnum"];
  }
  if (self.hasBazInt) {
    [dictionary setObject: [NSNumber numberWithInteger:self.bazInt] forKey: @"bazInt"];
  }
  if (self.hasBazString) {
    [dictionary setObject: self.bazString forKey: @"bazString"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestOneof2 class]]) {
    return NO;
  }
  TestOneof2 *otherMessage = other;
  return
      self.hasFooInt == otherMessage.hasFooInt &&
      (!self.hasFooInt || self.fooInt == otherMessage.fooInt) &&
      self.hasFooString == otherMessage.hasFooString &&
      (!self.hasFooString || [self.fooString isEqual:otherMessage.fooString]) &&
      self.hasFooCord == otherMessage.hasFooCord &&
      (!self.hasFooCord || [self.fooCord isEqual:otherMessage.fooCord]) &&
      self.hasFooStringPiece == otherMessage.hasFooStringPiece &&
      (!self.hasFooStringPiece || [self.fooStringPiece isEqual:otherMessage.fooStringPiece]) &&
      self.hasFooBytes == otherMessage.hasFooBytes &&
      (!self.hasFooBytes || [self.fooBytes isEqual:otherMessage.fooBytes]) &&
      self.hasFooEnum == otherMessage.hasFooEnum &&
      (!self.hasFooEnum || self.fooEnum == otherMessage.fooEnum) &&
      self.hasFooMessage == otherMessage.hasFooMessage &&
      (!self.hasFooMessage || [self.fooMessage isEqual:otherMessage.fooMessage]) &&
      self.hasFooGroup == otherMessage.hasFooGroup &&
      (!self.hasFooGroup || [self.fooGroup isEqual:otherMessage.fooGroup]) &&
      self.hasFooLazyMessage == otherMessage.hasFooLazyMessage &&
      (!self.hasFooLazyMessage || [self.fooLazyMessage isEqual:otherMessage.fooLazyMessage]) &&
      self.hasBarInt == otherMessage.hasBarInt &&
      (!self.hasBarInt || self.barInt == otherMessage.barInt) &&
      self.hasBarString == otherMessage.hasBarString &&
      (!self.hasBarString || [self.barString isEqual:otherMessage.barString]) &&
      self.hasBarCord == otherMessage.hasBarCord &&
      (!self.hasBarCord || [self.barCord isEqual:otherMessage.barCord]) &&
      self.hasBarStringPiece == otherMessage.hasBarStringPiece &&
      (!self.hasBarStringPiece || [self.barStringPiece isEqual:otherMessage.barStringPiece]) &&
      self.hasBarBytes == otherMessage.hasBarBytes &&
      (!self.hasBarBytes || [self.barBytes isEqual:otherMessage.barBytes]) &&
      self.hasBarEnum == otherMessage.hasBarEnum &&
      (!self.hasBarEnum || self.barEnum == otherMessage.barEnum) &&
      self.hasBazInt == otherMessage.hasBazInt &&
      (!self.hasBazInt || self.bazInt == otherMessage.bazInt) &&
      self.hasBazString == otherMessage.hasBazString &&
      (!self.hasBazString || [self.bazString isEqual:otherMessage.bazString]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFooInt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fooInt] hash];
  }
  if (self.hasFooString) {
    hashCode = hashCode * 31 + [self.fooString hash];
  }
  if (self.hasFooCord) {
    hashCode = hashCode * 31 + [self.fooCord hash];
  }
  if (self.hasFooStringPiece) {
    hashCode = hashCode * 31 + [self.fooStringPiece hash];
  }
  if (self.hasFooBytes) {
    hashCode = hashCode * 31 + [self.fooBytes hash];
  }
  if (self.hasFooEnum) {
    hashCode = hashCode * 31 + self.fooEnum;
  }
  if (self.hasFooMessage) {
    hashCode = hashCode * 31 + [self.fooMessage hash];
  }
  if (self.hasFooGroup) {
    hashCode = hashCode * 31 + [self.fooGroup hash];
  }
  if (self.hasFooLazyMessage) {
    hashCode = hashCode * 31 + [self.fooLazyMessage hash];
  }
  if (self.hasBarInt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.barInt] hash];
  }
  if (self.hasBarString) {
    hashCode = hashCode * 31 + [self.barString hash];
  }
  if (self.hasBarCord) {
    hashCode = hashCode * 31 + [self.barCord hash];
  }
  if (self.hasBarStringPiece) {
    hashCode = hashCode * 31 + [self.barStringPiece hash];
  }
  if (self.hasBarBytes) {
    hashCode = hashCode * 31 + [self.barBytes hash];
  }
  if (self.hasBarEnum) {
    hashCode = hashCode * 31 + self.barEnum;
  }
  if (self.hasBazInt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bazInt] hash];
  }
  if (self.hasBazString) {
    hashCode = hashCode * 31 + [self.bazString hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL TestOneof2NestedEnumIsValidValue(TestOneof2NestedEnum value) {
  switch (value) {
    case TestOneof2NestedEnumFoo:
    case TestOneof2NestedEnumBar:
    case TestOneof2NestedEnumBaz:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromTestOneof2NestedEnum(TestOneof2NestedEnum value) {
  switch (value) {
    case TestOneof2NestedEnumFoo:
      return @"TestOneof2NestedEnumFoo";
    case TestOneof2NestedEnumBar:
      return @"TestOneof2NestedEnumBar";
    case TestOneof2NestedEnumBaz:
      return @"TestOneof2NestedEnumBaz";
    default:
      return nil;
  }
}

@interface TestOneof2FooGroup ()
@property SInt32 a;
@property (strong) NSString* b;
@end

@implementation TestOneof2FooGroup

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (BOOL) hasB {
  return !!hasB_;
}
- (void) setHasB:(BOOL) _value_ {
  hasB_ = !!_value_;
}
@synthesize b;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
    self.b = @"";
  }
  return self;
}
static TestOneof2FooGroup* defaultTestOneof2FooGroupInstance = nil;
+ (void) initialize {
  if (self == [TestOneof2FooGroup class]) {
    defaultTestOneof2FooGroupInstance = [[TestOneof2FooGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestOneof2FooGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestOneof2FooGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:9 value:self.a];
  }
  if (self.hasB) {
    [output writeString:10 value:self.b];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(9, self.a);
  }
  if (self.hasB) {
    size_ += computeStringSize(10, self.b);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestOneof2FooGroup*) parseFromData:(NSData*) data {
  return (TestOneof2FooGroup*)[[[TestOneof2FooGroup builder] mergeFromData:data] build];
}
+ (TestOneof2FooGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof2FooGroup*)[[[TestOneof2FooGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestOneof2FooGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestOneof2FooGroup*)[[[TestOneof2FooGroup builder] mergeFromInputStream:input] build];
}
+ (TestOneof2FooGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof2FooGroup*)[[[TestOneof2FooGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneof2FooGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestOneof2FooGroup*)[[[TestOneof2FooGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestOneof2FooGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof2FooGroup*)[[[TestOneof2FooGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneof2FooGroupBuilder*) builder {
  return [[TestOneof2FooGroupBuilder alloc] init];
}
+ (TestOneof2FooGroupBuilder*) builderWithPrototype:(TestOneof2FooGroup*) prototype {
  return [[TestOneof2FooGroup builder] mergeFrom:prototype];
}
- (TestOneof2FooGroupBuilder*) builder {
  return [TestOneof2FooGroup builder];
}
- (TestOneof2FooGroupBuilder*) toBuilder {
  return [TestOneof2FooGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  if (self.hasB) {
    [output appendFormat:@"%@%@: %@\n", indent, @"b", self.b];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  if (self.hasB) {
    [dictionary setObject: self.b forKey: @"b"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestOneof2FooGroup class]]) {
    return NO;
  }
  TestOneof2FooGroup *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      self.hasB == otherMessage.hasB &&
      (!self.hasB || [self.b isEqual:otherMessage.b]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  if (self.hasB) {
    hashCode = hashCode * 31 + [self.b hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestOneof2FooGroupBuilder()
@property (strong) TestOneof2FooGroup* resultFooGroup;
@end

@implementation TestOneof2FooGroupBuilder
@synthesize resultFooGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFooGroup = [[TestOneof2FooGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFooGroup;
}
- (TestOneof2FooGroupBuilder*) clear {
  self.resultFooGroup = [[TestOneof2FooGroup alloc] init];
  return self;
}
- (TestOneof2FooGroupBuilder*) clone {
  return [TestOneof2FooGroup builderWithPrototype:resultFooGroup];
}
- (TestOneof2FooGroup*) defaultInstance {
  return [TestOneof2FooGroup defaultInstance];
}
- (TestOneof2FooGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestOneof2FooGroup*) buildPartial {
  TestOneof2FooGroup* returnMe = resultFooGroup;
  self.resultFooGroup = nil;
  return returnMe;
}
- (TestOneof2FooGroupBuilder*) mergeFrom:(TestOneof2FooGroup*) other {
  if (other == [TestOneof2FooGroup defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasB) {
    [self setB:other.b];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestOneof2FooGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestOneof2FooGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 72: {
        [self setA:[input readInt32]];
        break;
      }
      case 82: {
        [self setB:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultFooGroup.hasA;
}
- (SInt32) a {
  return resultFooGroup.a;
}
- (TestOneof2FooGroupBuilder*) setA:(SInt32) value {
  resultFooGroup.hasA = YES;
  resultFooGroup.a = value;
  return self;
}
- (TestOneof2FooGroupBuilder*) clearA {
  resultFooGroup.hasA = NO;
  resultFooGroup.a = 0;
  return self;
}
- (BOOL) hasB {
  return resultFooGroup.hasB;
}
- (NSString*) b {
  return resultFooGroup.b;
}
- (TestOneof2FooGroupBuilder*) setB:(NSString*) value {
  resultFooGroup.hasB = YES;
  resultFooGroup.b = value;
  return self;
}
- (TestOneof2FooGroupBuilder*) clearB {
  resultFooGroup.hasB = NO;
  resultFooGroup.b = @"";
  return self;
}
@end

@interface TestOneof2NestedMessage ()
@property SInt64 quxInt;
@property (strong) PBAppendableArray * corgeIntArray;
@end

@implementation TestOneof2NestedMessage

- (BOOL) hasQuxInt {
  return !!hasQuxInt_;
}
- (void) setHasQuxInt:(BOOL) _value_ {
  hasQuxInt_ = !!_value_;
}
@synthesize quxInt;
@synthesize corgeIntArray;
@dynamic corgeInt;
- (instancetype) init {
  if ((self = [super init])) {
    self.quxInt = 0L;
  }
  return self;
}
static TestOneof2NestedMessage* defaultTestOneof2NestedMessageInstance = nil;
+ (void) initialize {
  if (self == [TestOneof2NestedMessage class]) {
    defaultTestOneof2NestedMessageInstance = [[TestOneof2NestedMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestOneof2NestedMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultTestOneof2NestedMessageInstance;
}
- (PBArray *)corgeInt {
  return corgeIntArray;
}
- (SInt32)corgeIntAtIndex:(NSUInteger)index {
  return [corgeIntArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuxInt) {
    [output writeInt64:1 value:self.quxInt];
  }
  const NSUInteger corgeIntArrayCount = self.corgeIntArray.count;
  if (corgeIntArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.corgeIntArray.data;
    for (NSUInteger i = 0; i < corgeIntArrayCount; ++i) {
      [output writeInt32:2 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasQuxInt) {
    size_ += computeInt64Size(1, self.quxInt);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.corgeIntArray.count;
    const SInt32 *values = (const SInt32 *)self.corgeIntArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestOneof2NestedMessage*) parseFromData:(NSData*) data {
  return (TestOneof2NestedMessage*)[[[TestOneof2NestedMessage builder] mergeFromData:data] build];
}
+ (TestOneof2NestedMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof2NestedMessage*)[[[TestOneof2NestedMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestOneof2NestedMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TestOneof2NestedMessage*)[[[TestOneof2NestedMessage builder] mergeFromInputStream:input] build];
}
+ (TestOneof2NestedMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof2NestedMessage*)[[[TestOneof2NestedMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneof2NestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestOneof2NestedMessage*)[[[TestOneof2NestedMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TestOneof2NestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestOneof2NestedMessage*)[[[TestOneof2NestedMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestOneof2NestedMessageBuilder*) builder {
  return [[TestOneof2NestedMessageBuilder alloc] init];
}
+ (TestOneof2NestedMessageBuilder*) builderWithPrototype:(TestOneof2NestedMessage*) prototype {
  return [[TestOneof2NestedMessage builder] mergeFrom:prototype];
}
- (TestOneof2NestedMessageBuilder*) builder {
  return [TestOneof2NestedMessage builder];
}
- (TestOneof2NestedMessageBuilder*) toBuilder {
  return [TestOneof2NestedMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasQuxInt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"quxInt", [NSNumber numberWithLongLong:self.quxInt]];
  }
  [self.corgeIntArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"corgeInt", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasQuxInt) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.quxInt] forKey: @"quxInt"];
  }
  NSMutableArray * corgeIntArrayArray = [NSMutableArray new];
  NSUInteger corgeIntArrayCount=self.corgeIntArray.count;
  for(int i=0;i<corgeIntArrayCount;i++){
    [corgeIntArrayArray addObject: @([self.corgeIntArray int32AtIndex:i])];
  }
  [dictionary setObject: corgeIntArrayArray forKey: @"corgeInt"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestOneof2NestedMessage class]]) {
    return NO;
  }
  TestOneof2NestedMessage *otherMessage = other;
  return
      self.hasQuxInt == otherMessage.hasQuxInt &&
      (!self.hasQuxInt || self.quxInt == otherMessage.quxInt) &&
      [self.corgeIntArray isEqualToArray:otherMessage.corgeIntArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasQuxInt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.quxInt] hash];
  }
  [self.corgeIntArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestOneof2NestedMessageBuilder()
@property (strong) TestOneof2NestedMessage* resultNestedMessage;
@end

@implementation TestOneof2NestedMessageBuilder
@synthesize resultNestedMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNestedMessage = [[TestOneof2NestedMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNestedMessage;
}
- (TestOneof2NestedMessageBuilder*) clear {
  self.resultNestedMessage = [[TestOneof2NestedMessage alloc] init];
  return self;
}
- (TestOneof2NestedMessageBuilder*) clone {
  return [TestOneof2NestedMessage builderWithPrototype:resultNestedMessage];
}
- (TestOneof2NestedMessage*) defaultInstance {
  return [TestOneof2NestedMessage defaultInstance];
}
- (TestOneof2NestedMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestOneof2NestedMessage*) buildPartial {
  TestOneof2NestedMessage* returnMe = resultNestedMessage;
  self.resultNestedMessage = nil;
  return returnMe;
}
- (TestOneof2NestedMessageBuilder*) mergeFrom:(TestOneof2NestedMessage*) other {
  if (other == [TestOneof2NestedMessage defaultInstance]) {
    return self;
  }
  if (other.hasQuxInt) {
    [self setQuxInt:other.quxInt];
  }
  if (other.corgeIntArray.count > 0) {
    if (resultNestedMessage.corgeIntArray == nil) {
      resultNestedMessage.corgeIntArray = [other.corgeIntArray copy];
    } else {
      [resultNestedMessage.corgeIntArray appendArray:other.corgeIntArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestOneof2NestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestOneof2NestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setQuxInt:[input readInt64]];
        break;
      }
      case 16: {
        [self addCorgeInt:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasQuxInt {
  return resultNestedMessage.hasQuxInt;
}
- (SInt64) quxInt {
  return resultNestedMessage.quxInt;
}
- (TestOneof2NestedMessageBuilder*) setQuxInt:(SInt64) value {
  resultNestedMessage.hasQuxInt = YES;
  resultNestedMessage.quxInt = value;
  return self;
}
- (TestOneof2NestedMessageBuilder*) clearQuxInt {
  resultNestedMessage.hasQuxInt = NO;
  resultNestedMessage.quxInt = 0L;
  return self;
}
- (PBAppendableArray *)corgeInt {
  return resultNestedMessage.corgeIntArray;
}
- (SInt32)corgeIntAtIndex:(NSUInteger)index {
  return [resultNestedMessage corgeIntAtIndex:index];
}
- (TestOneof2NestedMessageBuilder *)addCorgeInt:(SInt32)value {
  if (resultNestedMessage.corgeIntArray == nil) {
    resultNestedMessage.corgeIntArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultNestedMessage.corgeIntArray addInt32:value];
  return self;
}
- (TestOneof2NestedMessageBuilder *)setCorgeIntArray:(NSArray *)array {
  resultNestedMessage.corgeIntArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestOneof2NestedMessageBuilder *)setCorgeIntValues:(const SInt32 *)values count:(NSUInteger)count {
  resultNestedMessage.corgeIntArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestOneof2NestedMessageBuilder *)clearCorgeInt {
  resultNestedMessage.corgeIntArray = nil;
  return self;
}
@end

@interface TestOneof2Builder()
@property (strong) TestOneof2* resultTestOneof2;
@end

@implementation TestOneof2Builder
@synthesize resultTestOneof2;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestOneof2 = [[TestOneof2 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestOneof2;
}
- (TestOneof2Builder*) clear {
  self.resultTestOneof2 = [[TestOneof2 alloc] init];
  return self;
}
- (TestOneof2Builder*) clone {
  return [TestOneof2 builderWithPrototype:resultTestOneof2];
}
- (TestOneof2*) defaultInstance {
  return [TestOneof2 defaultInstance];
}
- (TestOneof2*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestOneof2*) buildPartial {
  TestOneof2* returnMe = resultTestOneof2;
  self.resultTestOneof2 = nil;
  return returnMe;
}
- (TestOneof2Builder*) mergeFrom:(TestOneof2*) other {
  if (other == [TestOneof2 defaultInstance]) {
    return self;
  }
  if (other.hasFooInt) {
    [self setFooInt:other.fooInt];
  }
  if (other.hasFooString) {
    [self setFooString:other.fooString];
  }
  if (other.hasFooCord) {
    [self setFooCord:other.fooCord];
  }
  if (other.hasFooStringPiece) {
    [self setFooStringPiece:other.fooStringPiece];
  }
  if (other.hasFooBytes) {
    [self setFooBytes:other.fooBytes];
  }
  if (other.hasFooEnum) {
    [self setFooEnum:other.fooEnum];
  }
  if (other.hasFooMessage) {
    [self mergeFooMessage:other.fooMessage];
  }
  if (other.hasFooGroup) {
    [self mergeFooGroup:other.fooGroup];
  }
  if (other.hasFooLazyMessage) {
    [self mergeFooLazyMessage:other.fooLazyMessage];
  }
  if (other.hasBarInt) {
    [self setBarInt:other.barInt];
  }
  if (other.hasBarString) {
    [self setBarString:other.barString];
  }
  if (other.hasBarCord) {
    [self setBarCord:other.barCord];
  }
  if (other.hasBarStringPiece) {
    [self setBarStringPiece:other.barStringPiece];
  }
  if (other.hasBarBytes) {
    [self setBarBytes:other.barBytes];
  }
  if (other.hasBarEnum) {
    [self setBarEnum:other.barEnum];
  }
  if (other.hasBazInt) {
    [self setBazInt:other.bazInt];
  }
  if (other.hasBazString) {
    [self setBazString:other.bazString];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestOneof2Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestOneof2Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFooInt:[input readInt32]];
        break;
      }
      case 18: {
        [self setFooString:[input readString]];
        break;
      }
      case 26: {
        [self setFooCord:[input readString]];
        break;
      }
      case 34: {
        [self setFooStringPiece:[input readString]];
        break;
      }
      case 42: {
        [self setFooBytes:[input readData]];
        break;
      }
      case 48: {
        TestOneof2NestedEnum value = (TestOneof2NestedEnum)[input readEnum];
        if (TestOneof2NestedEnumIsValidValue(value)) {
          [self setFooEnum:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 58: {
        TestOneof2NestedMessageBuilder* subBuilder = [TestOneof2NestedMessage builder];
        if (self.hasFooMessage) {
          [subBuilder mergeFrom:self.fooMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFooMessage:[subBuilder buildPartial]];
        break;
      }
      case 67: {
        TestOneof2FooGroupBuilder* subBuilder = [TestOneof2FooGroup builder];
        if (self.hasFooGroup) {
          [subBuilder mergeFrom:self.fooGroup];
        }
        [input readGroup:8 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setFooGroup:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        TestOneof2NestedMessageBuilder* subBuilder = [TestOneof2NestedMessage builder];
        if (self.hasFooLazyMessage) {
          [subBuilder mergeFrom:self.fooLazyMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFooLazyMessage:[subBuilder buildPartial]];
        break;
      }
      case 96: {
        [self setBarInt:[input readInt32]];
        break;
      }
      case 106: {
        [self setBarString:[input readString]];
        break;
      }
      case 114: {
        [self setBarCord:[input readString]];
        break;
      }
      case 122: {
        [self setBarStringPiece:[input readString]];
        break;
      }
      case 130: {
        [self setBarBytes:[input readData]];
        break;
      }
      case 136: {
        TestOneof2NestedEnum value = (TestOneof2NestedEnum)[input readEnum];
        if (TestOneof2NestedEnumIsValidValue(value)) {
          [self setBarEnum:value];
        } else {
          [unknownFields mergeVarintField:17 value:value];
        }
        break;
      }
      case 144: {
        [self setBazInt:[input readInt32]];
        break;
      }
      case 154: {
        [self setBazString:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFooInt {
  return resultTestOneof2.hasFooInt;
}
- (SInt32) fooInt {
  return resultTestOneof2.fooInt;
}
- (TestOneof2Builder*) setFooInt:(SInt32) value {
  resultTestOneof2.hasFooInt = YES;
  resultTestOneof2.fooInt = value;
  return self;
}
- (TestOneof2Builder*) clearFooInt {
  resultTestOneof2.hasFooInt = NO;
  resultTestOneof2.fooInt = 0;
  return self;
}
- (BOOL) hasFooString {
  return resultTestOneof2.hasFooString;
}
- (NSString*) fooString {
  return resultTestOneof2.fooString;
}
- (TestOneof2Builder*) setFooString:(NSString*) value {
  resultTestOneof2.hasFooString = YES;
  resultTestOneof2.fooString = value;
  return self;
}
- (TestOneof2Builder*) clearFooString {
  resultTestOneof2.hasFooString = NO;
  resultTestOneof2.fooString = @"";
  return self;
}
- (BOOL) hasFooCord {
  return resultTestOneof2.hasFooCord;
}
- (NSString*) fooCord {
  return resultTestOneof2.fooCord;
}
- (TestOneof2Builder*) setFooCord:(NSString*) value {
  resultTestOneof2.hasFooCord = YES;
  resultTestOneof2.fooCord = value;
  return self;
}
- (TestOneof2Builder*) clearFooCord {
  resultTestOneof2.hasFooCord = NO;
  resultTestOneof2.fooCord = @"";
  return self;
}
- (BOOL) hasFooStringPiece {
  return resultTestOneof2.hasFooStringPiece;
}
- (NSString*) fooStringPiece {
  return resultTestOneof2.fooStringPiece;
}
- (TestOneof2Builder*) setFooStringPiece:(NSString*) value {
  resultTestOneof2.hasFooStringPiece = YES;
  resultTestOneof2.fooStringPiece = value;
  return self;
}
- (TestOneof2Builder*) clearFooStringPiece {
  resultTestOneof2.hasFooStringPiece = NO;
  resultTestOneof2.fooStringPiece = @"";
  return self;
}
- (BOOL) hasFooBytes {
  return resultTestOneof2.hasFooBytes;
}
- (NSData*) fooBytes {
  return resultTestOneof2.fooBytes;
}
- (TestOneof2Builder*) setFooBytes:(NSData*) value {
  resultTestOneof2.hasFooBytes = YES;
  resultTestOneof2.fooBytes = value;
  return self;
}
- (TestOneof2Builder*) clearFooBytes {
  resultTestOneof2.hasFooBytes = NO;
  resultTestOneof2.fooBytes = [NSData data];
  return self;
}
- (BOOL) hasFooEnum {
  return resultTestOneof2.hasFooEnum;
}
- (TestOneof2NestedEnum) fooEnum {
  return resultTestOneof2.fooEnum;
}
- (TestOneof2Builder*) setFooEnum:(TestOneof2NestedEnum) value {
  resultTestOneof2.hasFooEnum = YES;
  resultTestOneof2.fooEnum = value;
  return self;
}
- (TestOneof2Builder*) clearFooEnum {
  resultTestOneof2.hasFooEnum = NO;
  resultTestOneof2.fooEnum = TestOneof2NestedEnumFoo;
  return self;
}
- (BOOL) hasFooMessage {
  return resultTestOneof2.hasFooMessage;
}
- (TestOneof2NestedMessage*) fooMessage {
  return resultTestOneof2.fooMessage;
}
- (TestOneof2Builder*) setFooMessage:(TestOneof2NestedMessage*) value {
  resultTestOneof2.hasFooMessage = YES;
  resultTestOneof2.fooMessage = value;
  return self;
}
- (TestOneof2Builder*) setFooMessageBuilder:(TestOneof2NestedMessageBuilder*) builderForValue {
  return [self setFooMessage:[builderForValue build]];
}
- (TestOneof2Builder*) mergeFooMessage:(TestOneof2NestedMessage*) value {
  if (resultTestOneof2.hasFooMessage &&
      resultTestOneof2.fooMessage != [TestOneof2NestedMessage defaultInstance]) {
    resultTestOneof2.fooMessage =
      [[[TestOneof2NestedMessage builderWithPrototype:resultTestOneof2.fooMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestOneof2.fooMessage = value;
  }
  resultTestOneof2.hasFooMessage = YES;
  return self;
}
- (TestOneof2Builder*) clearFooMessage {
  resultTestOneof2.hasFooMessage = NO;
  resultTestOneof2.fooMessage = [TestOneof2NestedMessage defaultInstance];
  return self;
}
- (BOOL) hasFooGroup {
  return resultTestOneof2.hasFooGroup;
}
- (TestOneof2FooGroup*) fooGroup {
  return resultTestOneof2.fooGroup;
}
- (TestOneof2Builder*) setFooGroup:(TestOneof2FooGroup*) value {
  resultTestOneof2.hasFooGroup = YES;
  resultTestOneof2.fooGroup = value;
  return self;
}
- (TestOneof2Builder*) setFooGroupBuilder:(TestOneof2FooGroupBuilder*) builderForValue {
  return [self setFooGroup:[builderForValue build]];
}
- (TestOneof2Builder*) mergeFooGroup:(TestOneof2FooGroup*) value {
  if (resultTestOneof2.hasFooGroup &&
      resultTestOneof2.fooGroup != [TestOneof2FooGroup defaultInstance]) {
    resultTestOneof2.fooGroup =
      [[[TestOneof2FooGroup builderWithPrototype:resultTestOneof2.fooGroup] mergeFrom:value] buildPartial];
  } else {
    resultTestOneof2.fooGroup = value;
  }
  resultTestOneof2.hasFooGroup = YES;
  return self;
}
- (TestOneof2Builder*) clearFooGroup {
  resultTestOneof2.hasFooGroup = NO;
  resultTestOneof2.fooGroup = [TestOneof2FooGroup defaultInstance];
  return self;
}
- (BOOL) hasFooLazyMessage {
  return resultTestOneof2.hasFooLazyMessage;
}
- (TestOneof2NestedMessage*) fooLazyMessage {
  return resultTestOneof2.fooLazyMessage;
}
- (TestOneof2Builder*) setFooLazyMessage:(TestOneof2NestedMessage*) value {
  resultTestOneof2.hasFooLazyMessage = YES;
  resultTestOneof2.fooLazyMessage = value;
  return self;
}
- (TestOneof2Builder*) setFooLazyMessageBuilder:(TestOneof2NestedMessageBuilder*) builderForValue {
  return [self setFooLazyMessage:[builderForValue build]];
}
- (TestOneof2Builder*) mergeFooLazyMessage:(TestOneof2NestedMessage*) value {
  if (resultTestOneof2.hasFooLazyMessage &&
      resultTestOneof2.fooLazyMessage != [TestOneof2NestedMessage defaultInstance]) {
    resultTestOneof2.fooLazyMessage =
      [[[TestOneof2NestedMessage builderWithPrototype:resultTestOneof2.fooLazyMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestOneof2.fooLazyMessage = value;
  }
  resultTestOneof2.hasFooLazyMessage = YES;
  return self;
}
- (TestOneof2Builder*) clearFooLazyMessage {
  resultTestOneof2.hasFooLazyMessage = NO;
  resultTestOneof2.fooLazyMessage = [TestOneof2NestedMessage defaultInstance];
  return self;
}
- (BOOL) hasBarInt {
  return resultTestOneof2.hasBarInt;
}
- (SInt32) barInt {
  return resultTestOneof2.barInt;
}
- (TestOneof2Builder*) setBarInt:(SInt32) value {
  resultTestOneof2.hasBarInt = YES;
  resultTestOneof2.barInt = value;
  return self;
}
- (TestOneof2Builder*) clearBarInt {
  resultTestOneof2.hasBarInt = NO;
  resultTestOneof2.barInt = 5;
  return self;
}
- (BOOL) hasBarString {
  return resultTestOneof2.hasBarString;
}
- (NSString*) barString {
  return resultTestOneof2.barString;
}
- (TestOneof2Builder*) setBarString:(NSString*) value {
  resultTestOneof2.hasBarString = YES;
  resultTestOneof2.barString = value;
  return self;
}
- (TestOneof2Builder*) clearBarString {
  resultTestOneof2.hasBarString = NO;
  resultTestOneof2.barString = @"STRING";
  return self;
}
- (BOOL) hasBarCord {
  return resultTestOneof2.hasBarCord;
}
- (NSString*) barCord {
  return resultTestOneof2.barCord;
}
- (TestOneof2Builder*) setBarCord:(NSString*) value {
  resultTestOneof2.hasBarCord = YES;
  resultTestOneof2.barCord = value;
  return self;
}
- (TestOneof2Builder*) clearBarCord {
  resultTestOneof2.hasBarCord = NO;
  resultTestOneof2.barCord = @"CORD";
  return self;
}
- (BOOL) hasBarStringPiece {
  return resultTestOneof2.hasBarStringPiece;
}
- (NSString*) barStringPiece {
  return resultTestOneof2.barStringPiece;
}
- (TestOneof2Builder*) setBarStringPiece:(NSString*) value {
  resultTestOneof2.hasBarStringPiece = YES;
  resultTestOneof2.barStringPiece = value;
  return self;
}
- (TestOneof2Builder*) clearBarStringPiece {
  resultTestOneof2.hasBarStringPiece = NO;
  resultTestOneof2.barStringPiece = @"SPIECE";
  return self;
}
- (BOOL) hasBarBytes {
  return resultTestOneof2.hasBarBytes;
}
- (NSData*) barBytes {
  return resultTestOneof2.barBytes;
}
- (TestOneof2Builder*) setBarBytes:(NSData*) value {
  resultTestOneof2.hasBarBytes = YES;
  resultTestOneof2.barBytes = value;
  return self;
}
- (TestOneof2Builder*) clearBarBytes {
  resultTestOneof2.hasBarBytes = NO;
  resultTestOneof2.barBytes = [NSData dataWithBytes:"BYTES" length:5];
  return self;
}
- (BOOL) hasBarEnum {
  return resultTestOneof2.hasBarEnum;
}
- (TestOneof2NestedEnum) barEnum {
  return resultTestOneof2.barEnum;
}
- (TestOneof2Builder*) setBarEnum:(TestOneof2NestedEnum) value {
  resultTestOneof2.hasBarEnum = YES;
  resultTestOneof2.barEnum = value;
  return self;
}
- (TestOneof2Builder*) clearBarEnum {
  resultTestOneof2.hasBarEnum = NO;
  resultTestOneof2.barEnum = TestOneof2NestedEnumBar;
  return self;
}
- (BOOL) hasBazInt {
  return resultTestOneof2.hasBazInt;
}
- (SInt32) bazInt {
  return resultTestOneof2.bazInt;
}
- (TestOneof2Builder*) setBazInt:(SInt32) value {
  resultTestOneof2.hasBazInt = YES;
  resultTestOneof2.bazInt = value;
  return self;
}
- (TestOneof2Builder*) clearBazInt {
  resultTestOneof2.hasBazInt = NO;
  resultTestOneof2.bazInt = 0;
  return self;
}
- (BOOL) hasBazString {
  return resultTestOneof2.hasBazString;
}
- (NSString*) bazString {
  return resultTestOneof2.bazString;
}
- (TestOneof2Builder*) setBazString:(NSString*) value {
  resultTestOneof2.hasBazString = YES;
  resultTestOneof2.bazString = value;
  return self;
}
- (TestOneof2Builder*) clearBazString {
  resultTestOneof2.hasBazString = NO;
  resultTestOneof2.bazString = @"BAZ";
  return self;
}
@end

@interface TestRequiredOneof ()
@property SInt32 fooInt;
@property (strong) NSString* fooString;
@property (strong) TestRequiredOneofNestedMessage* fooMessage;
@end

@implementation TestRequiredOneof

- (BOOL) hasFooInt {
  return !!hasFooInt_;
}
- (void) setHasFooInt:(BOOL) _value_ {
  hasFooInt_ = !!_value_;
}
@synthesize fooInt;
- (BOOL) hasFooString {
  return !!hasFooString_;
}
- (void) setHasFooString:(BOOL) _value_ {
  hasFooString_ = !!_value_;
}
@synthesize fooString;
- (BOOL) hasFooMessage {
  return !!hasFooMessage_;
}
- (void) setHasFooMessage:(BOOL) _value_ {
  hasFooMessage_ = !!_value_;
}
@synthesize fooMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.fooInt = 0;
    self.fooString = @"";
    self.fooMessage = [TestRequiredOneofNestedMessage defaultInstance];
  }
  return self;
}
static TestRequiredOneof* defaultTestRequiredOneofInstance = nil;
+ (void) initialize {
  if (self == [TestRequiredOneof class]) {
    defaultTestRequiredOneofInstance = [[TestRequiredOneof alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestRequiredOneofInstance;
}
- (instancetype) defaultInstance {
  return defaultTestRequiredOneofInstance;
}
- (BOOL) isInitialized {
  if (self.hasFooMessage) {
    if (!self.fooMessage.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFooInt) {
    [output writeInt32:1 value:self.fooInt];
  }
  if (self.hasFooString) {
    [output writeString:2 value:self.fooString];
  }
  if (self.hasFooMessage) {
    [output writeMessage:3 value:self.fooMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFooInt) {
    size_ += computeInt32Size(1, self.fooInt);
  }
  if (self.hasFooString) {
    size_ += computeStringSize(2, self.fooString);
  }
  if (self.hasFooMessage) {
    size_ += computeMessageSize(3, self.fooMessage);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestRequiredOneof*) parseFromData:(NSData*) data {
  return (TestRequiredOneof*)[[[TestRequiredOneof builder] mergeFromData:data] build];
}
+ (TestRequiredOneof*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequiredOneof*)[[[TestRequiredOneof builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestRequiredOneof*) parseFromInputStream:(NSInputStream*) input {
  return (TestRequiredOneof*)[[[TestRequiredOneof builder] mergeFromInputStream:input] build];
}
+ (TestRequiredOneof*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequiredOneof*)[[[TestRequiredOneof builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRequiredOneof*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestRequiredOneof*)[[[TestRequiredOneof builder] mergeFromCodedInputStream:input] build];
}
+ (TestRequiredOneof*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequiredOneof*)[[[TestRequiredOneof builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRequiredOneofBuilder*) builder {
  return [[TestRequiredOneofBuilder alloc] init];
}
+ (TestRequiredOneofBuilder*) builderWithPrototype:(TestRequiredOneof*) prototype {
  return [[TestRequiredOneof builder] mergeFrom:prototype];
}
- (TestRequiredOneofBuilder*) builder {
  return [TestRequiredOneof builder];
}
- (TestRequiredOneofBuilder*) toBuilder {
  return [TestRequiredOneof builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFooInt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooInt", [NSNumber numberWithInteger:self.fooInt]];
  }
  if (self.hasFooString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fooString", self.fooString];
  }
  if (self.hasFooMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"fooMessage"];
    [self.fooMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFooInt) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fooInt] forKey: @"fooInt"];
  }
  if (self.hasFooString) {
    [dictionary setObject: self.fooString forKey: @"fooString"];
  }
  if (self.hasFooMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.fooMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"fooMessage"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRequiredOneof class]]) {
    return NO;
  }
  TestRequiredOneof *otherMessage = other;
  return
      self.hasFooInt == otherMessage.hasFooInt &&
      (!self.hasFooInt || self.fooInt == otherMessage.fooInt) &&
      self.hasFooString == otherMessage.hasFooString &&
      (!self.hasFooString || [self.fooString isEqual:otherMessage.fooString]) &&
      self.hasFooMessage == otherMessage.hasFooMessage &&
      (!self.hasFooMessage || [self.fooMessage isEqual:otherMessage.fooMessage]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFooInt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fooInt] hash];
  }
  if (self.hasFooString) {
    hashCode = hashCode * 31 + [self.fooString hash];
  }
  if (self.hasFooMessage) {
    hashCode = hashCode * 31 + [self.fooMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestRequiredOneofNestedMessage ()
@property Float64 requiredDouble;
@end

@implementation TestRequiredOneofNestedMessage

- (BOOL) hasRequiredDouble {
  return !!hasRequiredDouble_;
}
- (void) setHasRequiredDouble:(BOOL) _value_ {
  hasRequiredDouble_ = !!_value_;
}
@synthesize requiredDouble;
- (instancetype) init {
  if ((self = [super init])) {
    self.requiredDouble = 0;
  }
  return self;
}
static TestRequiredOneofNestedMessage* defaultTestRequiredOneofNestedMessageInstance = nil;
+ (void) initialize {
  if (self == [TestRequiredOneofNestedMessage class]) {
    defaultTestRequiredOneofNestedMessageInstance = [[TestRequiredOneofNestedMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestRequiredOneofNestedMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultTestRequiredOneofNestedMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRequiredDouble) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRequiredDouble) {
    [output writeDouble:1 value:self.requiredDouble];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequiredDouble) {
    size_ += computeDoubleSize(1, self.requiredDouble);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestRequiredOneofNestedMessage*) parseFromData:(NSData*) data {
  return (TestRequiredOneofNestedMessage*)[[[TestRequiredOneofNestedMessage builder] mergeFromData:data] build];
}
+ (TestRequiredOneofNestedMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequiredOneofNestedMessage*)[[[TestRequiredOneofNestedMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestRequiredOneofNestedMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TestRequiredOneofNestedMessage*)[[[TestRequiredOneofNestedMessage builder] mergeFromInputStream:input] build];
}
+ (TestRequiredOneofNestedMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequiredOneofNestedMessage*)[[[TestRequiredOneofNestedMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRequiredOneofNestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestRequiredOneofNestedMessage*)[[[TestRequiredOneofNestedMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TestRequiredOneofNestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequiredOneofNestedMessage*)[[[TestRequiredOneofNestedMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRequiredOneofNestedMessageBuilder*) builder {
  return [[TestRequiredOneofNestedMessageBuilder alloc] init];
}
+ (TestRequiredOneofNestedMessageBuilder*) builderWithPrototype:(TestRequiredOneofNestedMessage*) prototype {
  return [[TestRequiredOneofNestedMessage builder] mergeFrom:prototype];
}
- (TestRequiredOneofNestedMessageBuilder*) builder {
  return [TestRequiredOneofNestedMessage builder];
}
- (TestRequiredOneofNestedMessageBuilder*) toBuilder {
  return [TestRequiredOneofNestedMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRequiredDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requiredDouble", [NSNumber numberWithDouble:self.requiredDouble]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRequiredDouble) {
    [dictionary setObject: [NSNumber numberWithDouble:self.requiredDouble] forKey: @"requiredDouble"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRequiredOneofNestedMessage class]]) {
    return NO;
  }
  TestRequiredOneofNestedMessage *otherMessage = other;
  return
      self.hasRequiredDouble == otherMessage.hasRequiredDouble &&
      (!self.hasRequiredDouble || self.requiredDouble == otherMessage.requiredDouble) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRequiredDouble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.requiredDouble] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestRequiredOneofNestedMessageBuilder()
@property (strong) TestRequiredOneofNestedMessage* resultNestedMessage;
@end

@implementation TestRequiredOneofNestedMessageBuilder
@synthesize resultNestedMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNestedMessage = [[TestRequiredOneofNestedMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNestedMessage;
}
- (TestRequiredOneofNestedMessageBuilder*) clear {
  self.resultNestedMessage = [[TestRequiredOneofNestedMessage alloc] init];
  return self;
}
- (TestRequiredOneofNestedMessageBuilder*) clone {
  return [TestRequiredOneofNestedMessage builderWithPrototype:resultNestedMessage];
}
- (TestRequiredOneofNestedMessage*) defaultInstance {
  return [TestRequiredOneofNestedMessage defaultInstance];
}
- (TestRequiredOneofNestedMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRequiredOneofNestedMessage*) buildPartial {
  TestRequiredOneofNestedMessage* returnMe = resultNestedMessage;
  self.resultNestedMessage = nil;
  return returnMe;
}
- (TestRequiredOneofNestedMessageBuilder*) mergeFrom:(TestRequiredOneofNestedMessage*) other {
  if (other == [TestRequiredOneofNestedMessage defaultInstance]) {
    return self;
  }
  if (other.hasRequiredDouble) {
    [self setRequiredDouble:other.requiredDouble];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestRequiredOneofNestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestRequiredOneofNestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setRequiredDouble:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasRequiredDouble {
  return resultNestedMessage.hasRequiredDouble;
}
- (Float64) requiredDouble {
  return resultNestedMessage.requiredDouble;
}
- (TestRequiredOneofNestedMessageBuilder*) setRequiredDouble:(Float64) value {
  resultNestedMessage.hasRequiredDouble = YES;
  resultNestedMessage.requiredDouble = value;
  return self;
}
- (TestRequiredOneofNestedMessageBuilder*) clearRequiredDouble {
  resultNestedMessage.hasRequiredDouble = NO;
  resultNestedMessage.requiredDouble = 0;
  return self;
}
@end

@interface TestRequiredOneofBuilder()
@property (strong) TestRequiredOneof* resultTestRequiredOneof;
@end

@implementation TestRequiredOneofBuilder
@synthesize resultTestRequiredOneof;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestRequiredOneof = [[TestRequiredOneof alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestRequiredOneof;
}
- (TestRequiredOneofBuilder*) clear {
  self.resultTestRequiredOneof = [[TestRequiredOneof alloc] init];
  return self;
}
- (TestRequiredOneofBuilder*) clone {
  return [TestRequiredOneof builderWithPrototype:resultTestRequiredOneof];
}
- (TestRequiredOneof*) defaultInstance {
  return [TestRequiredOneof defaultInstance];
}
- (TestRequiredOneof*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRequiredOneof*) buildPartial {
  TestRequiredOneof* returnMe = resultTestRequiredOneof;
  self.resultTestRequiredOneof = nil;
  return returnMe;
}
- (TestRequiredOneofBuilder*) mergeFrom:(TestRequiredOneof*) other {
  if (other == [TestRequiredOneof defaultInstance]) {
    return self;
  }
  if (other.hasFooInt) {
    [self setFooInt:other.fooInt];
  }
  if (other.hasFooString) {
    [self setFooString:other.fooString];
  }
  if (other.hasFooMessage) {
    [self mergeFooMessage:other.fooMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestRequiredOneofBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestRequiredOneofBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFooInt:[input readInt32]];
        break;
      }
      case 18: {
        [self setFooString:[input readString]];
        break;
      }
      case 26: {
        TestRequiredOneofNestedMessageBuilder* subBuilder = [TestRequiredOneofNestedMessage builder];
        if (self.hasFooMessage) {
          [subBuilder mergeFrom:self.fooMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setFooMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasFooInt {
  return resultTestRequiredOneof.hasFooInt;
}
- (SInt32) fooInt {
  return resultTestRequiredOneof.fooInt;
}
- (TestRequiredOneofBuilder*) setFooInt:(SInt32) value {
  resultTestRequiredOneof.hasFooInt = YES;
  resultTestRequiredOneof.fooInt = value;
  return self;
}
- (TestRequiredOneofBuilder*) clearFooInt {
  resultTestRequiredOneof.hasFooInt = NO;
  resultTestRequiredOneof.fooInt = 0;
  return self;
}
- (BOOL) hasFooString {
  return resultTestRequiredOneof.hasFooString;
}
- (NSString*) fooString {
  return resultTestRequiredOneof.fooString;
}
- (TestRequiredOneofBuilder*) setFooString:(NSString*) value {
  resultTestRequiredOneof.hasFooString = YES;
  resultTestRequiredOneof.fooString = value;
  return self;
}
- (TestRequiredOneofBuilder*) clearFooString {
  resultTestRequiredOneof.hasFooString = NO;
  resultTestRequiredOneof.fooString = @"";
  return self;
}
- (BOOL) hasFooMessage {
  return resultTestRequiredOneof.hasFooMessage;
}
- (TestRequiredOneofNestedMessage*) fooMessage {
  return resultTestRequiredOneof.fooMessage;
}
- (TestRequiredOneofBuilder*) setFooMessage:(TestRequiredOneofNestedMessage*) value {
  resultTestRequiredOneof.hasFooMessage = YES;
  resultTestRequiredOneof.fooMessage = value;
  return self;
}
- (TestRequiredOneofBuilder*) setFooMessageBuilder:(TestRequiredOneofNestedMessageBuilder*) builderForValue {
  return [self setFooMessage:[builderForValue build]];
}
- (TestRequiredOneofBuilder*) mergeFooMessage:(TestRequiredOneofNestedMessage*) value {
  if (resultTestRequiredOneof.hasFooMessage &&
      resultTestRequiredOneof.fooMessage != [TestRequiredOneofNestedMessage defaultInstance]) {
    resultTestRequiredOneof.fooMessage =
      [[[TestRequiredOneofNestedMessage builderWithPrototype:resultTestRequiredOneof.fooMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestRequiredOneof.fooMessage = value;
  }
  resultTestRequiredOneof.hasFooMessage = YES;
  return self;
}
- (TestRequiredOneofBuilder*) clearFooMessage {
  resultTestRequiredOneof.hasFooMessage = NO;
  resultTestRequiredOneof.fooMessage = [TestRequiredOneofNestedMessage defaultInstance];
  return self;
}
@end

@interface TestPackedTypes ()
@property (strong) PBAppendableArray * packedInt32Array;
@property (strong) PBAppendableArray * packedInt64Array;
@property (strong) PBAppendableArray * packedUint32Array;
@property (strong) PBAppendableArray * packedUint64Array;
@property (strong) PBAppendableArray * packedSint32Array;
@property (strong) PBAppendableArray * packedSint64Array;
@property (strong) PBAppendableArray * packedFixed32Array;
@property (strong) PBAppendableArray * packedFixed64Array;
@property (strong) PBAppendableArray * packedSfixed32Array;
@property (strong) PBAppendableArray * packedSfixed64Array;
@property (strong) PBAppendableArray * packedFloatArray;
@property (strong) PBAppendableArray * packedDoubleArray;
@property (strong) PBAppendableArray * packedBoolArray;
@property (strong) PBAppendableArray * packedEnumArray;
@end

@implementation TestPackedTypes

@synthesize packedInt32Array;
@dynamic packedInt32;
@synthesize packedInt64Array;
@dynamic packedInt64;
@synthesize packedUint32Array;
@dynamic packedUint32;
@synthesize packedUint64Array;
@dynamic packedUint64;
@synthesize packedSint32Array;
@dynamic packedSint32;
@synthesize packedSint64Array;
@dynamic packedSint64;
@synthesize packedFixed32Array;
@dynamic packedFixed32;
@synthesize packedFixed64Array;
@dynamic packedFixed64;
@synthesize packedSfixed32Array;
@dynamic packedSfixed32;
@synthesize packedSfixed64Array;
@dynamic packedSfixed64;
@synthesize packedFloatArray;
@dynamic packedFloat;
@synthesize packedDoubleArray;
@dynamic packedDouble;
@synthesize packedBoolArray;
@dynamic packedBool;
@synthesize packedEnumArray;
@dynamic packedEnum;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestPackedTypes* defaultTestPackedTypesInstance = nil;
+ (void) initialize {
  if (self == [TestPackedTypes class]) {
    defaultTestPackedTypesInstance = [[TestPackedTypes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestPackedTypesInstance;
}
- (instancetype) defaultInstance {
  return defaultTestPackedTypesInstance;
}
- (PBArray *)packedInt32 {
  return packedInt32Array;
}
- (SInt32)packedInt32AtIndex:(NSUInteger)index {
  return [packedInt32Array int32AtIndex:index];
}
- (PBArray *)packedInt64 {
  return packedInt64Array;
}
- (SInt64)packedInt64AtIndex:(NSUInteger)index {
  return [packedInt64Array int64AtIndex:index];
}
- (PBArray *)packedUint32 {
  return packedUint32Array;
}
- (UInt32)packedUint32AtIndex:(NSUInteger)index {
  return [packedUint32Array uint32AtIndex:index];
}
- (PBArray *)packedUint64 {
  return packedUint64Array;
}
- (UInt64)packedUint64AtIndex:(NSUInteger)index {
  return [packedUint64Array uint64AtIndex:index];
}
- (PBArray *)packedSint32 {
  return packedSint32Array;
}
- (SInt32)packedSint32AtIndex:(NSUInteger)index {
  return [packedSint32Array int32AtIndex:index];
}
- (PBArray *)packedSint64 {
  return packedSint64Array;
}
- (SInt64)packedSint64AtIndex:(NSUInteger)index {
  return [packedSint64Array int64AtIndex:index];
}
- (PBArray *)packedFixed32 {
  return packedFixed32Array;
}
- (UInt32)packedFixed32AtIndex:(NSUInteger)index {
  return [packedFixed32Array uint32AtIndex:index];
}
- (PBArray *)packedFixed64 {
  return packedFixed64Array;
}
- (UInt64)packedFixed64AtIndex:(NSUInteger)index {
  return [packedFixed64Array uint64AtIndex:index];
}
- (PBArray *)packedSfixed32 {
  return packedSfixed32Array;
}
- (SInt32)packedSfixed32AtIndex:(NSUInteger)index {
  return [packedSfixed32Array int32AtIndex:index];
}
- (PBArray *)packedSfixed64 {
  return packedSfixed64Array;
}
- (SInt64)packedSfixed64AtIndex:(NSUInteger)index {
  return [packedSfixed64Array int64AtIndex:index];
}
- (PBArray *)packedFloat {
  return packedFloatArray;
}
- (Float32)packedFloatAtIndex:(NSUInteger)index {
  return [packedFloatArray floatAtIndex:index];
}
- (PBArray *)packedDouble {
  return packedDoubleArray;
}
- (Float64)packedDoubleAtIndex:(NSUInteger)index {
  return [packedDoubleArray doubleAtIndex:index];
}
- (PBArray *)packedBool {
  return packedBoolArray;
}
- (BOOL)packedBoolAtIndex:(NSUInteger)index {
  return [packedBoolArray boolAtIndex:index];
}
- (PBArray *)packedEnum {
  return packedEnumArray;
}
- (ForeignEnum)packedEnumAtIndex:(NSUInteger)index {
  return (ForeignEnum)[packedEnumArray enumAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger packedInt32ArrayCount = self.packedInt32Array.count;
  if (packedInt32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.packedInt32Array.data;
    [output writeRawVarint32:722];
    [output writeRawVarint32:packedInt32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedInt32ArrayCount; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedInt64ArrayCount = self.packedInt64Array.count;
  if (packedInt64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.packedInt64Array.data;
    [output writeRawVarint32:730];
    [output writeRawVarint32:packedInt64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedInt64ArrayCount; ++i) {
      [output writeInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedUint32ArrayCount = self.packedUint32Array.count;
  if (packedUint32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.packedUint32Array.data;
    [output writeRawVarint32:738];
    [output writeRawVarint32:packedUint32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedUint32ArrayCount; ++i) {
      [output writeUInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedUint64ArrayCount = self.packedUint64Array.count;
  if (packedUint64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.packedUint64Array.data;
    [output writeRawVarint32:746];
    [output writeRawVarint32:packedUint64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedUint64ArrayCount; ++i) {
      [output writeUInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedSint32ArrayCount = self.packedSint32Array.count;
  if (packedSint32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.packedSint32Array.data;
    [output writeRawVarint32:754];
    [output writeRawVarint32:packedSint32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSint32ArrayCount; ++i) {
      [output writeSInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedSint64ArrayCount = self.packedSint64Array.count;
  if (packedSint64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.packedSint64Array.data;
    [output writeRawVarint32:762];
    [output writeRawVarint32:packedSint64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSint64ArrayCount; ++i) {
      [output writeSInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedFixed32ArrayCount = self.packedFixed32Array.count;
  if (packedFixed32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.packedFixed32Array.data;
    [output writeRawVarint32:770];
    [output writeRawVarint32:packedFixed32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFixed32ArrayCount; ++i) {
      [output writeFixed32NoTag:values[i]];
    }
  }
  const NSUInteger packedFixed64ArrayCount = self.packedFixed64Array.count;
  if (packedFixed64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.packedFixed64Array.data;
    [output writeRawVarint32:778];
    [output writeRawVarint32:packedFixed64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFixed64ArrayCount; ++i) {
      [output writeFixed64NoTag:values[i]];
    }
  }
  const NSUInteger packedSfixed32ArrayCount = self.packedSfixed32Array.count;
  if (packedSfixed32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.packedSfixed32Array.data;
    [output writeRawVarint32:786];
    [output writeRawVarint32:packedSfixed32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSfixed32ArrayCount; ++i) {
      [output writeSFixed32NoTag:values[i]];
    }
  }
  const NSUInteger packedSfixed64ArrayCount = self.packedSfixed64Array.count;
  if (packedSfixed64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.packedSfixed64Array.data;
    [output writeRawVarint32:794];
    [output writeRawVarint32:packedSfixed64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSfixed64ArrayCount; ++i) {
      [output writeSFixed64NoTag:values[i]];
    }
  }
  const NSUInteger packedFloatArrayCount = self.packedFloatArray.count;
  if (packedFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.packedFloatArray.data;
    [output writeRawVarint32:802];
    [output writeRawVarint32:packedFloatMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFloatArrayCount; ++i) {
      [output writeFloatNoTag:values[i]];
    }
  }
  const NSUInteger packedDoubleArrayCount = self.packedDoubleArray.count;
  if (packedDoubleArrayCount > 0) {
    const Float64 *values = (const Float64 *)self.packedDoubleArray.data;
    [output writeRawVarint32:810];
    [output writeRawVarint32:packedDoubleMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedDoubleArrayCount; ++i) {
      [output writeDoubleNoTag:values[i]];
    }
  }
  const NSUInteger packedBoolArrayCount = self.packedBoolArray.count;
  if (packedBoolArrayCount > 0) {
    const BOOL *values = (const BOOL *)self.packedBoolArray.data;
    [output writeRawVarint32:818];
    [output writeRawVarint32:packedBoolMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedBoolArrayCount; ++i) {
      [output writeBoolNoTag:values[i]];
    }
  }
  const NSUInteger packedEnumArrayCount = self.packedEnumArray.count;
  const ForeignEnum *packedEnumArrayValues = (const ForeignEnum *)self.packedEnumArray.data;
  if (self.packedEnumArray.count > 0) {
    [output writeRawVarint32:826];
    [output writeRawVarint32:packedEnumMemoizedSerializedSize];
  }
  for (NSUInteger i = 0; i < packedEnumArrayCount; ++i) {
    [output writeEnumNoTag:packedEnumArrayValues[i]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedInt32Array.count;
    const SInt32 *values = (const SInt32 *)self.packedInt32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedInt32MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedInt64Array.count;
    const SInt64 *values = (const SInt64 *)self.packedInt64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedInt64MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedUint32Array.count;
    const UInt32 *values = (const UInt32 *)self.packedUint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedUint32MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedUint64Array.count;
    const UInt64 *values = (const UInt64 *)self.packedUint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedUint64MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedSint32Array.count;
    const SInt32 *values = (const SInt32 *)self.packedSint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedSint32MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedSint64Array.count;
    const SInt64 *values = (const SInt64 *)self.packedSint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedSint64MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedFixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedFixed32MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedFixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedFixed64MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedSfixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedSfixed32MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedSfixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedSfixed64MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedFloatArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedFloatMemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedDoubleArray.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedDoubleMemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedBoolArray.count;
    dataSize = (SInt32)(1 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedBoolMemoizedSerializedSize = dataSize;
  }
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.packedEnumArray.count;
    const ForeignEnum *values = (const ForeignEnum *)self.packedEnumArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeRawVarint32Size(dataSize);
    }
    packedEnumMemoizedSerializedSize = dataSize;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestPackedTypes*) parseFromData:(NSData*) data {
  return (TestPackedTypes*)[[[TestPackedTypes builder] mergeFromData:data] build];
}
+ (TestPackedTypes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedTypes*)[[[TestPackedTypes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestPackedTypes*) parseFromInputStream:(NSInputStream*) input {
  return (TestPackedTypes*)[[[TestPackedTypes builder] mergeFromInputStream:input] build];
}
+ (TestPackedTypes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedTypes*)[[[TestPackedTypes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestPackedTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestPackedTypes*)[[[TestPackedTypes builder] mergeFromCodedInputStream:input] build];
}
+ (TestPackedTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedTypes*)[[[TestPackedTypes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestPackedTypesBuilder*) builder {
  return [[TestPackedTypesBuilder alloc] init];
}
+ (TestPackedTypesBuilder*) builderWithPrototype:(TestPackedTypes*) prototype {
  return [[TestPackedTypes builder] mergeFrom:prototype];
}
- (TestPackedTypesBuilder*) builder {
  return [TestPackedTypes builder];
}
- (TestPackedTypesBuilder*) toBuilder {
  return [TestPackedTypes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.packedInt32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedInt32", obj];
  }];
  [self.packedInt64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedInt64", obj];
  }];
  [self.packedUint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedUint32", obj];
  }];
  [self.packedUint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedUint64", obj];
  }];
  [self.packedSint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSint32", obj];
  }];
  [self.packedSint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSint64", obj];
  }];
  [self.packedFixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFixed32", obj];
  }];
  [self.packedFixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFixed64", obj];
  }];
  [self.packedSfixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSfixed32", obj];
  }];
  [self.packedSfixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSfixed64", obj];
  }];
  [self.packedFloatArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFloat", obj];
  }];
  [self.packedDoubleArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedDouble", obj];
  }];
  [self.packedBoolArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedBool", obj];
  }];
  [self.packedEnumArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedEnum", NSStringFromForeignEnum([(NSNumber *)element intValue])];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * packedInt32ArrayArray = [NSMutableArray new];
  NSUInteger packedInt32ArrayCount=self.packedInt32Array.count;
  for(int i=0;i<packedInt32ArrayCount;i++){
    [packedInt32ArrayArray addObject: @([self.packedInt32Array int32AtIndex:i])];
  }
  [dictionary setObject: packedInt32ArrayArray forKey: @"packedInt32"];
  NSMutableArray * packedInt64ArrayArray = [NSMutableArray new];
  NSUInteger packedInt64ArrayCount=self.packedInt64Array.count;
  for(int i=0;i<packedInt64ArrayCount;i++){
    [packedInt64ArrayArray addObject: @([self.packedInt64Array int64AtIndex:i])];
  }
  [dictionary setObject: packedInt64ArrayArray forKey: @"packedInt64"];
  NSMutableArray * packedUint32ArrayArray = [NSMutableArray new];
  NSUInteger packedUint32ArrayCount=self.packedUint32Array.count;
  for(int i=0;i<packedUint32ArrayCount;i++){
    [packedUint32ArrayArray addObject: @([self.packedUint32Array uint32AtIndex:i])];
  }
  [dictionary setObject: packedUint32ArrayArray forKey: @"packedUint32"];
  NSMutableArray * packedUint64ArrayArray = [NSMutableArray new];
  NSUInteger packedUint64ArrayCount=self.packedUint64Array.count;
  for(int i=0;i<packedUint64ArrayCount;i++){
    [packedUint64ArrayArray addObject: @([self.packedUint64Array uint64AtIndex:i])];
  }
  [dictionary setObject: packedUint64ArrayArray forKey: @"packedUint64"];
  NSMutableArray * packedSint32ArrayArray = [NSMutableArray new];
  NSUInteger packedSint32ArrayCount=self.packedSint32Array.count;
  for(int i=0;i<packedSint32ArrayCount;i++){
    [packedSint32ArrayArray addObject: @([self.packedSint32Array int32AtIndex:i])];
  }
  [dictionary setObject: packedSint32ArrayArray forKey: @"packedSint32"];
  NSMutableArray * packedSint64ArrayArray = [NSMutableArray new];
  NSUInteger packedSint64ArrayCount=self.packedSint64Array.count;
  for(int i=0;i<packedSint64ArrayCount;i++){
    [packedSint64ArrayArray addObject: @([self.packedSint64Array int64AtIndex:i])];
  }
  [dictionary setObject: packedSint64ArrayArray forKey: @"packedSint64"];
  NSMutableArray * packedFixed32ArrayArray = [NSMutableArray new];
  NSUInteger packedFixed32ArrayCount=self.packedFixed32Array.count;
  for(int i=0;i<packedFixed32ArrayCount;i++){
    [packedFixed32ArrayArray addObject: @([self.packedFixed32Array uint32AtIndex:i])];
  }
  [dictionary setObject: packedFixed32ArrayArray forKey: @"packedFixed32"];
  NSMutableArray * packedFixed64ArrayArray = [NSMutableArray new];
  NSUInteger packedFixed64ArrayCount=self.packedFixed64Array.count;
  for(int i=0;i<packedFixed64ArrayCount;i++){
    [packedFixed64ArrayArray addObject: @([self.packedFixed64Array uint64AtIndex:i])];
  }
  [dictionary setObject: packedFixed64ArrayArray forKey: @"packedFixed64"];
  NSMutableArray * packedSfixed32ArrayArray = [NSMutableArray new];
  NSUInteger packedSfixed32ArrayCount=self.packedSfixed32Array.count;
  for(int i=0;i<packedSfixed32ArrayCount;i++){
    [packedSfixed32ArrayArray addObject: @([self.packedSfixed32Array int32AtIndex:i])];
  }
  [dictionary setObject: packedSfixed32ArrayArray forKey: @"packedSfixed32"];
  NSMutableArray * packedSfixed64ArrayArray = [NSMutableArray new];
  NSUInteger packedSfixed64ArrayCount=self.packedSfixed64Array.count;
  for(int i=0;i<packedSfixed64ArrayCount;i++){
    [packedSfixed64ArrayArray addObject: @([self.packedSfixed64Array int64AtIndex:i])];
  }
  [dictionary setObject: packedSfixed64ArrayArray forKey: @"packedSfixed64"];
  NSMutableArray * packedFloatArrayArray = [NSMutableArray new];
  NSUInteger packedFloatArrayCount=self.packedFloatArray.count;
  for(int i=0;i<packedFloatArrayCount;i++){
    [packedFloatArrayArray addObject: @([self.packedFloatArray floatAtIndex:i])];
  }
  [dictionary setObject: packedFloatArrayArray forKey: @"packedFloat"];
  NSMutableArray * packedDoubleArrayArray = [NSMutableArray new];
  NSUInteger packedDoubleArrayCount=self.packedDoubleArray.count;
  for(int i=0;i<packedDoubleArrayCount;i++){
    [packedDoubleArrayArray addObject: @([self.packedDoubleArray doubleAtIndex:i])];
  }
  [dictionary setObject: packedDoubleArrayArray forKey: @"packedDouble"];
  NSMutableArray * packedBoolArrayArray = [NSMutableArray new];
  NSUInteger packedBoolArrayCount=self.packedBoolArray.count;
  for(int i=0;i<packedBoolArrayCount;i++){
    [packedBoolArrayArray addObject: @([self.packedBoolArray boolAtIndex:i])];
  }
  [dictionary setObject: packedBoolArrayArray forKey: @"packedBool"];
  const NSUInteger packedEnumArrayCount = self.packedEnumArray.count;
  if (packedEnumArrayCount > 0) {
    const ForeignEnum *packedEnumArrayValues = (const ForeignEnum *)self.packedEnumArray.data;
    NSMutableArray * packedEnumArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < packedEnumArrayCount; ++i) {
      [packedEnumArrayArray addObject: @(packedEnumArrayValues[i])];
    }
    [dictionary setObject: packedEnumArrayArray forKey: @"packedEnum"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestPackedTypes class]]) {
    return NO;
  }
  TestPackedTypes *otherMessage = other;
  return
      [self.packedInt32Array isEqualToArray:otherMessage.packedInt32Array] &&
      [self.packedInt64Array isEqualToArray:otherMessage.packedInt64Array] &&
      [self.packedUint32Array isEqualToArray:otherMessage.packedUint32Array] &&
      [self.packedUint64Array isEqualToArray:otherMessage.packedUint64Array] &&
      [self.packedSint32Array isEqualToArray:otherMessage.packedSint32Array] &&
      [self.packedSint64Array isEqualToArray:otherMessage.packedSint64Array] &&
      [self.packedFixed32Array isEqualToArray:otherMessage.packedFixed32Array] &&
      [self.packedFixed64Array isEqualToArray:otherMessage.packedFixed64Array] &&
      [self.packedSfixed32Array isEqualToArray:otherMessage.packedSfixed32Array] &&
      [self.packedSfixed64Array isEqualToArray:otherMessage.packedSfixed64Array] &&
      [self.packedFloatArray isEqualToArray:otherMessage.packedFloatArray] &&
      [self.packedDoubleArray isEqualToArray:otherMessage.packedDoubleArray] &&
      [self.packedBoolArray isEqualToArray:otherMessage.packedBoolArray] &&
      [self.packedEnumArray isEqualToArray:otherMessage.packedEnumArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.packedInt32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedInt64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedUint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedUint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedSint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedSint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedFixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedFixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedSfixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedSfixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedFloatArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedDoubleArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedBoolArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedEnumArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestPackedTypesBuilder()
@property (strong) TestPackedTypes* resultTestPackedTypes;
@end

@implementation TestPackedTypesBuilder
@synthesize resultTestPackedTypes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestPackedTypes = [[TestPackedTypes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestPackedTypes;
}
- (TestPackedTypesBuilder*) clear {
  self.resultTestPackedTypes = [[TestPackedTypes alloc] init];
  return self;
}
- (TestPackedTypesBuilder*) clone {
  return [TestPackedTypes builderWithPrototype:resultTestPackedTypes];
}
- (TestPackedTypes*) defaultInstance {
  return [TestPackedTypes defaultInstance];
}
- (TestPackedTypes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestPackedTypes*) buildPartial {
  TestPackedTypes* returnMe = resultTestPackedTypes;
  self.resultTestPackedTypes = nil;
  return returnMe;
}
- (TestPackedTypesBuilder*) mergeFrom:(TestPackedTypes*) other {
  if (other == [TestPackedTypes defaultInstance]) {
    return self;
  }
  if (other.packedInt32Array.count > 0) {
    if (resultTestPackedTypes.packedInt32Array == nil) {
      resultTestPackedTypes.packedInt32Array = [other.packedInt32Array copy];
    } else {
      [resultTestPackedTypes.packedInt32Array appendArray:other.packedInt32Array];
    }
  }
  if (other.packedInt64Array.count > 0) {
    if (resultTestPackedTypes.packedInt64Array == nil) {
      resultTestPackedTypes.packedInt64Array = [other.packedInt64Array copy];
    } else {
      [resultTestPackedTypes.packedInt64Array appendArray:other.packedInt64Array];
    }
  }
  if (other.packedUint32Array.count > 0) {
    if (resultTestPackedTypes.packedUint32Array == nil) {
      resultTestPackedTypes.packedUint32Array = [other.packedUint32Array copy];
    } else {
      [resultTestPackedTypes.packedUint32Array appendArray:other.packedUint32Array];
    }
  }
  if (other.packedUint64Array.count > 0) {
    if (resultTestPackedTypes.packedUint64Array == nil) {
      resultTestPackedTypes.packedUint64Array = [other.packedUint64Array copy];
    } else {
      [resultTestPackedTypes.packedUint64Array appendArray:other.packedUint64Array];
    }
  }
  if (other.packedSint32Array.count > 0) {
    if (resultTestPackedTypes.packedSint32Array == nil) {
      resultTestPackedTypes.packedSint32Array = [other.packedSint32Array copy];
    } else {
      [resultTestPackedTypes.packedSint32Array appendArray:other.packedSint32Array];
    }
  }
  if (other.packedSint64Array.count > 0) {
    if (resultTestPackedTypes.packedSint64Array == nil) {
      resultTestPackedTypes.packedSint64Array = [other.packedSint64Array copy];
    } else {
      [resultTestPackedTypes.packedSint64Array appendArray:other.packedSint64Array];
    }
  }
  if (other.packedFixed32Array.count > 0) {
    if (resultTestPackedTypes.packedFixed32Array == nil) {
      resultTestPackedTypes.packedFixed32Array = [other.packedFixed32Array copy];
    } else {
      [resultTestPackedTypes.packedFixed32Array appendArray:other.packedFixed32Array];
    }
  }
  if (other.packedFixed64Array.count > 0) {
    if (resultTestPackedTypes.packedFixed64Array == nil) {
      resultTestPackedTypes.packedFixed64Array = [other.packedFixed64Array copy];
    } else {
      [resultTestPackedTypes.packedFixed64Array appendArray:other.packedFixed64Array];
    }
  }
  if (other.packedSfixed32Array.count > 0) {
    if (resultTestPackedTypes.packedSfixed32Array == nil) {
      resultTestPackedTypes.packedSfixed32Array = [other.packedSfixed32Array copy];
    } else {
      [resultTestPackedTypes.packedSfixed32Array appendArray:other.packedSfixed32Array];
    }
  }
  if (other.packedSfixed64Array.count > 0) {
    if (resultTestPackedTypes.packedSfixed64Array == nil) {
      resultTestPackedTypes.packedSfixed64Array = [other.packedSfixed64Array copy];
    } else {
      [resultTestPackedTypes.packedSfixed64Array appendArray:other.packedSfixed64Array];
    }
  }
  if (other.packedFloatArray.count > 0) {
    if (resultTestPackedTypes.packedFloatArray == nil) {
      resultTestPackedTypes.packedFloatArray = [other.packedFloatArray copy];
    } else {
      [resultTestPackedTypes.packedFloatArray appendArray:other.packedFloatArray];
    }
  }
  if (other.packedDoubleArray.count > 0) {
    if (resultTestPackedTypes.packedDoubleArray == nil) {
      resultTestPackedTypes.packedDoubleArray = [other.packedDoubleArray copy];
    } else {
      [resultTestPackedTypes.packedDoubleArray appendArray:other.packedDoubleArray];
    }
  }
  if (other.packedBoolArray.count > 0) {
    if (resultTestPackedTypes.packedBoolArray == nil) {
      resultTestPackedTypes.packedBoolArray = [other.packedBoolArray copy];
    } else {
      [resultTestPackedTypes.packedBoolArray appendArray:other.packedBoolArray];
    }
  }
  if (other.packedEnumArray.count > 0) {
    if (resultTestPackedTypes.packedEnumArray == nil) {
      resultTestPackedTypes.packedEnumArray = [other.packedEnumArray copy];
    } else {
      [resultTestPackedTypes.packedEnumArray appendArray:other.packedEnumArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestPackedTypesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestPackedTypesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 722: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedInt32Array == nil) {
          resultTestPackedTypes.packedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedInt32Array addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 730: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedInt64Array == nil) {
          resultTestPackedTypes.packedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedInt64Array addInt64:[input readInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 738: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedUint32Array == nil) {
          resultTestPackedTypes.packedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedUint32Array addUint32:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 746: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedUint64Array == nil) {
          resultTestPackedTypes.packedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedUint64Array addUint64:[input readUInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 754: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedSint32Array == nil) {
          resultTestPackedTypes.packedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedSint32Array addInt32:[input readSInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 762: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedSint64Array == nil) {
          resultTestPackedTypes.packedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedSint64Array addInt64:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 770: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedFixed32Array == nil) {
          resultTestPackedTypes.packedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedFixed32Array addUint32:[input readFixed32]];
        }
        [input popLimit:limit];
        break;
      }
      case 778: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedFixed64Array == nil) {
          resultTestPackedTypes.packedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedFixed64Array addUint64:[input readFixed64]];
        }
        [input popLimit:limit];
        break;
      }
      case 786: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedSfixed32Array == nil) {
          resultTestPackedTypes.packedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedSfixed32Array addInt32:[input readSFixed32]];
        }
        [input popLimit:limit];
        break;
      }
      case 794: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedSfixed64Array == nil) {
          resultTestPackedTypes.packedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedSfixed64Array addInt64:[input readSFixed64]];
        }
        [input popLimit:limit];
        break;
      }
      case 802: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedFloatArray == nil) {
          resultTestPackedTypes.packedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedFloatArray addFloat:[input readFloat]];
        }
        [input popLimit:limit];
        break;
      }
      case 810: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedDoubleArray == nil) {
          resultTestPackedTypes.packedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedDoubleArray addDouble:[input readDouble]];
        }
        [input popLimit:limit];
        break;
      }
      case 818: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypes.packedBoolArray == nil) {
          resultTestPackedTypes.packedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypes.packedBoolArray addBool:[input readBool]];
        }
        [input popLimit:limit];
        break;
      }
      case 826: {
        SInt32 length = [input readRawVarint32];
        SInt32 oldLimit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          ForeignEnum value = (ForeignEnum)[input readEnum];
          if (ForeignEnumIsValidValue(value)) {
            [self addPackedEnum:value];
          } else {
            [unknownFields mergeVarintField:103 value:value];
          }
        }
        [input popLimit:oldLimit];
        break;
      }
    }
  }
}
- (PBAppendableArray *)packedInt32 {
  return resultTestPackedTypes.packedInt32Array;
}
- (SInt32)packedInt32AtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedInt32AtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedInt32:(SInt32)value {
  if (resultTestPackedTypes.packedInt32Array == nil) {
    resultTestPackedTypes.packedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestPackedTypes.packedInt32Array addInt32:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedInt32Array:(NSArray *)array {
  resultTestPackedTypes.packedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesBuilder *)setPackedInt32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedInt32 {
  resultTestPackedTypes.packedInt32Array = nil;
  return self;
}
- (PBAppendableArray *)packedInt64 {
  return resultTestPackedTypes.packedInt64Array;
}
- (SInt64)packedInt64AtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedInt64AtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedInt64:(SInt64)value {
  if (resultTestPackedTypes.packedInt64Array == nil) {
    resultTestPackedTypes.packedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestPackedTypes.packedInt64Array addInt64:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedInt64Array:(NSArray *)array {
  resultTestPackedTypes.packedInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesBuilder *)setPackedInt64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedInt64 {
  resultTestPackedTypes.packedInt64Array = nil;
  return self;
}
- (PBAppendableArray *)packedUint32 {
  return resultTestPackedTypes.packedUint32Array;
}
- (UInt32)packedUint32AtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedUint32AtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedUint32:(UInt32)value {
  if (resultTestPackedTypes.packedUint32Array == nil) {
    resultTestPackedTypes.packedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestPackedTypes.packedUint32Array addUint32:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedUint32Array:(NSArray *)array {
  resultTestPackedTypes.packedUint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestPackedTypesBuilder *)setPackedUint32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedUint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedUint32 {
  resultTestPackedTypes.packedUint32Array = nil;
  return self;
}
- (PBAppendableArray *)packedUint64 {
  return resultTestPackedTypes.packedUint64Array;
}
- (UInt64)packedUint64AtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedUint64AtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedUint64:(UInt64)value {
  if (resultTestPackedTypes.packedUint64Array == nil) {
    resultTestPackedTypes.packedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestPackedTypes.packedUint64Array addUint64:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedUint64Array:(NSArray *)array {
  resultTestPackedTypes.packedUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestPackedTypesBuilder *)setPackedUint64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedUint64 {
  resultTestPackedTypes.packedUint64Array = nil;
  return self;
}
- (PBAppendableArray *)packedSint32 {
  return resultTestPackedTypes.packedSint32Array;
}
- (SInt32)packedSint32AtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedSint32AtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedSint32:(SInt32)value {
  if (resultTestPackedTypes.packedSint32Array == nil) {
    resultTestPackedTypes.packedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestPackedTypes.packedSint32Array addInt32:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedSint32Array:(NSArray *)array {
  resultTestPackedTypes.packedSint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesBuilder *)setPackedSint32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedSint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedSint32 {
  resultTestPackedTypes.packedSint32Array = nil;
  return self;
}
- (PBAppendableArray *)packedSint64 {
  return resultTestPackedTypes.packedSint64Array;
}
- (SInt64)packedSint64AtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedSint64AtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedSint64:(SInt64)value {
  if (resultTestPackedTypes.packedSint64Array == nil) {
    resultTestPackedTypes.packedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestPackedTypes.packedSint64Array addInt64:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedSint64Array:(NSArray *)array {
  resultTestPackedTypes.packedSint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesBuilder *)setPackedSint64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedSint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedSint64 {
  resultTestPackedTypes.packedSint64Array = nil;
  return self;
}
- (PBAppendableArray *)packedFixed32 {
  return resultTestPackedTypes.packedFixed32Array;
}
- (UInt32)packedFixed32AtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedFixed32AtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedFixed32:(UInt32)value {
  if (resultTestPackedTypes.packedFixed32Array == nil) {
    resultTestPackedTypes.packedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestPackedTypes.packedFixed32Array addUint32:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedFixed32Array:(NSArray *)array {
  resultTestPackedTypes.packedFixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestPackedTypesBuilder *)setPackedFixed32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedFixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedFixed32 {
  resultTestPackedTypes.packedFixed32Array = nil;
  return self;
}
- (PBAppendableArray *)packedFixed64 {
  return resultTestPackedTypes.packedFixed64Array;
}
- (UInt64)packedFixed64AtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedFixed64AtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedFixed64:(UInt64)value {
  if (resultTestPackedTypes.packedFixed64Array == nil) {
    resultTestPackedTypes.packedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestPackedTypes.packedFixed64Array addUint64:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedFixed64Array:(NSArray *)array {
  resultTestPackedTypes.packedFixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestPackedTypesBuilder *)setPackedFixed64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedFixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedFixed64 {
  resultTestPackedTypes.packedFixed64Array = nil;
  return self;
}
- (PBAppendableArray *)packedSfixed32 {
  return resultTestPackedTypes.packedSfixed32Array;
}
- (SInt32)packedSfixed32AtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedSfixed32AtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedSfixed32:(SInt32)value {
  if (resultTestPackedTypes.packedSfixed32Array == nil) {
    resultTestPackedTypes.packedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestPackedTypes.packedSfixed32Array addInt32:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedSfixed32Array:(NSArray *)array {
  resultTestPackedTypes.packedSfixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesBuilder *)setPackedSfixed32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedSfixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedSfixed32 {
  resultTestPackedTypes.packedSfixed32Array = nil;
  return self;
}
- (PBAppendableArray *)packedSfixed64 {
  return resultTestPackedTypes.packedSfixed64Array;
}
- (SInt64)packedSfixed64AtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedSfixed64AtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedSfixed64:(SInt64)value {
  if (resultTestPackedTypes.packedSfixed64Array == nil) {
    resultTestPackedTypes.packedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestPackedTypes.packedSfixed64Array addInt64:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedSfixed64Array:(NSArray *)array {
  resultTestPackedTypes.packedSfixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesBuilder *)setPackedSfixed64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedSfixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedSfixed64 {
  resultTestPackedTypes.packedSfixed64Array = nil;
  return self;
}
- (PBAppendableArray *)packedFloat {
  return resultTestPackedTypes.packedFloatArray;
}
- (Float32)packedFloatAtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedFloatAtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedFloat:(Float32)value {
  if (resultTestPackedTypes.packedFloatArray == nil) {
    resultTestPackedTypes.packedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultTestPackedTypes.packedFloatArray addFloat:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedFloatArray:(NSArray *)array {
  resultTestPackedTypes.packedFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestPackedTypesBuilder *)setPackedFloatValues:(const Float32 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedFloat {
  resultTestPackedTypes.packedFloatArray = nil;
  return self;
}
- (PBAppendableArray *)packedDouble {
  return resultTestPackedTypes.packedDoubleArray;
}
- (Float64)packedDoubleAtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedDoubleAtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedDouble:(Float64)value {
  if (resultTestPackedTypes.packedDoubleArray == nil) {
    resultTestPackedTypes.packedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [resultTestPackedTypes.packedDoubleArray addDouble:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedDoubleArray:(NSArray *)array {
  resultTestPackedTypes.packedDoubleArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestPackedTypesBuilder *)setPackedDoubleValues:(const Float64 *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedDoubleArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedDouble {
  resultTestPackedTypes.packedDoubleArray = nil;
  return self;
}
- (PBAppendableArray *)packedBool {
  return resultTestPackedTypes.packedBoolArray;
}
- (BOOL)packedBoolAtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedBoolAtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedBool:(BOOL)value {
  if (resultTestPackedTypes.packedBoolArray == nil) {
    resultTestPackedTypes.packedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [resultTestPackedTypes.packedBoolArray addBool:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedBoolArray:(NSArray *)array {
  resultTestPackedTypes.packedBoolArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
  return self;
}
- (TestPackedTypesBuilder *)setPackedBoolValues:(const BOOL *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedBoolArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedBool {
  resultTestPackedTypes.packedBoolArray = nil;
  return self;
}
- (PBAppendableArray *)packedEnum {
  return resultTestPackedTypes.packedEnumArray;
}
- (ForeignEnum)packedEnumAtIndex:(NSUInteger)index {
  return [resultTestPackedTypes packedEnumAtIndex:index];
}
- (TestPackedTypesBuilder *)addPackedEnum:(ForeignEnum)value {
  if (resultTestPackedTypes.packedEnumArray == nil) {
    resultTestPackedTypes.packedEnumArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestPackedTypes.packedEnumArray addEnum:value];
  return self;
}
- (TestPackedTypesBuilder *)setPackedEnumArray:(NSArray *)array {
  resultTestPackedTypes.packedEnumArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesBuilder *)setPackedEnumValues:(const ForeignEnum *)values count:(NSUInteger)count {
  resultTestPackedTypes.packedEnumArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesBuilder *)clearPackedEnum {
  resultTestPackedTypes.packedEnumArray = nil;
  return self;
}
@end

@interface TestUnpackedTypes ()
@property (strong) PBAppendableArray * unpackedInt32Array;
@property (strong) PBAppendableArray * unpackedInt64Array;
@property (strong) PBAppendableArray * unpackedUint32Array;
@property (strong) PBAppendableArray * unpackedUint64Array;
@property (strong) PBAppendableArray * unpackedSint32Array;
@property (strong) PBAppendableArray * unpackedSint64Array;
@property (strong) PBAppendableArray * unpackedFixed32Array;
@property (strong) PBAppendableArray * unpackedFixed64Array;
@property (strong) PBAppendableArray * unpackedSfixed32Array;
@property (strong) PBAppendableArray * unpackedSfixed64Array;
@property (strong) PBAppendableArray * unpackedFloatArray;
@property (strong) PBAppendableArray * unpackedDoubleArray;
@property (strong) PBAppendableArray * unpackedBoolArray;
@property (strong) PBAppendableArray * unpackedEnumArray;
@end

@implementation TestUnpackedTypes

@synthesize unpackedInt32Array;
@dynamic unpackedInt32;
@synthesize unpackedInt64Array;
@dynamic unpackedInt64;
@synthesize unpackedUint32Array;
@dynamic unpackedUint32;
@synthesize unpackedUint64Array;
@dynamic unpackedUint64;
@synthesize unpackedSint32Array;
@dynamic unpackedSint32;
@synthesize unpackedSint64Array;
@dynamic unpackedSint64;
@synthesize unpackedFixed32Array;
@dynamic unpackedFixed32;
@synthesize unpackedFixed64Array;
@dynamic unpackedFixed64;
@synthesize unpackedSfixed32Array;
@dynamic unpackedSfixed32;
@synthesize unpackedSfixed64Array;
@dynamic unpackedSfixed64;
@synthesize unpackedFloatArray;
@dynamic unpackedFloat;
@synthesize unpackedDoubleArray;
@dynamic unpackedDouble;
@synthesize unpackedBoolArray;
@dynamic unpackedBool;
@synthesize unpackedEnumArray;
@dynamic unpackedEnum;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestUnpackedTypes* defaultTestUnpackedTypesInstance = nil;
+ (void) initialize {
  if (self == [TestUnpackedTypes class]) {
    defaultTestUnpackedTypesInstance = [[TestUnpackedTypes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestUnpackedTypesInstance;
}
- (instancetype) defaultInstance {
  return defaultTestUnpackedTypesInstance;
}
- (PBArray *)unpackedInt32 {
  return unpackedInt32Array;
}
- (SInt32)unpackedInt32AtIndex:(NSUInteger)index {
  return [unpackedInt32Array int32AtIndex:index];
}
- (PBArray *)unpackedInt64 {
  return unpackedInt64Array;
}
- (SInt64)unpackedInt64AtIndex:(NSUInteger)index {
  return [unpackedInt64Array int64AtIndex:index];
}
- (PBArray *)unpackedUint32 {
  return unpackedUint32Array;
}
- (UInt32)unpackedUint32AtIndex:(NSUInteger)index {
  return [unpackedUint32Array uint32AtIndex:index];
}
- (PBArray *)unpackedUint64 {
  return unpackedUint64Array;
}
- (UInt64)unpackedUint64AtIndex:(NSUInteger)index {
  return [unpackedUint64Array uint64AtIndex:index];
}
- (PBArray *)unpackedSint32 {
  return unpackedSint32Array;
}
- (SInt32)unpackedSint32AtIndex:(NSUInteger)index {
  return [unpackedSint32Array int32AtIndex:index];
}
- (PBArray *)unpackedSint64 {
  return unpackedSint64Array;
}
- (SInt64)unpackedSint64AtIndex:(NSUInteger)index {
  return [unpackedSint64Array int64AtIndex:index];
}
- (PBArray *)unpackedFixed32 {
  return unpackedFixed32Array;
}
- (UInt32)unpackedFixed32AtIndex:(NSUInteger)index {
  return [unpackedFixed32Array uint32AtIndex:index];
}
- (PBArray *)unpackedFixed64 {
  return unpackedFixed64Array;
}
- (UInt64)unpackedFixed64AtIndex:(NSUInteger)index {
  return [unpackedFixed64Array uint64AtIndex:index];
}
- (PBArray *)unpackedSfixed32 {
  return unpackedSfixed32Array;
}
- (SInt32)unpackedSfixed32AtIndex:(NSUInteger)index {
  return [unpackedSfixed32Array int32AtIndex:index];
}
- (PBArray *)unpackedSfixed64 {
  return unpackedSfixed64Array;
}
- (SInt64)unpackedSfixed64AtIndex:(NSUInteger)index {
  return [unpackedSfixed64Array int64AtIndex:index];
}
- (PBArray *)unpackedFloat {
  return unpackedFloatArray;
}
- (Float32)unpackedFloatAtIndex:(NSUInteger)index {
  return [unpackedFloatArray floatAtIndex:index];
}
- (PBArray *)unpackedDouble {
  return unpackedDoubleArray;
}
- (Float64)unpackedDoubleAtIndex:(NSUInteger)index {
  return [unpackedDoubleArray doubleAtIndex:index];
}
- (PBArray *)unpackedBool {
  return unpackedBoolArray;
}
- (BOOL)unpackedBoolAtIndex:(NSUInteger)index {
  return [unpackedBoolArray boolAtIndex:index];
}
- (PBArray *)unpackedEnum {
  return unpackedEnumArray;
}
- (ForeignEnum)unpackedEnumAtIndex:(NSUInteger)index {
  return (ForeignEnum)[unpackedEnumArray enumAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger unpackedInt32ArrayCount = self.unpackedInt32Array.count;
  if (unpackedInt32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.unpackedInt32Array.data;
    for (NSUInteger i = 0; i < unpackedInt32ArrayCount; ++i) {
      [output writeInt32:90 value:values[i]];
    }
  }
  const NSUInteger unpackedInt64ArrayCount = self.unpackedInt64Array.count;
  if (unpackedInt64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.unpackedInt64Array.data;
    for (NSUInteger i = 0; i < unpackedInt64ArrayCount; ++i) {
      [output writeInt64:91 value:values[i]];
    }
  }
  const NSUInteger unpackedUint32ArrayCount = self.unpackedUint32Array.count;
  if (unpackedUint32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.unpackedUint32Array.data;
    for (NSUInteger i = 0; i < unpackedUint32ArrayCount; ++i) {
      [output writeUInt32:92 value:values[i]];
    }
  }
  const NSUInteger unpackedUint64ArrayCount = self.unpackedUint64Array.count;
  if (unpackedUint64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.unpackedUint64Array.data;
    for (NSUInteger i = 0; i < unpackedUint64ArrayCount; ++i) {
      [output writeUInt64:93 value:values[i]];
    }
  }
  const NSUInteger unpackedSint32ArrayCount = self.unpackedSint32Array.count;
  if (unpackedSint32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.unpackedSint32Array.data;
    for (NSUInteger i = 0; i < unpackedSint32ArrayCount; ++i) {
      [output writeSInt32:94 value:values[i]];
    }
  }
  const NSUInteger unpackedSint64ArrayCount = self.unpackedSint64Array.count;
  if (unpackedSint64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.unpackedSint64Array.data;
    for (NSUInteger i = 0; i < unpackedSint64ArrayCount; ++i) {
      [output writeSInt64:95 value:values[i]];
    }
  }
  const NSUInteger unpackedFixed32ArrayCount = self.unpackedFixed32Array.count;
  if (unpackedFixed32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.unpackedFixed32Array.data;
    for (NSUInteger i = 0; i < unpackedFixed32ArrayCount; ++i) {
      [output writeFixed32:96 value:values[i]];
    }
  }
  const NSUInteger unpackedFixed64ArrayCount = self.unpackedFixed64Array.count;
  if (unpackedFixed64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.unpackedFixed64Array.data;
    for (NSUInteger i = 0; i < unpackedFixed64ArrayCount; ++i) {
      [output writeFixed64:97 value:values[i]];
    }
  }
  const NSUInteger unpackedSfixed32ArrayCount = self.unpackedSfixed32Array.count;
  if (unpackedSfixed32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.unpackedSfixed32Array.data;
    for (NSUInteger i = 0; i < unpackedSfixed32ArrayCount; ++i) {
      [output writeSFixed32:98 value:values[i]];
    }
  }
  const NSUInteger unpackedSfixed64ArrayCount = self.unpackedSfixed64Array.count;
  if (unpackedSfixed64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.unpackedSfixed64Array.data;
    for (NSUInteger i = 0; i < unpackedSfixed64ArrayCount; ++i) {
      [output writeSFixed64:99 value:values[i]];
    }
  }
  const NSUInteger unpackedFloatArrayCount = self.unpackedFloatArray.count;
  if (unpackedFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.unpackedFloatArray.data;
    for (NSUInteger i = 0; i < unpackedFloatArrayCount; ++i) {
      [output writeFloat:100 value:values[i]];
    }
  }
  const NSUInteger unpackedDoubleArrayCount = self.unpackedDoubleArray.count;
  if (unpackedDoubleArrayCount > 0) {
    const Float64 *values = (const Float64 *)self.unpackedDoubleArray.data;
    for (NSUInteger i = 0; i < unpackedDoubleArrayCount; ++i) {
      [output writeDouble:101 value:values[i]];
    }
  }
  const NSUInteger unpackedBoolArrayCount = self.unpackedBoolArray.count;
  if (unpackedBoolArrayCount > 0) {
    const BOOL *values = (const BOOL *)self.unpackedBoolArray.data;
    for (NSUInteger i = 0; i < unpackedBoolArrayCount; ++i) {
      [output writeBool:102 value:values[i]];
    }
  }
  const NSUInteger unpackedEnumArrayCount = self.unpackedEnumArray.count;
  const ForeignEnum *unpackedEnumArrayValues = (const ForeignEnum *)self.unpackedEnumArray.data;
  for (NSUInteger i = 0; i < unpackedEnumArrayCount; ++i) {
    [output writeEnum:103 value:unpackedEnumArrayValues[i]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedInt32Array.count;
    const SInt32 *values = (const SInt32 *)self.unpackedInt32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedInt64Array.count;
    const SInt64 *values = (const SInt64 *)self.unpackedInt64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedUint32Array.count;
    const UInt32 *values = (const UInt32 *)self.unpackedUint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedUint64Array.count;
    const UInt64 *values = (const UInt64 *)self.unpackedUint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedSint32Array.count;
    const SInt32 *values = (const SInt32 *)self.unpackedSint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedSint64Array.count;
    const SInt64 *values = (const SInt64 *)self.unpackedSint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedFixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedFixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedSfixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedSfixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedFloatArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedDoubleArray.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedBoolArray.count;
    dataSize = (SInt32)(1 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.unpackedEnumArray.count;
    const ForeignEnum *values = (const ForeignEnum *)self.unpackedEnumArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestUnpackedTypes*) parseFromData:(NSData*) data {
  return (TestUnpackedTypes*)[[[TestUnpackedTypes builder] mergeFromData:data] build];
}
+ (TestUnpackedTypes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestUnpackedTypes*)[[[TestUnpackedTypes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestUnpackedTypes*) parseFromInputStream:(NSInputStream*) input {
  return (TestUnpackedTypes*)[[[TestUnpackedTypes builder] mergeFromInputStream:input] build];
}
+ (TestUnpackedTypes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestUnpackedTypes*)[[[TestUnpackedTypes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestUnpackedTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestUnpackedTypes*)[[[TestUnpackedTypes builder] mergeFromCodedInputStream:input] build];
}
+ (TestUnpackedTypes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestUnpackedTypes*)[[[TestUnpackedTypes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestUnpackedTypesBuilder*) builder {
  return [[TestUnpackedTypesBuilder alloc] init];
}
+ (TestUnpackedTypesBuilder*) builderWithPrototype:(TestUnpackedTypes*) prototype {
  return [[TestUnpackedTypes builder] mergeFrom:prototype];
}
- (TestUnpackedTypesBuilder*) builder {
  return [TestUnpackedTypes builder];
}
- (TestUnpackedTypesBuilder*) toBuilder {
  return [TestUnpackedTypes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unpackedInt32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedInt32", obj];
  }];
  [self.unpackedInt64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedInt64", obj];
  }];
  [self.unpackedUint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedUint32", obj];
  }];
  [self.unpackedUint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedUint64", obj];
  }];
  [self.unpackedSint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSint32", obj];
  }];
  [self.unpackedSint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSint64", obj];
  }];
  [self.unpackedFixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedFixed32", obj];
  }];
  [self.unpackedFixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedFixed64", obj];
  }];
  [self.unpackedSfixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSfixed32", obj];
  }];
  [self.unpackedSfixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSfixed64", obj];
  }];
  [self.unpackedFloatArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedFloat", obj];
  }];
  [self.unpackedDoubleArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedDouble", obj];
  }];
  [self.unpackedBoolArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedBool", obj];
  }];
  [self.unpackedEnumArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedEnum", NSStringFromForeignEnum([(NSNumber *)element intValue])];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * unpackedInt32ArrayArray = [NSMutableArray new];
  NSUInteger unpackedInt32ArrayCount=self.unpackedInt32Array.count;
  for(int i=0;i<unpackedInt32ArrayCount;i++){
    [unpackedInt32ArrayArray addObject: @([self.unpackedInt32Array int32AtIndex:i])];
  }
  [dictionary setObject: unpackedInt32ArrayArray forKey: @"unpackedInt32"];
  NSMutableArray * unpackedInt64ArrayArray = [NSMutableArray new];
  NSUInteger unpackedInt64ArrayCount=self.unpackedInt64Array.count;
  for(int i=0;i<unpackedInt64ArrayCount;i++){
    [unpackedInt64ArrayArray addObject: @([self.unpackedInt64Array int64AtIndex:i])];
  }
  [dictionary setObject: unpackedInt64ArrayArray forKey: @"unpackedInt64"];
  NSMutableArray * unpackedUint32ArrayArray = [NSMutableArray new];
  NSUInteger unpackedUint32ArrayCount=self.unpackedUint32Array.count;
  for(int i=0;i<unpackedUint32ArrayCount;i++){
    [unpackedUint32ArrayArray addObject: @([self.unpackedUint32Array uint32AtIndex:i])];
  }
  [dictionary setObject: unpackedUint32ArrayArray forKey: @"unpackedUint32"];
  NSMutableArray * unpackedUint64ArrayArray = [NSMutableArray new];
  NSUInteger unpackedUint64ArrayCount=self.unpackedUint64Array.count;
  for(int i=0;i<unpackedUint64ArrayCount;i++){
    [unpackedUint64ArrayArray addObject: @([self.unpackedUint64Array uint64AtIndex:i])];
  }
  [dictionary setObject: unpackedUint64ArrayArray forKey: @"unpackedUint64"];
  NSMutableArray * unpackedSint32ArrayArray = [NSMutableArray new];
  NSUInteger unpackedSint32ArrayCount=self.unpackedSint32Array.count;
  for(int i=0;i<unpackedSint32ArrayCount;i++){
    [unpackedSint32ArrayArray addObject: @([self.unpackedSint32Array int32AtIndex:i])];
  }
  [dictionary setObject: unpackedSint32ArrayArray forKey: @"unpackedSint32"];
  NSMutableArray * unpackedSint64ArrayArray = [NSMutableArray new];
  NSUInteger unpackedSint64ArrayCount=self.unpackedSint64Array.count;
  for(int i=0;i<unpackedSint64ArrayCount;i++){
    [unpackedSint64ArrayArray addObject: @([self.unpackedSint64Array int64AtIndex:i])];
  }
  [dictionary setObject: unpackedSint64ArrayArray forKey: @"unpackedSint64"];
  NSMutableArray * unpackedFixed32ArrayArray = [NSMutableArray new];
  NSUInteger unpackedFixed32ArrayCount=self.unpackedFixed32Array.count;
  for(int i=0;i<unpackedFixed32ArrayCount;i++){
    [unpackedFixed32ArrayArray addObject: @([self.unpackedFixed32Array uint32AtIndex:i])];
  }
  [dictionary setObject: unpackedFixed32ArrayArray forKey: @"unpackedFixed32"];
  NSMutableArray * unpackedFixed64ArrayArray = [NSMutableArray new];
  NSUInteger unpackedFixed64ArrayCount=self.unpackedFixed64Array.count;
  for(int i=0;i<unpackedFixed64ArrayCount;i++){
    [unpackedFixed64ArrayArray addObject: @([self.unpackedFixed64Array uint64AtIndex:i])];
  }
  [dictionary setObject: unpackedFixed64ArrayArray forKey: @"unpackedFixed64"];
  NSMutableArray * unpackedSfixed32ArrayArray = [NSMutableArray new];
  NSUInteger unpackedSfixed32ArrayCount=self.unpackedSfixed32Array.count;
  for(int i=0;i<unpackedSfixed32ArrayCount;i++){
    [unpackedSfixed32ArrayArray addObject: @([self.unpackedSfixed32Array int32AtIndex:i])];
  }
  [dictionary setObject: unpackedSfixed32ArrayArray forKey: @"unpackedSfixed32"];
  NSMutableArray * unpackedSfixed64ArrayArray = [NSMutableArray new];
  NSUInteger unpackedSfixed64ArrayCount=self.unpackedSfixed64Array.count;
  for(int i=0;i<unpackedSfixed64ArrayCount;i++){
    [unpackedSfixed64ArrayArray addObject: @([self.unpackedSfixed64Array int64AtIndex:i])];
  }
  [dictionary setObject: unpackedSfixed64ArrayArray forKey: @"unpackedSfixed64"];
  NSMutableArray * unpackedFloatArrayArray = [NSMutableArray new];
  NSUInteger unpackedFloatArrayCount=self.unpackedFloatArray.count;
  for(int i=0;i<unpackedFloatArrayCount;i++){
    [unpackedFloatArrayArray addObject: @([self.unpackedFloatArray floatAtIndex:i])];
  }
  [dictionary setObject: unpackedFloatArrayArray forKey: @"unpackedFloat"];
  NSMutableArray * unpackedDoubleArrayArray = [NSMutableArray new];
  NSUInteger unpackedDoubleArrayCount=self.unpackedDoubleArray.count;
  for(int i=0;i<unpackedDoubleArrayCount;i++){
    [unpackedDoubleArrayArray addObject: @([self.unpackedDoubleArray doubleAtIndex:i])];
  }
  [dictionary setObject: unpackedDoubleArrayArray forKey: @"unpackedDouble"];
  NSMutableArray * unpackedBoolArrayArray = [NSMutableArray new];
  NSUInteger unpackedBoolArrayCount=self.unpackedBoolArray.count;
  for(int i=0;i<unpackedBoolArrayCount;i++){
    [unpackedBoolArrayArray addObject: @([self.unpackedBoolArray boolAtIndex:i])];
  }
  [dictionary setObject: unpackedBoolArrayArray forKey: @"unpackedBool"];
  const NSUInteger unpackedEnumArrayCount = self.unpackedEnumArray.count;
  if (unpackedEnumArrayCount > 0) {
    const ForeignEnum *unpackedEnumArrayValues = (const ForeignEnum *)self.unpackedEnumArray.data;
    NSMutableArray * unpackedEnumArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < unpackedEnumArrayCount; ++i) {
      [unpackedEnumArrayArray addObject: @(unpackedEnumArrayValues[i])];
    }
    [dictionary setObject: unpackedEnumArrayArray forKey: @"unpackedEnum"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestUnpackedTypes class]]) {
    return NO;
  }
  TestUnpackedTypes *otherMessage = other;
  return
      [self.unpackedInt32Array isEqualToArray:otherMessage.unpackedInt32Array] &&
      [self.unpackedInt64Array isEqualToArray:otherMessage.unpackedInt64Array] &&
      [self.unpackedUint32Array isEqualToArray:otherMessage.unpackedUint32Array] &&
      [self.unpackedUint64Array isEqualToArray:otherMessage.unpackedUint64Array] &&
      [self.unpackedSint32Array isEqualToArray:otherMessage.unpackedSint32Array] &&
      [self.unpackedSint64Array isEqualToArray:otherMessage.unpackedSint64Array] &&
      [self.unpackedFixed32Array isEqualToArray:otherMessage.unpackedFixed32Array] &&
      [self.unpackedFixed64Array isEqualToArray:otherMessage.unpackedFixed64Array] &&
      [self.unpackedSfixed32Array isEqualToArray:otherMessage.unpackedSfixed32Array] &&
      [self.unpackedSfixed64Array isEqualToArray:otherMessage.unpackedSfixed64Array] &&
      [self.unpackedFloatArray isEqualToArray:otherMessage.unpackedFloatArray] &&
      [self.unpackedDoubleArray isEqualToArray:otherMessage.unpackedDoubleArray] &&
      [self.unpackedBoolArray isEqualToArray:otherMessage.unpackedBoolArray] &&
      [self.unpackedEnumArray isEqualToArray:otherMessage.unpackedEnumArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.unpackedInt32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedInt64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedUint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedUint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedSint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedSint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedFixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedFixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedSfixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedSfixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedFloatArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedDoubleArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedBoolArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.unpackedEnumArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestUnpackedTypesBuilder()
@property (strong) TestUnpackedTypes* resultTestUnpackedTypes;
@end

@implementation TestUnpackedTypesBuilder
@synthesize resultTestUnpackedTypes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestUnpackedTypes = [[TestUnpackedTypes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestUnpackedTypes;
}
- (TestUnpackedTypesBuilder*) clear {
  self.resultTestUnpackedTypes = [[TestUnpackedTypes alloc] init];
  return self;
}
- (TestUnpackedTypesBuilder*) clone {
  return [TestUnpackedTypes builderWithPrototype:resultTestUnpackedTypes];
}
- (TestUnpackedTypes*) defaultInstance {
  return [TestUnpackedTypes defaultInstance];
}
- (TestUnpackedTypes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestUnpackedTypes*) buildPartial {
  TestUnpackedTypes* returnMe = resultTestUnpackedTypes;
  self.resultTestUnpackedTypes = nil;
  return returnMe;
}
- (TestUnpackedTypesBuilder*) mergeFrom:(TestUnpackedTypes*) other {
  if (other == [TestUnpackedTypes defaultInstance]) {
    return self;
  }
  if (other.unpackedInt32Array.count > 0) {
    if (resultTestUnpackedTypes.unpackedInt32Array == nil) {
      resultTestUnpackedTypes.unpackedInt32Array = [other.unpackedInt32Array copy];
    } else {
      [resultTestUnpackedTypes.unpackedInt32Array appendArray:other.unpackedInt32Array];
    }
  }
  if (other.unpackedInt64Array.count > 0) {
    if (resultTestUnpackedTypes.unpackedInt64Array == nil) {
      resultTestUnpackedTypes.unpackedInt64Array = [other.unpackedInt64Array copy];
    } else {
      [resultTestUnpackedTypes.unpackedInt64Array appendArray:other.unpackedInt64Array];
    }
  }
  if (other.unpackedUint32Array.count > 0) {
    if (resultTestUnpackedTypes.unpackedUint32Array == nil) {
      resultTestUnpackedTypes.unpackedUint32Array = [other.unpackedUint32Array copy];
    } else {
      [resultTestUnpackedTypes.unpackedUint32Array appendArray:other.unpackedUint32Array];
    }
  }
  if (other.unpackedUint64Array.count > 0) {
    if (resultTestUnpackedTypes.unpackedUint64Array == nil) {
      resultTestUnpackedTypes.unpackedUint64Array = [other.unpackedUint64Array copy];
    } else {
      [resultTestUnpackedTypes.unpackedUint64Array appendArray:other.unpackedUint64Array];
    }
  }
  if (other.unpackedSint32Array.count > 0) {
    if (resultTestUnpackedTypes.unpackedSint32Array == nil) {
      resultTestUnpackedTypes.unpackedSint32Array = [other.unpackedSint32Array copy];
    } else {
      [resultTestUnpackedTypes.unpackedSint32Array appendArray:other.unpackedSint32Array];
    }
  }
  if (other.unpackedSint64Array.count > 0) {
    if (resultTestUnpackedTypes.unpackedSint64Array == nil) {
      resultTestUnpackedTypes.unpackedSint64Array = [other.unpackedSint64Array copy];
    } else {
      [resultTestUnpackedTypes.unpackedSint64Array appendArray:other.unpackedSint64Array];
    }
  }
  if (other.unpackedFixed32Array.count > 0) {
    if (resultTestUnpackedTypes.unpackedFixed32Array == nil) {
      resultTestUnpackedTypes.unpackedFixed32Array = [other.unpackedFixed32Array copy];
    } else {
      [resultTestUnpackedTypes.unpackedFixed32Array appendArray:other.unpackedFixed32Array];
    }
  }
  if (other.unpackedFixed64Array.count > 0) {
    if (resultTestUnpackedTypes.unpackedFixed64Array == nil) {
      resultTestUnpackedTypes.unpackedFixed64Array = [other.unpackedFixed64Array copy];
    } else {
      [resultTestUnpackedTypes.unpackedFixed64Array appendArray:other.unpackedFixed64Array];
    }
  }
  if (other.unpackedSfixed32Array.count > 0) {
    if (resultTestUnpackedTypes.unpackedSfixed32Array == nil) {
      resultTestUnpackedTypes.unpackedSfixed32Array = [other.unpackedSfixed32Array copy];
    } else {
      [resultTestUnpackedTypes.unpackedSfixed32Array appendArray:other.unpackedSfixed32Array];
    }
  }
  if (other.unpackedSfixed64Array.count > 0) {
    if (resultTestUnpackedTypes.unpackedSfixed64Array == nil) {
      resultTestUnpackedTypes.unpackedSfixed64Array = [other.unpackedSfixed64Array copy];
    } else {
      [resultTestUnpackedTypes.unpackedSfixed64Array appendArray:other.unpackedSfixed64Array];
    }
  }
  if (other.unpackedFloatArray.count > 0) {
    if (resultTestUnpackedTypes.unpackedFloatArray == nil) {
      resultTestUnpackedTypes.unpackedFloatArray = [other.unpackedFloatArray copy];
    } else {
      [resultTestUnpackedTypes.unpackedFloatArray appendArray:other.unpackedFloatArray];
    }
  }
  if (other.unpackedDoubleArray.count > 0) {
    if (resultTestUnpackedTypes.unpackedDoubleArray == nil) {
      resultTestUnpackedTypes.unpackedDoubleArray = [other.unpackedDoubleArray copy];
    } else {
      [resultTestUnpackedTypes.unpackedDoubleArray appendArray:other.unpackedDoubleArray];
    }
  }
  if (other.unpackedBoolArray.count > 0) {
    if (resultTestUnpackedTypes.unpackedBoolArray == nil) {
      resultTestUnpackedTypes.unpackedBoolArray = [other.unpackedBoolArray copy];
    } else {
      [resultTestUnpackedTypes.unpackedBoolArray appendArray:other.unpackedBoolArray];
    }
  }
  if (other.unpackedEnumArray.count > 0) {
    if (resultTestUnpackedTypes.unpackedEnumArray == nil) {
      resultTestUnpackedTypes.unpackedEnumArray = [other.unpackedEnumArray copy];
    } else {
      [resultTestUnpackedTypes.unpackedEnumArray appendArray:other.unpackedEnumArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestUnpackedTypesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestUnpackedTypesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 720: {
        [self addUnpackedInt32:[input readInt32]];
        break;
      }
      case 728: {
        [self addUnpackedInt64:[input readInt64]];
        break;
      }
      case 736: {
        [self addUnpackedUint32:[input readUInt32]];
        break;
      }
      case 744: {
        [self addUnpackedUint64:[input readUInt64]];
        break;
      }
      case 752: {
        [self addUnpackedSint32:[input readSInt32]];
        break;
      }
      case 760: {
        [self addUnpackedSint64:[input readSInt64]];
        break;
      }
      case 773: {
        [self addUnpackedFixed32:[input readFixed32]];
        break;
      }
      case 777: {
        [self addUnpackedFixed64:[input readFixed64]];
        break;
      }
      case 789: {
        [self addUnpackedSfixed32:[input readSFixed32]];
        break;
      }
      case 793: {
        [self addUnpackedSfixed64:[input readSFixed64]];
        break;
      }
      case 805: {
        [self addUnpackedFloat:[input readFloat]];
        break;
      }
      case 809: {
        [self addUnpackedDouble:[input readDouble]];
        break;
      }
      case 816: {
        [self addUnpackedBool:[input readBool]];
        break;
      }
      case 824: {
        ForeignEnum value = (ForeignEnum)[input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self addUnpackedEnum:value];
        } else {
          [unknownFields mergeVarintField:103 value:value];
        }
        break;
      }
    }
  }
}
- (PBAppendableArray *)unpackedInt32 {
  return resultTestUnpackedTypes.unpackedInt32Array;
}
- (SInt32)unpackedInt32AtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedInt32AtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedInt32:(SInt32)value {
  if (resultTestUnpackedTypes.unpackedInt32Array == nil) {
    resultTestUnpackedTypes.unpackedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestUnpackedTypes.unpackedInt32Array addInt32:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedInt32Array:(NSArray *)array {
  resultTestUnpackedTypes.unpackedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedInt32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedInt32 {
  resultTestUnpackedTypes.unpackedInt32Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedInt64 {
  return resultTestUnpackedTypes.unpackedInt64Array;
}
- (SInt64)unpackedInt64AtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedInt64AtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedInt64:(SInt64)value {
  if (resultTestUnpackedTypes.unpackedInt64Array == nil) {
    resultTestUnpackedTypes.unpackedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestUnpackedTypes.unpackedInt64Array addInt64:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedInt64Array:(NSArray *)array {
  resultTestUnpackedTypes.unpackedInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedInt64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedInt64 {
  resultTestUnpackedTypes.unpackedInt64Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedUint32 {
  return resultTestUnpackedTypes.unpackedUint32Array;
}
- (UInt32)unpackedUint32AtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedUint32AtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedUint32:(UInt32)value {
  if (resultTestUnpackedTypes.unpackedUint32Array == nil) {
    resultTestUnpackedTypes.unpackedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestUnpackedTypes.unpackedUint32Array addUint32:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedUint32Array:(NSArray *)array {
  resultTestUnpackedTypes.unpackedUint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedUint32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedUint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedUint32 {
  resultTestUnpackedTypes.unpackedUint32Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedUint64 {
  return resultTestUnpackedTypes.unpackedUint64Array;
}
- (UInt64)unpackedUint64AtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedUint64AtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedUint64:(UInt64)value {
  if (resultTestUnpackedTypes.unpackedUint64Array == nil) {
    resultTestUnpackedTypes.unpackedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestUnpackedTypes.unpackedUint64Array addUint64:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedUint64Array:(NSArray *)array {
  resultTestUnpackedTypes.unpackedUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedUint64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedUint64 {
  resultTestUnpackedTypes.unpackedUint64Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedSint32 {
  return resultTestUnpackedTypes.unpackedSint32Array;
}
- (SInt32)unpackedSint32AtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedSint32AtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedSint32:(SInt32)value {
  if (resultTestUnpackedTypes.unpackedSint32Array == nil) {
    resultTestUnpackedTypes.unpackedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestUnpackedTypes.unpackedSint32Array addInt32:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedSint32Array:(NSArray *)array {
  resultTestUnpackedTypes.unpackedSint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedSint32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedSint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedSint32 {
  resultTestUnpackedTypes.unpackedSint32Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedSint64 {
  return resultTestUnpackedTypes.unpackedSint64Array;
}
- (SInt64)unpackedSint64AtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedSint64AtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedSint64:(SInt64)value {
  if (resultTestUnpackedTypes.unpackedSint64Array == nil) {
    resultTestUnpackedTypes.unpackedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestUnpackedTypes.unpackedSint64Array addInt64:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedSint64Array:(NSArray *)array {
  resultTestUnpackedTypes.unpackedSint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedSint64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedSint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedSint64 {
  resultTestUnpackedTypes.unpackedSint64Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedFixed32 {
  return resultTestUnpackedTypes.unpackedFixed32Array;
}
- (UInt32)unpackedFixed32AtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedFixed32AtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedFixed32:(UInt32)value {
  if (resultTestUnpackedTypes.unpackedFixed32Array == nil) {
    resultTestUnpackedTypes.unpackedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestUnpackedTypes.unpackedFixed32Array addUint32:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedFixed32Array:(NSArray *)array {
  resultTestUnpackedTypes.unpackedFixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedFixed32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedFixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedFixed32 {
  resultTestUnpackedTypes.unpackedFixed32Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedFixed64 {
  return resultTestUnpackedTypes.unpackedFixed64Array;
}
- (UInt64)unpackedFixed64AtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedFixed64AtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedFixed64:(UInt64)value {
  if (resultTestUnpackedTypes.unpackedFixed64Array == nil) {
    resultTestUnpackedTypes.unpackedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestUnpackedTypes.unpackedFixed64Array addUint64:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedFixed64Array:(NSArray *)array {
  resultTestUnpackedTypes.unpackedFixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedFixed64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedFixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedFixed64 {
  resultTestUnpackedTypes.unpackedFixed64Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedSfixed32 {
  return resultTestUnpackedTypes.unpackedSfixed32Array;
}
- (SInt32)unpackedSfixed32AtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedSfixed32AtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedSfixed32:(SInt32)value {
  if (resultTestUnpackedTypes.unpackedSfixed32Array == nil) {
    resultTestUnpackedTypes.unpackedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestUnpackedTypes.unpackedSfixed32Array addInt32:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedSfixed32Array:(NSArray *)array {
  resultTestUnpackedTypes.unpackedSfixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedSfixed32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedSfixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedSfixed32 {
  resultTestUnpackedTypes.unpackedSfixed32Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedSfixed64 {
  return resultTestUnpackedTypes.unpackedSfixed64Array;
}
- (SInt64)unpackedSfixed64AtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedSfixed64AtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedSfixed64:(SInt64)value {
  if (resultTestUnpackedTypes.unpackedSfixed64Array == nil) {
    resultTestUnpackedTypes.unpackedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestUnpackedTypes.unpackedSfixed64Array addInt64:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedSfixed64Array:(NSArray *)array {
  resultTestUnpackedTypes.unpackedSfixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedSfixed64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedSfixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedSfixed64 {
  resultTestUnpackedTypes.unpackedSfixed64Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedFloat {
  return resultTestUnpackedTypes.unpackedFloatArray;
}
- (Float32)unpackedFloatAtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedFloatAtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedFloat:(Float32)value {
  if (resultTestUnpackedTypes.unpackedFloatArray == nil) {
    resultTestUnpackedTypes.unpackedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultTestUnpackedTypes.unpackedFloatArray addFloat:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedFloatArray:(NSArray *)array {
  resultTestUnpackedTypes.unpackedFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedFloatValues:(const Float32 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedFloat {
  resultTestUnpackedTypes.unpackedFloatArray = nil;
  return self;
}
- (PBAppendableArray *)unpackedDouble {
  return resultTestUnpackedTypes.unpackedDoubleArray;
}
- (Float64)unpackedDoubleAtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedDoubleAtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedDouble:(Float64)value {
  if (resultTestUnpackedTypes.unpackedDoubleArray == nil) {
    resultTestUnpackedTypes.unpackedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [resultTestUnpackedTypes.unpackedDoubleArray addDouble:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedDoubleArray:(NSArray *)array {
  resultTestUnpackedTypes.unpackedDoubleArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedDoubleValues:(const Float64 *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedDoubleArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedDouble {
  resultTestUnpackedTypes.unpackedDoubleArray = nil;
  return self;
}
- (PBAppendableArray *)unpackedBool {
  return resultTestUnpackedTypes.unpackedBoolArray;
}
- (BOOL)unpackedBoolAtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedBoolAtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedBool:(BOOL)value {
  if (resultTestUnpackedTypes.unpackedBoolArray == nil) {
    resultTestUnpackedTypes.unpackedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [resultTestUnpackedTypes.unpackedBoolArray addBool:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedBoolArray:(NSArray *)array {
  resultTestUnpackedTypes.unpackedBoolArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedBoolValues:(const BOOL *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedBoolArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedBool {
  resultTestUnpackedTypes.unpackedBoolArray = nil;
  return self;
}
- (PBAppendableArray *)unpackedEnum {
  return resultTestUnpackedTypes.unpackedEnumArray;
}
- (ForeignEnum)unpackedEnumAtIndex:(NSUInteger)index {
  return [resultTestUnpackedTypes unpackedEnumAtIndex:index];
}
- (TestUnpackedTypesBuilder *)addUnpackedEnum:(ForeignEnum)value {
  if (resultTestUnpackedTypes.unpackedEnumArray == nil) {
    resultTestUnpackedTypes.unpackedEnumArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestUnpackedTypes.unpackedEnumArray addEnum:value];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedEnumArray:(NSArray *)array {
  resultTestUnpackedTypes.unpackedEnumArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)setUnpackedEnumValues:(const ForeignEnum *)values count:(NSUInteger)count {
  resultTestUnpackedTypes.unpackedEnumArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestUnpackedTypesBuilder *)clearUnpackedEnum {
  resultTestUnpackedTypes.unpackedEnumArray = nil;
  return self;
}
@end

@interface TestPackedExtensions ()
@end

@implementation TestPackedExtensions

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestPackedExtensions* defaultTestPackedExtensionsInstance = nil;
+ (void) initialize {
  if (self == [TestPackedExtensions class]) {
    defaultTestPackedExtensionsInstance = [[TestPackedExtensions alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestPackedExtensionsInstance;
}
- (instancetype) defaultInstance {
  return defaultTestPackedExtensionsInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:1
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestPackedExtensions*) parseFromData:(NSData*) data {
  return (TestPackedExtensions*)[[[TestPackedExtensions builder] mergeFromData:data] build];
}
+ (TestPackedExtensions*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedExtensions*)[[[TestPackedExtensions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestPackedExtensions*) parseFromInputStream:(NSInputStream*) input {
  return (TestPackedExtensions*)[[[TestPackedExtensions builder] mergeFromInputStream:input] build];
}
+ (TestPackedExtensions*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedExtensions*)[[[TestPackedExtensions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestPackedExtensions*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestPackedExtensions*)[[[TestPackedExtensions builder] mergeFromCodedInputStream:input] build];
}
+ (TestPackedExtensions*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedExtensions*)[[[TestPackedExtensions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestPackedExtensionsBuilder*) builder {
  return [[TestPackedExtensionsBuilder alloc] init];
}
+ (TestPackedExtensionsBuilder*) builderWithPrototype:(TestPackedExtensions*) prototype {
  return [[TestPackedExtensions builder] mergeFrom:prototype];
}
- (TestPackedExtensionsBuilder*) builder {
  return [TestPackedExtensions builder];
}
- (TestPackedExtensionsBuilder*) toBuilder {
  return [TestPackedExtensions builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestPackedExtensions class]]) {
    return NO;
  }
  TestPackedExtensions *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestPackedExtensionsBuilder()
@property (strong) TestPackedExtensions* resultTestPackedExtensions;
@end

@implementation TestPackedExtensionsBuilder
@synthesize resultTestPackedExtensions;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestPackedExtensions = [[TestPackedExtensions alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return resultTestPackedExtensions;
}
- (TestPackedExtensionsBuilder*) clear {
  self.resultTestPackedExtensions = [[TestPackedExtensions alloc] init];
  return self;
}
- (TestPackedExtensionsBuilder*) clone {
  return [TestPackedExtensions builderWithPrototype:resultTestPackedExtensions];
}
- (TestPackedExtensions*) defaultInstance {
  return [TestPackedExtensions defaultInstance];
}
- (TestPackedExtensions*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestPackedExtensions*) buildPartial {
  TestPackedExtensions* returnMe = resultTestPackedExtensions;
  self.resultTestPackedExtensions = nil;
  return returnMe;
}
- (TestPackedExtensionsBuilder*) mergeFrom:(TestPackedExtensions*) other {
  if (other == [TestPackedExtensions defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestPackedExtensionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestPackedExtensionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface TestUnpackedExtensions ()
@end

@implementation TestUnpackedExtensions

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestUnpackedExtensions* defaultTestUnpackedExtensionsInstance = nil;
+ (void) initialize {
  if (self == [TestUnpackedExtensions class]) {
    defaultTestUnpackedExtensionsInstance = [[TestUnpackedExtensions alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestUnpackedExtensionsInstance;
}
- (instancetype) defaultInstance {
  return defaultTestUnpackedExtensionsInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:1
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestUnpackedExtensions*) parseFromData:(NSData*) data {
  return (TestUnpackedExtensions*)[[[TestUnpackedExtensions builder] mergeFromData:data] build];
}
+ (TestUnpackedExtensions*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestUnpackedExtensions*)[[[TestUnpackedExtensions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestUnpackedExtensions*) parseFromInputStream:(NSInputStream*) input {
  return (TestUnpackedExtensions*)[[[TestUnpackedExtensions builder] mergeFromInputStream:input] build];
}
+ (TestUnpackedExtensions*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestUnpackedExtensions*)[[[TestUnpackedExtensions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestUnpackedExtensions*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestUnpackedExtensions*)[[[TestUnpackedExtensions builder] mergeFromCodedInputStream:input] build];
}
+ (TestUnpackedExtensions*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestUnpackedExtensions*)[[[TestUnpackedExtensions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestUnpackedExtensionsBuilder*) builder {
  return [[TestUnpackedExtensionsBuilder alloc] init];
}
+ (TestUnpackedExtensionsBuilder*) builderWithPrototype:(TestUnpackedExtensions*) prototype {
  return [[TestUnpackedExtensions builder] mergeFrom:prototype];
}
- (TestUnpackedExtensionsBuilder*) builder {
  return [TestUnpackedExtensions builder];
}
- (TestUnpackedExtensionsBuilder*) toBuilder {
  return [TestUnpackedExtensions builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestUnpackedExtensions class]]) {
    return NO;
  }
  TestUnpackedExtensions *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestUnpackedExtensionsBuilder()
@property (strong) TestUnpackedExtensions* resultTestUnpackedExtensions;
@end

@implementation TestUnpackedExtensionsBuilder
@synthesize resultTestUnpackedExtensions;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestUnpackedExtensions = [[TestUnpackedExtensions alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return resultTestUnpackedExtensions;
}
- (TestUnpackedExtensionsBuilder*) clear {
  self.resultTestUnpackedExtensions = [[TestUnpackedExtensions alloc] init];
  return self;
}
- (TestUnpackedExtensionsBuilder*) clone {
  return [TestUnpackedExtensions builderWithPrototype:resultTestUnpackedExtensions];
}
- (TestUnpackedExtensions*) defaultInstance {
  return [TestUnpackedExtensions defaultInstance];
}
- (TestUnpackedExtensions*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestUnpackedExtensions*) buildPartial {
  TestUnpackedExtensions* returnMe = resultTestUnpackedExtensions;
  self.resultTestUnpackedExtensions = nil;
  return returnMe;
}
- (TestUnpackedExtensionsBuilder*) mergeFrom:(TestUnpackedExtensions*) other {
  if (other == [TestUnpackedExtensions defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestUnpackedExtensionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestUnpackedExtensionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface TestDynamicExtensions ()
@property UInt32 scalarExtension;
@property ForeignEnum enumExtension;
@property TestDynamicExtensionsDynamicEnumType dynamicEnumExtension;
@property (strong) ForeignMessage* messageExtension;
@property (strong) TestDynamicExtensionsDynamicMessageType* dynamicMessageExtension;
@property (strong) NSMutableArray * repeatedExtensionArray;
@property (strong) PBAppendableArray * packedExtensionArray;
@end

@implementation TestDynamicExtensions

- (BOOL) hasScalarExtension {
  return !!hasScalarExtension_;
}
- (void) setHasScalarExtension:(BOOL) _value_ {
  hasScalarExtension_ = !!_value_;
}
@synthesize scalarExtension;
- (BOOL) hasEnumExtension {
  return !!hasEnumExtension_;
}
- (void) setHasEnumExtension:(BOOL) _value_ {
  hasEnumExtension_ = !!_value_;
}
@synthesize enumExtension;
- (BOOL) hasDynamicEnumExtension {
  return !!hasDynamicEnumExtension_;
}
- (void) setHasDynamicEnumExtension:(BOOL) _value_ {
  hasDynamicEnumExtension_ = !!_value_;
}
@synthesize dynamicEnumExtension;
- (BOOL) hasMessageExtension {
  return !!hasMessageExtension_;
}
- (void) setHasMessageExtension:(BOOL) _value_ {
  hasMessageExtension_ = !!_value_;
}
@synthesize messageExtension;
- (BOOL) hasDynamicMessageExtension {
  return !!hasDynamicMessageExtension_;
}
- (void) setHasDynamicMessageExtension:(BOOL) _value_ {
  hasDynamicMessageExtension_ = !!_value_;
}
@synthesize dynamicMessageExtension;
@synthesize repeatedExtensionArray;
@dynamic repeatedExtension;
@synthesize packedExtensionArray;
@dynamic packedExtension;
- (instancetype) init {
  if ((self = [super init])) {
    self.scalarExtension = 0;
    self.enumExtension = ForeignEnumForeignFoo;
    self.dynamicEnumExtension = TestDynamicExtensionsDynamicEnumTypeDynamicFoo;
    self.messageExtension = [ForeignMessage defaultInstance];
    self.dynamicMessageExtension = [TestDynamicExtensionsDynamicMessageType defaultInstance];
  }
  return self;
}
static TestDynamicExtensions* defaultTestDynamicExtensionsInstance = nil;
+ (void) initialize {
  if (self == [TestDynamicExtensions class]) {
    defaultTestDynamicExtensionsInstance = [[TestDynamicExtensions alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestDynamicExtensionsInstance;
}
- (instancetype) defaultInstance {
  return defaultTestDynamicExtensionsInstance;
}
- (NSArray *)repeatedExtension {
  return repeatedExtensionArray;
}
- (NSString*)repeatedExtensionAtIndex:(NSUInteger)index {
  return [repeatedExtensionArray objectAtIndex:index];
}
- (PBArray *)packedExtension {
  return packedExtensionArray;
}
- (SInt32)packedExtensionAtIndex:(NSUInteger)index {
  return [packedExtensionArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasScalarExtension) {
    [output writeFixed32:2000 value:self.scalarExtension];
  }
  if (self.hasEnumExtension) {
    [output writeEnum:2001 value:self.enumExtension];
  }
  if (self.hasDynamicEnumExtension) {
    [output writeEnum:2002 value:self.dynamicEnumExtension];
  }
  if (self.hasMessageExtension) {
    [output writeMessage:2003 value:self.messageExtension];
  }
  if (self.hasDynamicMessageExtension) {
    [output writeMessage:2004 value:self.dynamicMessageExtension];
  }
  [self.repeatedExtensionArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:2005 value:element];
  }];
  const NSUInteger packedExtensionArrayCount = self.packedExtensionArray.count;
  if (packedExtensionArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.packedExtensionArray.data;
    [output writeRawVarint32:16050];
    [output writeRawVarint32:packedExtensionMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedExtensionArrayCount; ++i) {
      [output writeSInt32NoTag:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasScalarExtension) {
    size_ += computeFixed32Size(2000, self.scalarExtension);
  }
  if (self.hasEnumExtension) {
    size_ += computeEnumSize(2001, self.enumExtension);
  }
  if (self.hasDynamicEnumExtension) {
    size_ += computeEnumSize(2002, self.dynamicEnumExtension);
  }
  if (self.hasMessageExtension) {
    size_ += computeMessageSize(2003, self.messageExtension);
  }
  if (self.hasDynamicMessageExtension) {
    size_ += computeMessageSize(2004, self.dynamicMessageExtension);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedExtensionArray.count;
    [self.repeatedExtensionArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedExtensionArray.count;
    const SInt32 *values = (const SInt32 *)self.packedExtensionArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedExtensionMemoizedSerializedSize = dataSize;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestDynamicExtensions*) parseFromData:(NSData*) data {
  return (TestDynamicExtensions*)[[[TestDynamicExtensions builder] mergeFromData:data] build];
}
+ (TestDynamicExtensions*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDynamicExtensions*)[[[TestDynamicExtensions builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestDynamicExtensions*) parseFromInputStream:(NSInputStream*) input {
  return (TestDynamicExtensions*)[[[TestDynamicExtensions builder] mergeFromInputStream:input] build];
}
+ (TestDynamicExtensions*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDynamicExtensions*)[[[TestDynamicExtensions builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDynamicExtensions*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestDynamicExtensions*)[[[TestDynamicExtensions builder] mergeFromCodedInputStream:input] build];
}
+ (TestDynamicExtensions*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDynamicExtensions*)[[[TestDynamicExtensions builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDynamicExtensionsBuilder*) builder {
  return [[TestDynamicExtensionsBuilder alloc] init];
}
+ (TestDynamicExtensionsBuilder*) builderWithPrototype:(TestDynamicExtensions*) prototype {
  return [[TestDynamicExtensions builder] mergeFrom:prototype];
}
- (TestDynamicExtensionsBuilder*) builder {
  return [TestDynamicExtensions builder];
}
- (TestDynamicExtensionsBuilder*) toBuilder {
  return [TestDynamicExtensions builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasScalarExtension) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scalarExtension", [NSNumber numberWithInteger:self.scalarExtension]];
  }
  if (self.hasEnumExtension) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enumExtension", NSStringFromForeignEnum(self.enumExtension)];
  }
  if (self.hasDynamicEnumExtension) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dynamicEnumExtension", NSStringFromTestDynamicExtensionsDynamicEnumType(self.dynamicEnumExtension)];
  }
  if (self.hasMessageExtension) {
    [output appendFormat:@"%@%@ {\n", indent, @"messageExtension"];
    [self.messageExtension writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDynamicMessageExtension) {
    [output appendFormat:@"%@%@ {\n", indent, @"dynamicMessageExtension"];
    [self.dynamicMessageExtension writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.repeatedExtensionArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedExtension", obj];
  }];
  [self.packedExtensionArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedExtension", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasScalarExtension) {
    [dictionary setObject: [NSNumber numberWithInteger:self.scalarExtension] forKey: @"scalarExtension"];
  }
  if (self.hasEnumExtension) {
    [dictionary setObject: @(self.enumExtension) forKey: @"enumExtension"];
  }
  if (self.hasDynamicEnumExtension) {
    [dictionary setObject: @(self.dynamicEnumExtension) forKey: @"dynamicEnumExtension"];
  }
  if (self.hasMessageExtension) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.messageExtension storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"messageExtension"];
  }
  if (self.hasDynamicMessageExtension) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.dynamicMessageExtension storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"dynamicMessageExtension"];
  }
  [dictionary setObject:self.repeatedExtension forKey: @"repeatedExtension"];
  NSMutableArray * packedExtensionArrayArray = [NSMutableArray new];
  NSUInteger packedExtensionArrayCount=self.packedExtensionArray.count;
  for(int i=0;i<packedExtensionArrayCount;i++){
    [packedExtensionArrayArray addObject: @([self.packedExtensionArray int32AtIndex:i])];
  }
  [dictionary setObject: packedExtensionArrayArray forKey: @"packedExtension"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDynamicExtensions class]]) {
    return NO;
  }
  TestDynamicExtensions *otherMessage = other;
  return
      self.hasScalarExtension == otherMessage.hasScalarExtension &&
      (!self.hasScalarExtension || self.scalarExtension == otherMessage.scalarExtension) &&
      self.hasEnumExtension == otherMessage.hasEnumExtension &&
      (!self.hasEnumExtension || self.enumExtension == otherMessage.enumExtension) &&
      self.hasDynamicEnumExtension == otherMessage.hasDynamicEnumExtension &&
      (!self.hasDynamicEnumExtension || self.dynamicEnumExtension == otherMessage.dynamicEnumExtension) &&
      self.hasMessageExtension == otherMessage.hasMessageExtension &&
      (!self.hasMessageExtension || [self.messageExtension isEqual:otherMessage.messageExtension]) &&
      self.hasDynamicMessageExtension == otherMessage.hasDynamicMessageExtension &&
      (!self.hasDynamicMessageExtension || [self.dynamicMessageExtension isEqual:otherMessage.dynamicMessageExtension]) &&
      [self.repeatedExtensionArray isEqualToArray:otherMessage.repeatedExtensionArray] &&
      [self.packedExtensionArray isEqualToArray:otherMessage.packedExtensionArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasScalarExtension) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.scalarExtension] hash];
  }
  if (self.hasEnumExtension) {
    hashCode = hashCode * 31 + self.enumExtension;
  }
  if (self.hasDynamicEnumExtension) {
    hashCode = hashCode * 31 + self.dynamicEnumExtension;
  }
  if (self.hasMessageExtension) {
    hashCode = hashCode * 31 + [self.messageExtension hash];
  }
  if (self.hasDynamicMessageExtension) {
    hashCode = hashCode * 31 + [self.dynamicMessageExtension hash];
  }
  [self.repeatedExtensionArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.packedExtensionArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL TestDynamicExtensionsDynamicEnumTypeIsValidValue(TestDynamicExtensionsDynamicEnumType value) {
  switch (value) {
    case TestDynamicExtensionsDynamicEnumTypeDynamicFoo:
    case TestDynamicExtensionsDynamicEnumTypeDynamicBar:
    case TestDynamicExtensionsDynamicEnumTypeDynamicBaz:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromTestDynamicExtensionsDynamicEnumType(TestDynamicExtensionsDynamicEnumType value) {
  switch (value) {
    case TestDynamicExtensionsDynamicEnumTypeDynamicFoo:
      return @"TestDynamicExtensionsDynamicEnumTypeDynamicFoo";
    case TestDynamicExtensionsDynamicEnumTypeDynamicBar:
      return @"TestDynamicExtensionsDynamicEnumTypeDynamicBar";
    case TestDynamicExtensionsDynamicEnumTypeDynamicBaz:
      return @"TestDynamicExtensionsDynamicEnumTypeDynamicBaz";
    default:
      return nil;
  }
}

@interface TestDynamicExtensionsDynamicMessageType ()
@property SInt32 dynamicField;
@end

@implementation TestDynamicExtensionsDynamicMessageType

- (BOOL) hasDynamicField {
  return !!hasDynamicField_;
}
- (void) setHasDynamicField:(BOOL) _value_ {
  hasDynamicField_ = !!_value_;
}
@synthesize dynamicField;
- (instancetype) init {
  if ((self = [super init])) {
    self.dynamicField = 0;
  }
  return self;
}
static TestDynamicExtensionsDynamicMessageType* defaultTestDynamicExtensionsDynamicMessageTypeInstance = nil;
+ (void) initialize {
  if (self == [TestDynamicExtensionsDynamicMessageType class]) {
    defaultTestDynamicExtensionsDynamicMessageTypeInstance = [[TestDynamicExtensionsDynamicMessageType alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestDynamicExtensionsDynamicMessageTypeInstance;
}
- (instancetype) defaultInstance {
  return defaultTestDynamicExtensionsDynamicMessageTypeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDynamicField) {
    [output writeInt32:2100 value:self.dynamicField];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDynamicField) {
    size_ += computeInt32Size(2100, self.dynamicField);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestDynamicExtensionsDynamicMessageType*) parseFromData:(NSData*) data {
  return (TestDynamicExtensionsDynamicMessageType*)[[[TestDynamicExtensionsDynamicMessageType builder] mergeFromData:data] build];
}
+ (TestDynamicExtensionsDynamicMessageType*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDynamicExtensionsDynamicMessageType*)[[[TestDynamicExtensionsDynamicMessageType builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestDynamicExtensionsDynamicMessageType*) parseFromInputStream:(NSInputStream*) input {
  return (TestDynamicExtensionsDynamicMessageType*)[[[TestDynamicExtensionsDynamicMessageType builder] mergeFromInputStream:input] build];
}
+ (TestDynamicExtensionsDynamicMessageType*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDynamicExtensionsDynamicMessageType*)[[[TestDynamicExtensionsDynamicMessageType builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDynamicExtensionsDynamicMessageType*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestDynamicExtensionsDynamicMessageType*)[[[TestDynamicExtensionsDynamicMessageType builder] mergeFromCodedInputStream:input] build];
}
+ (TestDynamicExtensionsDynamicMessageType*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDynamicExtensionsDynamicMessageType*)[[[TestDynamicExtensionsDynamicMessageType builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDynamicExtensionsDynamicMessageTypeBuilder*) builder {
  return [[TestDynamicExtensionsDynamicMessageTypeBuilder alloc] init];
}
+ (TestDynamicExtensionsDynamicMessageTypeBuilder*) builderWithPrototype:(TestDynamicExtensionsDynamicMessageType*) prototype {
  return [[TestDynamicExtensionsDynamicMessageType builder] mergeFrom:prototype];
}
- (TestDynamicExtensionsDynamicMessageTypeBuilder*) builder {
  return [TestDynamicExtensionsDynamicMessageType builder];
}
- (TestDynamicExtensionsDynamicMessageTypeBuilder*) toBuilder {
  return [TestDynamicExtensionsDynamicMessageType builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDynamicField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dynamicField", [NSNumber numberWithInteger:self.dynamicField]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDynamicField) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dynamicField] forKey: @"dynamicField"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDynamicExtensionsDynamicMessageType class]]) {
    return NO;
  }
  TestDynamicExtensionsDynamicMessageType *otherMessage = other;
  return
      self.hasDynamicField == otherMessage.hasDynamicField &&
      (!self.hasDynamicField || self.dynamicField == otherMessage.dynamicField) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDynamicField) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dynamicField] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestDynamicExtensionsDynamicMessageTypeBuilder()
@property (strong) TestDynamicExtensionsDynamicMessageType* resultDynamicMessageType;
@end

@implementation TestDynamicExtensionsDynamicMessageTypeBuilder
@synthesize resultDynamicMessageType;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDynamicMessageType = [[TestDynamicExtensionsDynamicMessageType alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDynamicMessageType;
}
- (TestDynamicExtensionsDynamicMessageTypeBuilder*) clear {
  self.resultDynamicMessageType = [[TestDynamicExtensionsDynamicMessageType alloc] init];
  return self;
}
- (TestDynamicExtensionsDynamicMessageTypeBuilder*) clone {
  return [TestDynamicExtensionsDynamicMessageType builderWithPrototype:resultDynamicMessageType];
}
- (TestDynamicExtensionsDynamicMessageType*) defaultInstance {
  return [TestDynamicExtensionsDynamicMessageType defaultInstance];
}
- (TestDynamicExtensionsDynamicMessageType*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDynamicExtensionsDynamicMessageType*) buildPartial {
  TestDynamicExtensionsDynamicMessageType* returnMe = resultDynamicMessageType;
  self.resultDynamicMessageType = nil;
  return returnMe;
}
- (TestDynamicExtensionsDynamicMessageTypeBuilder*) mergeFrom:(TestDynamicExtensionsDynamicMessageType*) other {
  if (other == [TestDynamicExtensionsDynamicMessageType defaultInstance]) {
    return self;
  }
  if (other.hasDynamicField) {
    [self setDynamicField:other.dynamicField];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestDynamicExtensionsDynamicMessageTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestDynamicExtensionsDynamicMessageTypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 16800: {
        [self setDynamicField:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDynamicField {
  return resultDynamicMessageType.hasDynamicField;
}
- (SInt32) dynamicField {
  return resultDynamicMessageType.dynamicField;
}
- (TestDynamicExtensionsDynamicMessageTypeBuilder*) setDynamicField:(SInt32) value {
  resultDynamicMessageType.hasDynamicField = YES;
  resultDynamicMessageType.dynamicField = value;
  return self;
}
- (TestDynamicExtensionsDynamicMessageTypeBuilder*) clearDynamicField {
  resultDynamicMessageType.hasDynamicField = NO;
  resultDynamicMessageType.dynamicField = 0;
  return self;
}
@end

@interface TestDynamicExtensionsBuilder()
@property (strong) TestDynamicExtensions* resultTestDynamicExtensions;
@end

@implementation TestDynamicExtensionsBuilder
@synthesize resultTestDynamicExtensions;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestDynamicExtensions = [[TestDynamicExtensions alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestDynamicExtensions;
}
- (TestDynamicExtensionsBuilder*) clear {
  self.resultTestDynamicExtensions = [[TestDynamicExtensions alloc] init];
  return self;
}
- (TestDynamicExtensionsBuilder*) clone {
  return [TestDynamicExtensions builderWithPrototype:resultTestDynamicExtensions];
}
- (TestDynamicExtensions*) defaultInstance {
  return [TestDynamicExtensions defaultInstance];
}
- (TestDynamicExtensions*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDynamicExtensions*) buildPartial {
  TestDynamicExtensions* returnMe = resultTestDynamicExtensions;
  self.resultTestDynamicExtensions = nil;
  return returnMe;
}
- (TestDynamicExtensionsBuilder*) mergeFrom:(TestDynamicExtensions*) other {
  if (other == [TestDynamicExtensions defaultInstance]) {
    return self;
  }
  if (other.hasScalarExtension) {
    [self setScalarExtension:other.scalarExtension];
  }
  if (other.hasEnumExtension) {
    [self setEnumExtension:other.enumExtension];
  }
  if (other.hasDynamicEnumExtension) {
    [self setDynamicEnumExtension:other.dynamicEnumExtension];
  }
  if (other.hasMessageExtension) {
    [self mergeMessageExtension:other.messageExtension];
  }
  if (other.hasDynamicMessageExtension) {
    [self mergeDynamicMessageExtension:other.dynamicMessageExtension];
  }
  if (other.repeatedExtensionArray.count > 0) {
    if (resultTestDynamicExtensions.repeatedExtensionArray == nil) {
      resultTestDynamicExtensions.repeatedExtensionArray = [[NSMutableArray alloc] initWithArray:other.repeatedExtensionArray];
    } else {
      [resultTestDynamicExtensions.repeatedExtensionArray addObjectsFromArray:other.repeatedExtensionArray];
    }
  }
  if (other.packedExtensionArray.count > 0) {
    if (resultTestDynamicExtensions.packedExtensionArray == nil) {
      resultTestDynamicExtensions.packedExtensionArray = [other.packedExtensionArray copy];
    } else {
      [resultTestDynamicExtensions.packedExtensionArray appendArray:other.packedExtensionArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestDynamicExtensionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestDynamicExtensionsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 16005: {
        [self setScalarExtension:[input readFixed32]];
        break;
      }
      case 16008: {
        ForeignEnum value = (ForeignEnum)[input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self setEnumExtension:value];
        } else {
          [unknownFields mergeVarintField:2001 value:value];
        }
        break;
      }
      case 16016: {
        TestDynamicExtensionsDynamicEnumType value = (TestDynamicExtensionsDynamicEnumType)[input readEnum];
        if (TestDynamicExtensionsDynamicEnumTypeIsValidValue(value)) {
          [self setDynamicEnumExtension:value];
        } else {
          [unknownFields mergeVarintField:2002 value:value];
        }
        break;
      }
      case 16026: {
        ForeignMessageBuilder* subBuilder = [ForeignMessage builder];
        if (self.hasMessageExtension) {
          [subBuilder mergeFrom:self.messageExtension];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMessageExtension:[subBuilder buildPartial]];
        break;
      }
      case 16034: {
        TestDynamicExtensionsDynamicMessageTypeBuilder* subBuilder = [TestDynamicExtensionsDynamicMessageType builder];
        if (self.hasDynamicMessageExtension) {
          [subBuilder mergeFrom:self.dynamicMessageExtension];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDynamicMessageExtension:[subBuilder buildPartial]];
        break;
      }
      case 16042: {
        [self addRepeatedExtension:[input readString]];
        break;
      }
      case 16050: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestDynamicExtensions.packedExtensionArray == nil) {
          resultTestDynamicExtensions.packedExtensionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestDynamicExtensions.packedExtensionArray addInt32:[input readSInt32]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (BOOL) hasScalarExtension {
  return resultTestDynamicExtensions.hasScalarExtension;
}
- (UInt32) scalarExtension {
  return resultTestDynamicExtensions.scalarExtension;
}
- (TestDynamicExtensionsBuilder*) setScalarExtension:(UInt32) value {
  resultTestDynamicExtensions.hasScalarExtension = YES;
  resultTestDynamicExtensions.scalarExtension = value;
  return self;
}
- (TestDynamicExtensionsBuilder*) clearScalarExtension {
  resultTestDynamicExtensions.hasScalarExtension = NO;
  resultTestDynamicExtensions.scalarExtension = 0;
  return self;
}
- (BOOL) hasEnumExtension {
  return resultTestDynamicExtensions.hasEnumExtension;
}
- (ForeignEnum) enumExtension {
  return resultTestDynamicExtensions.enumExtension;
}
- (TestDynamicExtensionsBuilder*) setEnumExtension:(ForeignEnum) value {
  resultTestDynamicExtensions.hasEnumExtension = YES;
  resultTestDynamicExtensions.enumExtension = value;
  return self;
}
- (TestDynamicExtensionsBuilder*) clearEnumExtension {
  resultTestDynamicExtensions.hasEnumExtension = NO;
  resultTestDynamicExtensions.enumExtension = ForeignEnumForeignFoo;
  return self;
}
- (BOOL) hasDynamicEnumExtension {
  return resultTestDynamicExtensions.hasDynamicEnumExtension;
}
- (TestDynamicExtensionsDynamicEnumType) dynamicEnumExtension {
  return resultTestDynamicExtensions.dynamicEnumExtension;
}
- (TestDynamicExtensionsBuilder*) setDynamicEnumExtension:(TestDynamicExtensionsDynamicEnumType) value {
  resultTestDynamicExtensions.hasDynamicEnumExtension = YES;
  resultTestDynamicExtensions.dynamicEnumExtension = value;
  return self;
}
- (TestDynamicExtensionsBuilder*) clearDynamicEnumExtension {
  resultTestDynamicExtensions.hasDynamicEnumExtension = NO;
  resultTestDynamicExtensions.dynamicEnumExtension = TestDynamicExtensionsDynamicEnumTypeDynamicFoo;
  return self;
}
- (BOOL) hasMessageExtension {
  return resultTestDynamicExtensions.hasMessageExtension;
}
- (ForeignMessage*) messageExtension {
  return resultTestDynamicExtensions.messageExtension;
}
- (TestDynamicExtensionsBuilder*) setMessageExtension:(ForeignMessage*) value {
  resultTestDynamicExtensions.hasMessageExtension = YES;
  resultTestDynamicExtensions.messageExtension = value;
  return self;
}
- (TestDynamicExtensionsBuilder*) setMessageExtensionBuilder:(ForeignMessageBuilder*) builderForValue {
  return [self setMessageExtension:[builderForValue build]];
}
- (TestDynamicExtensionsBuilder*) mergeMessageExtension:(ForeignMessage*) value {
  if (resultTestDynamicExtensions.hasMessageExtension &&
      resultTestDynamicExtensions.messageExtension != [ForeignMessage defaultInstance]) {
    resultTestDynamicExtensions.messageExtension =
      [[[ForeignMessage builderWithPrototype:resultTestDynamicExtensions.messageExtension] mergeFrom:value] buildPartial];
  } else {
    resultTestDynamicExtensions.messageExtension = value;
  }
  resultTestDynamicExtensions.hasMessageExtension = YES;
  return self;
}
- (TestDynamicExtensionsBuilder*) clearMessageExtension {
  resultTestDynamicExtensions.hasMessageExtension = NO;
  resultTestDynamicExtensions.messageExtension = [ForeignMessage defaultInstance];
  return self;
}
- (BOOL) hasDynamicMessageExtension {
  return resultTestDynamicExtensions.hasDynamicMessageExtension;
}
- (TestDynamicExtensionsDynamicMessageType*) dynamicMessageExtension {
  return resultTestDynamicExtensions.dynamicMessageExtension;
}
- (TestDynamicExtensionsBuilder*) setDynamicMessageExtension:(TestDynamicExtensionsDynamicMessageType*) value {
  resultTestDynamicExtensions.hasDynamicMessageExtension = YES;
  resultTestDynamicExtensions.dynamicMessageExtension = value;
  return self;
}
- (TestDynamicExtensionsBuilder*) setDynamicMessageExtensionBuilder:(TestDynamicExtensionsDynamicMessageTypeBuilder*) builderForValue {
  return [self setDynamicMessageExtension:[builderForValue build]];
}
- (TestDynamicExtensionsBuilder*) mergeDynamicMessageExtension:(TestDynamicExtensionsDynamicMessageType*) value {
  if (resultTestDynamicExtensions.hasDynamicMessageExtension &&
      resultTestDynamicExtensions.dynamicMessageExtension != [TestDynamicExtensionsDynamicMessageType defaultInstance]) {
    resultTestDynamicExtensions.dynamicMessageExtension =
      [[[TestDynamicExtensionsDynamicMessageType builderWithPrototype:resultTestDynamicExtensions.dynamicMessageExtension] mergeFrom:value] buildPartial];
  } else {
    resultTestDynamicExtensions.dynamicMessageExtension = value;
  }
  resultTestDynamicExtensions.hasDynamicMessageExtension = YES;
  return self;
}
- (TestDynamicExtensionsBuilder*) clearDynamicMessageExtension {
  resultTestDynamicExtensions.hasDynamicMessageExtension = NO;
  resultTestDynamicExtensions.dynamicMessageExtension = [TestDynamicExtensionsDynamicMessageType defaultInstance];
  return self;
}
- (NSMutableArray *)repeatedExtension {
  return resultTestDynamicExtensions.repeatedExtensionArray;
}
- (NSString*)repeatedExtensionAtIndex:(NSUInteger)index {
  return [resultTestDynamicExtensions repeatedExtensionAtIndex:index];
}
- (TestDynamicExtensionsBuilder *)addRepeatedExtension:(NSString*)value {
  if (resultTestDynamicExtensions.repeatedExtensionArray == nil) {
    resultTestDynamicExtensions.repeatedExtensionArray = [[NSMutableArray alloc]init];
  }
  [resultTestDynamicExtensions.repeatedExtensionArray addObject:value];
  return self;
}
- (TestDynamicExtensionsBuilder *)setRepeatedExtensionArray:(NSArray *)array {
  resultTestDynamicExtensions.repeatedExtensionArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestDynamicExtensionsBuilder *)clearRepeatedExtension {
  resultTestDynamicExtensions.repeatedExtensionArray = nil;
  return self;
}
- (PBAppendableArray *)packedExtension {
  return resultTestDynamicExtensions.packedExtensionArray;
}
- (SInt32)packedExtensionAtIndex:(NSUInteger)index {
  return [resultTestDynamicExtensions packedExtensionAtIndex:index];
}
- (TestDynamicExtensionsBuilder *)addPackedExtension:(SInt32)value {
  if (resultTestDynamicExtensions.packedExtensionArray == nil) {
    resultTestDynamicExtensions.packedExtensionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestDynamicExtensions.packedExtensionArray addInt32:value];
  return self;
}
- (TestDynamicExtensionsBuilder *)setPackedExtensionArray:(NSArray *)array {
  resultTestDynamicExtensions.packedExtensionArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestDynamicExtensionsBuilder *)setPackedExtensionValues:(const SInt32 *)values count:(NSUInteger)count {
  resultTestDynamicExtensions.packedExtensionArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestDynamicExtensionsBuilder *)clearPackedExtension {
  resultTestDynamicExtensions.packedExtensionArray = nil;
  return self;
}
@end

@interface TestRepeatedScalarDifferentTagSizes ()
@property (strong) PBAppendableArray * repeatedFixed32Array;
@property (strong) PBAppendableArray * repeatedInt32Array;
@property (strong) PBAppendableArray * repeatedFixed64Array;
@property (strong) PBAppendableArray * repeatedInt64Array;
@property (strong) PBAppendableArray * repeatedFloatArray;
@property (strong) PBAppendableArray * repeatedUint64Array;
@end

@implementation TestRepeatedScalarDifferentTagSizes

@synthesize repeatedFixed32Array;
@dynamic repeatedFixed32;
@synthesize repeatedInt32Array;
@dynamic repeatedInt32;
@synthesize repeatedFixed64Array;
@dynamic repeatedFixed64;
@synthesize repeatedInt64Array;
@dynamic repeatedInt64;
@synthesize repeatedFloatArray;
@dynamic repeatedFloat;
@synthesize repeatedUint64Array;
@dynamic repeatedUint64;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestRepeatedScalarDifferentTagSizes* defaultTestRepeatedScalarDifferentTagSizesInstance = nil;
+ (void) initialize {
  if (self == [TestRepeatedScalarDifferentTagSizes class]) {
    defaultTestRepeatedScalarDifferentTagSizesInstance = [[TestRepeatedScalarDifferentTagSizes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestRepeatedScalarDifferentTagSizesInstance;
}
- (instancetype) defaultInstance {
  return defaultTestRepeatedScalarDifferentTagSizesInstance;
}
- (PBArray *)repeatedFixed32 {
  return repeatedFixed32Array;
}
- (UInt32)repeatedFixed32AtIndex:(NSUInteger)index {
  return [repeatedFixed32Array uint32AtIndex:index];
}
- (PBArray *)repeatedInt32 {
  return repeatedInt32Array;
}
- (SInt32)repeatedInt32AtIndex:(NSUInteger)index {
  return [repeatedInt32Array int32AtIndex:index];
}
- (PBArray *)repeatedFixed64 {
  return repeatedFixed64Array;
}
- (UInt64)repeatedFixed64AtIndex:(NSUInteger)index {
  return [repeatedFixed64Array uint64AtIndex:index];
}
- (PBArray *)repeatedInt64 {
  return repeatedInt64Array;
}
- (SInt64)repeatedInt64AtIndex:(NSUInteger)index {
  return [repeatedInt64Array int64AtIndex:index];
}
- (PBArray *)repeatedFloat {
  return repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [repeatedFloatArray floatAtIndex:index];
}
- (PBArray *)repeatedUint64 {
  return repeatedUint64Array;
}
- (UInt64)repeatedUint64AtIndex:(NSUInteger)index {
  return [repeatedUint64Array uint64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger repeatedFixed32ArrayCount = self.repeatedFixed32Array.count;
  if (repeatedFixed32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.repeatedFixed32Array.data;
    for (NSUInteger i = 0; i < repeatedFixed32ArrayCount; ++i) {
      [output writeFixed32:12 value:values[i]];
    }
  }
  const NSUInteger repeatedInt32ArrayCount = self.repeatedInt32Array.count;
  if (repeatedInt32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < repeatedInt32ArrayCount; ++i) {
      [output writeInt32:13 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed64ArrayCount = self.repeatedFixed64Array.count;
  if (repeatedFixed64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.repeatedFixed64Array.data;
    for (NSUInteger i = 0; i < repeatedFixed64ArrayCount; ++i) {
      [output writeFixed64:2046 value:values[i]];
    }
  }
  const NSUInteger repeatedInt64ArrayCount = self.repeatedInt64Array.count;
  if (repeatedInt64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < repeatedInt64ArrayCount; ++i) {
      [output writeInt64:2047 value:values[i]];
    }
  }
  const NSUInteger repeatedFloatArrayCount = self.repeatedFloatArray.count;
  if (repeatedFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.repeatedFloatArray.data;
    for (NSUInteger i = 0; i < repeatedFloatArrayCount; ++i) {
      [output writeFloat:262142 value:values[i]];
    }
  }
  const NSUInteger repeatedUint64ArrayCount = self.repeatedUint64Array.count;
  if (repeatedUint64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < repeatedUint64ArrayCount; ++i) {
      [output writeUInt64:262143 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedInt32Array.count;
    const SInt32 *values = (const SInt32 *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedInt64Array.count;
    const SInt64 *values = (const SInt64 *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFloatArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(3 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedUint64Array.count;
    const UInt64 *values = (const UInt64 *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(3 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestRepeatedScalarDifferentTagSizes*) parseFromData:(NSData*) data {
  return (TestRepeatedScalarDifferentTagSizes*)[[[TestRepeatedScalarDifferentTagSizes builder] mergeFromData:data] build];
}
+ (TestRepeatedScalarDifferentTagSizes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRepeatedScalarDifferentTagSizes*)[[[TestRepeatedScalarDifferentTagSizes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestRepeatedScalarDifferentTagSizes*) parseFromInputStream:(NSInputStream*) input {
  return (TestRepeatedScalarDifferentTagSizes*)[[[TestRepeatedScalarDifferentTagSizes builder] mergeFromInputStream:input] build];
}
+ (TestRepeatedScalarDifferentTagSizes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRepeatedScalarDifferentTagSizes*)[[[TestRepeatedScalarDifferentTagSizes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRepeatedScalarDifferentTagSizes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestRepeatedScalarDifferentTagSizes*)[[[TestRepeatedScalarDifferentTagSizes builder] mergeFromCodedInputStream:input] build];
}
+ (TestRepeatedScalarDifferentTagSizes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRepeatedScalarDifferentTagSizes*)[[[TestRepeatedScalarDifferentTagSizes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRepeatedScalarDifferentTagSizesBuilder*) builder {
  return [[TestRepeatedScalarDifferentTagSizesBuilder alloc] init];
}
+ (TestRepeatedScalarDifferentTagSizesBuilder*) builderWithPrototype:(TestRepeatedScalarDifferentTagSizes*) prototype {
  return [[TestRepeatedScalarDifferentTagSizes builder] mergeFrom:prototype];
}
- (TestRepeatedScalarDifferentTagSizesBuilder*) builder {
  return [TestRepeatedScalarDifferentTagSizes builder];
}
- (TestRepeatedScalarDifferentTagSizesBuilder*) toBuilder {
  return [TestRepeatedScalarDifferentTagSizes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.repeatedFixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed32", obj];
  }];
  [self.repeatedInt32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt32", obj];
  }];
  [self.repeatedFixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed64", obj];
  }];
  [self.repeatedInt64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt64", obj];
  }];
  [self.repeatedFloatArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFloat", obj];
  }];
  [self.repeatedUint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint64", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * repeatedFixed32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedFixed32ArrayCount=self.repeatedFixed32Array.count;
  for(int i=0;i<repeatedFixed32ArrayCount;i++){
    [repeatedFixed32ArrayArray addObject: @([self.repeatedFixed32Array uint32AtIndex:i])];
  }
  [dictionary setObject: repeatedFixed32ArrayArray forKey: @"repeatedFixed32"];
  NSMutableArray * repeatedInt32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedInt32ArrayCount=self.repeatedInt32Array.count;
  for(int i=0;i<repeatedInt32ArrayCount;i++){
    [repeatedInt32ArrayArray addObject: @([self.repeatedInt32Array int32AtIndex:i])];
  }
  [dictionary setObject: repeatedInt32ArrayArray forKey: @"repeatedInt32"];
  NSMutableArray * repeatedFixed64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedFixed64ArrayCount=self.repeatedFixed64Array.count;
  for(int i=0;i<repeatedFixed64ArrayCount;i++){
    [repeatedFixed64ArrayArray addObject: @([self.repeatedFixed64Array uint64AtIndex:i])];
  }
  [dictionary setObject: repeatedFixed64ArrayArray forKey: @"repeatedFixed64"];
  NSMutableArray * repeatedInt64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedInt64ArrayCount=self.repeatedInt64Array.count;
  for(int i=0;i<repeatedInt64ArrayCount;i++){
    [repeatedInt64ArrayArray addObject: @([self.repeatedInt64Array int64AtIndex:i])];
  }
  [dictionary setObject: repeatedInt64ArrayArray forKey: @"repeatedInt64"];
  NSMutableArray * repeatedFloatArrayArray = [NSMutableArray new];
  NSUInteger repeatedFloatArrayCount=self.repeatedFloatArray.count;
  for(int i=0;i<repeatedFloatArrayCount;i++){
    [repeatedFloatArrayArray addObject: @([self.repeatedFloatArray floatAtIndex:i])];
  }
  [dictionary setObject: repeatedFloatArrayArray forKey: @"repeatedFloat"];
  NSMutableArray * repeatedUint64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedUint64ArrayCount=self.repeatedUint64Array.count;
  for(int i=0;i<repeatedUint64ArrayCount;i++){
    [repeatedUint64ArrayArray addObject: @([self.repeatedUint64Array uint64AtIndex:i])];
  }
  [dictionary setObject: repeatedUint64ArrayArray forKey: @"repeatedUint64"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRepeatedScalarDifferentTagSizes class]]) {
    return NO;
  }
  TestRepeatedScalarDifferentTagSizes *otherMessage = other;
  return
      [self.repeatedFixed32Array isEqualToArray:otherMessage.repeatedFixed32Array] &&
      [self.repeatedInt32Array isEqualToArray:otherMessage.repeatedInt32Array] &&
      [self.repeatedFixed64Array isEqualToArray:otherMessage.repeatedFixed64Array] &&
      [self.repeatedInt64Array isEqualToArray:otherMessage.repeatedInt64Array] &&
      [self.repeatedFloatArray isEqualToArray:otherMessage.repeatedFloatArray] &&
      [self.repeatedUint64Array isEqualToArray:otherMessage.repeatedUint64Array] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.repeatedFixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedInt32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedFixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedInt64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedFloatArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedUint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestRepeatedScalarDifferentTagSizesBuilder()
@property (strong) TestRepeatedScalarDifferentTagSizes* resultTestRepeatedScalarDifferentTagSizes;
@end

@implementation TestRepeatedScalarDifferentTagSizesBuilder
@synthesize resultTestRepeatedScalarDifferentTagSizes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestRepeatedScalarDifferentTagSizes = [[TestRepeatedScalarDifferentTagSizes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestRepeatedScalarDifferentTagSizes;
}
- (TestRepeatedScalarDifferentTagSizesBuilder*) clear {
  self.resultTestRepeatedScalarDifferentTagSizes = [[TestRepeatedScalarDifferentTagSizes alloc] init];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder*) clone {
  return [TestRepeatedScalarDifferentTagSizes builderWithPrototype:resultTestRepeatedScalarDifferentTagSizes];
}
- (TestRepeatedScalarDifferentTagSizes*) defaultInstance {
  return [TestRepeatedScalarDifferentTagSizes defaultInstance];
}
- (TestRepeatedScalarDifferentTagSizes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRepeatedScalarDifferentTagSizes*) buildPartial {
  TestRepeatedScalarDifferentTagSizes* returnMe = resultTestRepeatedScalarDifferentTagSizes;
  self.resultTestRepeatedScalarDifferentTagSizes = nil;
  return returnMe;
}
- (TestRepeatedScalarDifferentTagSizesBuilder*) mergeFrom:(TestRepeatedScalarDifferentTagSizes*) other {
  if (other == [TestRepeatedScalarDifferentTagSizes defaultInstance]) {
    return self;
  }
  if (other.repeatedFixed32Array.count > 0) {
    if (resultTestRepeatedScalarDifferentTagSizes.repeatedFixed32Array == nil) {
      resultTestRepeatedScalarDifferentTagSizes.repeatedFixed32Array = [other.repeatedFixed32Array copy];
    } else {
      [resultTestRepeatedScalarDifferentTagSizes.repeatedFixed32Array appendArray:other.repeatedFixed32Array];
    }
  }
  if (other.repeatedInt32Array.count > 0) {
    if (resultTestRepeatedScalarDifferentTagSizes.repeatedInt32Array == nil) {
      resultTestRepeatedScalarDifferentTagSizes.repeatedInt32Array = [other.repeatedInt32Array copy];
    } else {
      [resultTestRepeatedScalarDifferentTagSizes.repeatedInt32Array appendArray:other.repeatedInt32Array];
    }
  }
  if (other.repeatedFixed64Array.count > 0) {
    if (resultTestRepeatedScalarDifferentTagSizes.repeatedFixed64Array == nil) {
      resultTestRepeatedScalarDifferentTagSizes.repeatedFixed64Array = [other.repeatedFixed64Array copy];
    } else {
      [resultTestRepeatedScalarDifferentTagSizes.repeatedFixed64Array appendArray:other.repeatedFixed64Array];
    }
  }
  if (other.repeatedInt64Array.count > 0) {
    if (resultTestRepeatedScalarDifferentTagSizes.repeatedInt64Array == nil) {
      resultTestRepeatedScalarDifferentTagSizes.repeatedInt64Array = [other.repeatedInt64Array copy];
    } else {
      [resultTestRepeatedScalarDifferentTagSizes.repeatedInt64Array appendArray:other.repeatedInt64Array];
    }
  }
  if (other.repeatedFloatArray.count > 0) {
    if (resultTestRepeatedScalarDifferentTagSizes.repeatedFloatArray == nil) {
      resultTestRepeatedScalarDifferentTagSizes.repeatedFloatArray = [other.repeatedFloatArray copy];
    } else {
      [resultTestRepeatedScalarDifferentTagSizes.repeatedFloatArray appendArray:other.repeatedFloatArray];
    }
  }
  if (other.repeatedUint64Array.count > 0) {
    if (resultTestRepeatedScalarDifferentTagSizes.repeatedUint64Array == nil) {
      resultTestRepeatedScalarDifferentTagSizes.repeatedUint64Array = [other.repeatedUint64Array copy];
    } else {
      [resultTestRepeatedScalarDifferentTagSizes.repeatedUint64Array appendArray:other.repeatedUint64Array];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestRepeatedScalarDifferentTagSizesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 101: {
        [self addRepeatedFixed32:[input readFixed32]];
        break;
      }
      case 104: {
        [self addRepeatedInt32:[input readInt32]];
        break;
      }
      case 16369: {
        [self addRepeatedFixed64:[input readFixed64]];
        break;
      }
      case 16376: {
        [self addRepeatedInt64:[input readInt64]];
        break;
      }
      case 2097141: {
        [self addRepeatedFloat:[input readFloat]];
        break;
      }
      case 2097144: {
        [self addRepeatedUint64:[input readUInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)repeatedFixed32 {
  return resultTestRepeatedScalarDifferentTagSizes.repeatedFixed32Array;
}
- (UInt32)repeatedFixed32AtIndex:(NSUInteger)index {
  return [resultTestRepeatedScalarDifferentTagSizes repeatedFixed32AtIndex:index];
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)addRepeatedFixed32:(UInt32)value {
  if (resultTestRepeatedScalarDifferentTagSizes.repeatedFixed32Array == nil) {
    resultTestRepeatedScalarDifferentTagSizes.repeatedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestRepeatedScalarDifferentTagSizes.repeatedFixed32Array addUint32:value];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedFixed32Array:(NSArray *)array {
  resultTestRepeatedScalarDifferentTagSizes.repeatedFixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedFixed32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestRepeatedScalarDifferentTagSizes.repeatedFixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)clearRepeatedFixed32 {
  resultTestRepeatedScalarDifferentTagSizes.repeatedFixed32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedInt32 {
  return resultTestRepeatedScalarDifferentTagSizes.repeatedInt32Array;
}
- (SInt32)repeatedInt32AtIndex:(NSUInteger)index {
  return [resultTestRepeatedScalarDifferentTagSizes repeatedInt32AtIndex:index];
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)addRepeatedInt32:(SInt32)value {
  if (resultTestRepeatedScalarDifferentTagSizes.repeatedInt32Array == nil) {
    resultTestRepeatedScalarDifferentTagSizes.repeatedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestRepeatedScalarDifferentTagSizes.repeatedInt32Array addInt32:value];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedInt32Array:(NSArray *)array {
  resultTestRepeatedScalarDifferentTagSizes.repeatedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedInt32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestRepeatedScalarDifferentTagSizes.repeatedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)clearRepeatedInt32 {
  resultTestRepeatedScalarDifferentTagSizes.repeatedInt32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFixed64 {
  return resultTestRepeatedScalarDifferentTagSizes.repeatedFixed64Array;
}
- (UInt64)repeatedFixed64AtIndex:(NSUInteger)index {
  return [resultTestRepeatedScalarDifferentTagSizes repeatedFixed64AtIndex:index];
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)addRepeatedFixed64:(UInt64)value {
  if (resultTestRepeatedScalarDifferentTagSizes.repeatedFixed64Array == nil) {
    resultTestRepeatedScalarDifferentTagSizes.repeatedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestRepeatedScalarDifferentTagSizes.repeatedFixed64Array addUint64:value];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedFixed64Array:(NSArray *)array {
  resultTestRepeatedScalarDifferentTagSizes.repeatedFixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedFixed64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestRepeatedScalarDifferentTagSizes.repeatedFixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)clearRepeatedFixed64 {
  resultTestRepeatedScalarDifferentTagSizes.repeatedFixed64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedInt64 {
  return resultTestRepeatedScalarDifferentTagSizes.repeatedInt64Array;
}
- (SInt64)repeatedInt64AtIndex:(NSUInteger)index {
  return [resultTestRepeatedScalarDifferentTagSizes repeatedInt64AtIndex:index];
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)addRepeatedInt64:(SInt64)value {
  if (resultTestRepeatedScalarDifferentTagSizes.repeatedInt64Array == nil) {
    resultTestRepeatedScalarDifferentTagSizes.repeatedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestRepeatedScalarDifferentTagSizes.repeatedInt64Array addInt64:value];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedInt64Array:(NSArray *)array {
  resultTestRepeatedScalarDifferentTagSizes.repeatedInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedInt64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestRepeatedScalarDifferentTagSizes.repeatedInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)clearRepeatedInt64 {
  resultTestRepeatedScalarDifferentTagSizes.repeatedInt64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFloat {
  return resultTestRepeatedScalarDifferentTagSizes.repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [resultTestRepeatedScalarDifferentTagSizes repeatedFloatAtIndex:index];
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)addRepeatedFloat:(Float32)value {
  if (resultTestRepeatedScalarDifferentTagSizes.repeatedFloatArray == nil) {
    resultTestRepeatedScalarDifferentTagSizes.repeatedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultTestRepeatedScalarDifferentTagSizes.repeatedFloatArray addFloat:value];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedFloatArray:(NSArray *)array {
  resultTestRepeatedScalarDifferentTagSizes.repeatedFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count {
  resultTestRepeatedScalarDifferentTagSizes.repeatedFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)clearRepeatedFloat {
  resultTestRepeatedScalarDifferentTagSizes.repeatedFloatArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedUint64 {
  return resultTestRepeatedScalarDifferentTagSizes.repeatedUint64Array;
}
- (UInt64)repeatedUint64AtIndex:(NSUInteger)index {
  return [resultTestRepeatedScalarDifferentTagSizes repeatedUint64AtIndex:index];
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)addRepeatedUint64:(UInt64)value {
  if (resultTestRepeatedScalarDifferentTagSizes.repeatedUint64Array == nil) {
    resultTestRepeatedScalarDifferentTagSizes.repeatedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestRepeatedScalarDifferentTagSizes.repeatedUint64Array addUint64:value];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedUint64Array:(NSArray *)array {
  resultTestRepeatedScalarDifferentTagSizes.repeatedUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)setRepeatedUint64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestRepeatedScalarDifferentTagSizes.repeatedUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestRepeatedScalarDifferentTagSizesBuilder *)clearRepeatedUint64 {
  resultTestRepeatedScalarDifferentTagSizes.repeatedUint64Array = nil;
  return self;
}
@end

@interface TestParsingMerge ()
@property (strong) TestAllTypes* requiredAllTypes;
@property (strong) TestAllTypes* optionalAllTypes;
@property (strong) NSMutableArray * repeatedAllTypesArray;
@property (strong) TestParsingMergeOptionalGroup* optionalGroup;
@property (strong) NSMutableArray * repeatedGroupArray;
@end

@implementation TestParsingMerge

- (BOOL) hasRequiredAllTypes {
  return !!hasRequiredAllTypes_;
}
- (void) setHasRequiredAllTypes:(BOOL) _value_ {
  hasRequiredAllTypes_ = !!_value_;
}
@synthesize requiredAllTypes;
- (BOOL) hasOptionalAllTypes {
  return !!hasOptionalAllTypes_;
}
- (void) setHasOptionalAllTypes:(BOOL) _value_ {
  hasOptionalAllTypes_ = !!_value_;
}
@synthesize optionalAllTypes;
@synthesize repeatedAllTypesArray;
@dynamic repeatedAllTypes;
- (BOOL) hasOptionalGroup {
  return !!hasOptionalGroup_;
}
- (void) setHasOptionalGroup:(BOOL) _value_ {
  hasOptionalGroup_ = !!_value_;
}
@synthesize optionalGroup;
@synthesize repeatedGroupArray;
@dynamic repeatedGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.requiredAllTypes = [TestAllTypes defaultInstance];
    self.optionalAllTypes = [TestAllTypes defaultInstance];
    self.optionalGroup = [TestParsingMergeOptionalGroup defaultInstance];
  }
  return self;
}
+ (id<PBExtensionField>) optionalExt {
  return TestParsingMerge_optionalExt;
}
+ (id<PBExtensionField>) repeatedExt {
  return TestParsingMerge_repeatedExt;
}
static TestParsingMerge* defaultTestParsingMergeInstance = nil;
+ (void) initialize {
  if (self == [TestParsingMerge class]) {
    defaultTestParsingMergeInstance = [[TestParsingMerge alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeInstance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeInstance;
}
- (NSArray *)repeatedAllTypes {
  return repeatedAllTypesArray;
}
- (TestAllTypes*)repeatedAllTypesAtIndex:(NSUInteger)index {
  return [repeatedAllTypesArray objectAtIndex:index];
}
- (NSArray *)repeatedGroup {
  return repeatedGroupArray;
}
- (TestParsingMergeRepeatedGroup*)repeatedGroupAtIndex:(NSUInteger)index {
  return [repeatedGroupArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasRequiredAllTypes) {
    return NO;
  }
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRequiredAllTypes) {
    [output writeMessage:1 value:self.requiredAllTypes];
  }
  if (self.hasOptionalAllTypes) {
    [output writeMessage:2 value:self.optionalAllTypes];
  }
  [self.repeatedAllTypesArray enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasOptionalGroup) {
    [output writeGroup:10 value:self.optionalGroup];
  }
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    [output writeGroup:20 value:element];
  }];
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequiredAllTypes) {
    size_ += computeMessageSize(1, self.requiredAllTypes);
  }
  if (self.hasOptionalAllTypes) {
    size_ += computeMessageSize(2, self.optionalAllTypes);
  }
  [self.repeatedAllTypesArray enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasOptionalGroup) {
    size_ += computeGroupSize(10, self.optionalGroup);
  }
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    size_ += computeGroupSize(20, element);
  }];
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMerge*) parseFromData:(NSData*) data {
  return (TestParsingMerge*)[[[TestParsingMerge builder] mergeFromData:data] build];
}
+ (TestParsingMerge*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMerge*)[[[TestParsingMerge builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMerge*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMerge*)[[[TestParsingMerge builder] mergeFromInputStream:input] build];
}
+ (TestParsingMerge*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMerge*)[[[TestParsingMerge builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMerge*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMerge*)[[[TestParsingMerge builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMerge*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMerge*)[[[TestParsingMerge builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeBuilder*) builder {
  return [[TestParsingMergeBuilder alloc] init];
}
+ (TestParsingMergeBuilder*) builderWithPrototype:(TestParsingMerge*) prototype {
  return [[TestParsingMerge builder] mergeFrom:prototype];
}
- (TestParsingMergeBuilder*) builder {
  return [TestParsingMerge builder];
}
- (TestParsingMergeBuilder*) toBuilder {
  return [TestParsingMerge builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRequiredAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"requiredAllTypes"];
    [self.requiredAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalAllTypes"];
    [self.optionalAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.repeatedAllTypesArray enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedAllTypes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasOptionalGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalGroup"];
    [self.optionalGroup writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedGroup"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRequiredAllTypes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requiredAllTypes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requiredAllTypes"];
  }
  if (self.hasOptionalAllTypes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalAllTypes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalAllTypes"];
  }
  for (TestAllTypes* element in self.repeatedAllTypesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedAllTypes"];
  }
  if (self.hasOptionalGroup) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalGroup storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalGroup"];
  }
  for (TestParsingMergeRepeatedGroup* element in self.repeatedGroupArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedGroup"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMerge class]]) {
    return NO;
  }
  TestParsingMerge *otherMessage = other;
  return
      self.hasRequiredAllTypes == otherMessage.hasRequiredAllTypes &&
      (!self.hasRequiredAllTypes || [self.requiredAllTypes isEqual:otherMessage.requiredAllTypes]) &&
      self.hasOptionalAllTypes == otherMessage.hasOptionalAllTypes &&
      (!self.hasOptionalAllTypes || [self.optionalAllTypes isEqual:otherMessage.optionalAllTypes]) &&
      [self.repeatedAllTypesArray isEqualToArray:otherMessage.repeatedAllTypesArray] &&
      self.hasOptionalGroup == otherMessage.hasOptionalGroup &&
      (!self.hasOptionalGroup || [self.optionalGroup isEqual:otherMessage.optionalGroup]) &&
      [self.repeatedGroupArray isEqualToArray:otherMessage.repeatedGroupArray] &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRequiredAllTypes) {
    hashCode = hashCode * 31 + [self.requiredAllTypes hash];
  }
  if (self.hasOptionalAllTypes) {
    hashCode = hashCode * 31 + [self.optionalAllTypes hash];
  }
  [self.repeatedAllTypesArray enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOptionalGroup) {
    hashCode = hashCode * 31 + [self.optionalGroup hash];
  }
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeRepeatedFieldsGenerator ()
@property (strong) NSMutableArray * field1Array;
@property (strong) NSMutableArray * field2Array;
@property (strong) NSMutableArray * field3Array;
@property (strong) NSMutableArray * group1Array;
@property (strong) NSMutableArray * group2Array;
@property (strong) NSMutableArray * ext1Array;
@property (strong) NSMutableArray * ext2Array;
@end

@implementation TestParsingMergeRepeatedFieldsGenerator

@synthesize field1Array;
@dynamic field1;
@synthesize field2Array;
@dynamic field2;
@synthesize field3Array;
@dynamic field3;
@synthesize group1Array;
@dynamic group1;
@synthesize group2Array;
@dynamic group2;
@synthesize ext1Array;
@dynamic ext1;
@synthesize ext2Array;
@dynamic ext2;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestParsingMergeRepeatedFieldsGenerator* defaultTestParsingMergeRepeatedFieldsGeneratorInstance = nil;
+ (void) initialize {
  if (self == [TestParsingMergeRepeatedFieldsGenerator class]) {
    defaultTestParsingMergeRepeatedFieldsGeneratorInstance = [[TestParsingMergeRepeatedFieldsGenerator alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeRepeatedFieldsGeneratorInstance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeRepeatedFieldsGeneratorInstance;
}
- (NSArray *)field1 {
  return field1Array;
}
- (TestAllTypes*)field1AtIndex:(NSUInteger)index {
  return [field1Array objectAtIndex:index];
}
- (NSArray *)field2 {
  return field2Array;
}
- (TestAllTypes*)field2AtIndex:(NSUInteger)index {
  return [field2Array objectAtIndex:index];
}
- (NSArray *)field3 {
  return field3Array;
}
- (TestAllTypes*)field3AtIndex:(NSUInteger)index {
  return [field3Array objectAtIndex:index];
}
- (NSArray *)group1 {
  return group1Array;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1*)group1AtIndex:(NSUInteger)index {
  return [group1Array objectAtIndex:index];
}
- (NSArray *)group2 {
  return group2Array;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2*)group2AtIndex:(NSUInteger)index {
  return [group2Array objectAtIndex:index];
}
- (NSArray *)ext1 {
  return ext1Array;
}
- (TestAllTypes*)ext1AtIndex:(NSUInteger)index {
  return [ext1Array objectAtIndex:index];
}
- (NSArray *)ext2 {
  return ext2Array;
}
- (TestAllTypes*)ext2AtIndex:(NSUInteger)index {
  return [ext2Array objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.field1Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.field2Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.field3Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.group1Array enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedFieldsGeneratorGroup1 *element, NSUInteger idx, BOOL *stop) {
    [output writeGroup:10 value:element];
  }];
  [self.group2Array enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedFieldsGeneratorGroup2 *element, NSUInteger idx, BOOL *stop) {
    [output writeGroup:20 value:element];
  }];
  [self.ext1Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1000 value:element];
  }];
  [self.ext2Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1001 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.field1Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  [self.field2Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.field3Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  [self.group1Array enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedFieldsGeneratorGroup1 *element, NSUInteger idx, BOOL *stop) {
    size_ += computeGroupSize(10, element);
  }];
  [self.group2Array enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedFieldsGeneratorGroup2 *element, NSUInteger idx, BOOL *stop) {
    size_ += computeGroupSize(20, element);
  }];
  [self.ext1Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1000, element);
  }];
  [self.ext2Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1001, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMergeRepeatedFieldsGenerator*) parseFromData:(NSData*) data {
  return (TestParsingMergeRepeatedFieldsGenerator*)[[[TestParsingMergeRepeatedFieldsGenerator builder] mergeFromData:data] build];
}
+ (TestParsingMergeRepeatedFieldsGenerator*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedFieldsGenerator*)[[[TestParsingMergeRepeatedFieldsGenerator builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedFieldsGenerator*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMergeRepeatedFieldsGenerator*)[[[TestParsingMergeRepeatedFieldsGenerator builder] mergeFromInputStream:input] build];
}
+ (TestParsingMergeRepeatedFieldsGenerator*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedFieldsGenerator*)[[[TestParsingMergeRepeatedFieldsGenerator builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedFieldsGenerator*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMergeRepeatedFieldsGenerator*)[[[TestParsingMergeRepeatedFieldsGenerator builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMergeRepeatedFieldsGenerator*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedFieldsGenerator*)[[[TestParsingMergeRepeatedFieldsGenerator builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorBuilder*) builder {
  return [[TestParsingMergeRepeatedFieldsGeneratorBuilder alloc] init];
}
+ (TestParsingMergeRepeatedFieldsGeneratorBuilder*) builderWithPrototype:(TestParsingMergeRepeatedFieldsGenerator*) prototype {
  return [[TestParsingMergeRepeatedFieldsGenerator builder] mergeFrom:prototype];
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder*) builder {
  return [TestParsingMergeRepeatedFieldsGenerator builder];
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder*) toBuilder {
  return [TestParsingMergeRepeatedFieldsGenerator builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.field1Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"field1"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.field2Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"field2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.field3Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"field3"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.group1Array enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedFieldsGeneratorGroup1 *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"group1"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.group2Array enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedFieldsGeneratorGroup2 *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"group2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.ext1Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"ext1"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.ext2Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"ext2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (TestAllTypes* element in self.field1Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"field1"];
  }
  for (TestAllTypes* element in self.field2Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"field2"];
  }
  for (TestAllTypes* element in self.field3Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"field3"];
  }
  for (TestParsingMergeRepeatedFieldsGeneratorGroup1* element in self.group1Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"group1"];
  }
  for (TestParsingMergeRepeatedFieldsGeneratorGroup2* element in self.group2Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"group2"];
  }
  for (TestAllTypes* element in self.ext1Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"ext1"];
  }
  for (TestAllTypes* element in self.ext2Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"ext2"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMergeRepeatedFieldsGenerator class]]) {
    return NO;
  }
  TestParsingMergeRepeatedFieldsGenerator *otherMessage = other;
  return
      [self.field1Array isEqualToArray:otherMessage.field1Array] &&
      [self.field2Array isEqualToArray:otherMessage.field2Array] &&
      [self.field3Array isEqualToArray:otherMessage.field3Array] &&
      [self.group1Array isEqualToArray:otherMessage.group1Array] &&
      [self.group2Array isEqualToArray:otherMessage.group2Array] &&
      [self.ext1Array isEqualToArray:otherMessage.ext1Array] &&
      [self.ext2Array isEqualToArray:otherMessage.ext2Array] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.field1Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.field2Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.field3Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.group1Array enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedFieldsGeneratorGroup1 *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.group2Array enumerateObjectsUsingBlock:^(TestParsingMergeRepeatedFieldsGeneratorGroup2 *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.ext1Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.ext2Array enumerateObjectsUsingBlock:^(TestAllTypes *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeRepeatedFieldsGeneratorGroup1 ()
@property (strong) TestAllTypes* field1;
@end

@implementation TestParsingMergeRepeatedFieldsGeneratorGroup1

- (BOOL) hasField1 {
  return !!hasField1_;
}
- (void) setHasField1:(BOOL) _value_ {
  hasField1_ = !!_value_;
}
@synthesize field1;
- (instancetype) init {
  if ((self = [super init])) {
    self.field1 = [TestAllTypes defaultInstance];
  }
  return self;
}
static TestParsingMergeRepeatedFieldsGeneratorGroup1* defaultTestParsingMergeRepeatedFieldsGeneratorGroup1Instance = nil;
+ (void) initialize {
  if (self == [TestParsingMergeRepeatedFieldsGeneratorGroup1 class]) {
    defaultTestParsingMergeRepeatedFieldsGeneratorGroup1Instance = [[TestParsingMergeRepeatedFieldsGeneratorGroup1 alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeRepeatedFieldsGeneratorGroup1Instance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeRepeatedFieldsGeneratorGroup1Instance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasField1) {
    [output writeMessage:11 value:self.field1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasField1) {
    size_ += computeMessageSize(11, self.field1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup1*) parseFromData:(NSData*) data {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup1 builder] mergeFromData:data] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup1*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup1 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup1*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup1 builder] mergeFromInputStream:input] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup1*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup1 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup1*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup1 builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup1*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup1 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) builder {
  return [[TestParsingMergeRepeatedFieldsGeneratorGroup1Builder alloc] init];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) builderWithPrototype:(TestParsingMergeRepeatedFieldsGeneratorGroup1*) prototype {
  return [[TestParsingMergeRepeatedFieldsGeneratorGroup1 builder] mergeFrom:prototype];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) builder {
  return [TestParsingMergeRepeatedFieldsGeneratorGroup1 builder];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) toBuilder {
  return [TestParsingMergeRepeatedFieldsGeneratorGroup1 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasField1) {
    [output appendFormat:@"%@%@ {\n", indent, @"field1"];
    [self.field1 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasField1) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.field1 storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"field1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMergeRepeatedFieldsGeneratorGroup1 class]]) {
    return NO;
  }
  TestParsingMergeRepeatedFieldsGeneratorGroup1 *otherMessage = other;
  return
      self.hasField1 == otherMessage.hasField1 &&
      (!self.hasField1 || [self.field1 isEqual:otherMessage.field1]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasField1) {
    hashCode = hashCode * 31 + [self.field1 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeRepeatedFieldsGeneratorGroup1Builder()
@property (strong) TestParsingMergeRepeatedFieldsGeneratorGroup1* resultGroup1;
@end

@implementation TestParsingMergeRepeatedFieldsGeneratorGroup1Builder
@synthesize resultGroup1;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGroup1 = [[TestParsingMergeRepeatedFieldsGeneratorGroup1 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGroup1;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) clear {
  self.resultGroup1 = [[TestParsingMergeRepeatedFieldsGeneratorGroup1 alloc] init];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) clone {
  return [TestParsingMergeRepeatedFieldsGeneratorGroup1 builderWithPrototype:resultGroup1];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1*) defaultInstance {
  return [TestParsingMergeRepeatedFieldsGeneratorGroup1 defaultInstance];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1*) buildPartial {
  TestParsingMergeRepeatedFieldsGeneratorGroup1* returnMe = resultGroup1;
  self.resultGroup1 = nil;
  return returnMe;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) mergeFrom:(TestParsingMergeRepeatedFieldsGeneratorGroup1*) other {
  if (other == [TestParsingMergeRepeatedFieldsGeneratorGroup1 defaultInstance]) {
    return self;
  }
  if (other.hasField1) {
    [self mergeField1:other.field1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 90: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        if (self.hasField1) {
          [subBuilder mergeFrom:self.field1];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setField1:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasField1 {
  return resultGroup1.hasField1;
}
- (TestAllTypes*) field1 {
  return resultGroup1.field1;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) setField1:(TestAllTypes*) value {
  resultGroup1.hasField1 = YES;
  resultGroup1.field1 = value;
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) setField1Builder:(TestAllTypesBuilder*) builderForValue {
  return [self setField1:[builderForValue build]];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) mergeField1:(TestAllTypes*) value {
  if (resultGroup1.hasField1 &&
      resultGroup1.field1 != [TestAllTypes defaultInstance]) {
    resultGroup1.field1 =
      [[[TestAllTypes builderWithPrototype:resultGroup1.field1] mergeFrom:value] buildPartial];
  } else {
    resultGroup1.field1 = value;
  }
  resultGroup1.hasField1 = YES;
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1Builder*) clearField1 {
  resultGroup1.hasField1 = NO;
  resultGroup1.field1 = [TestAllTypes defaultInstance];
  return self;
}
@end

@interface TestParsingMergeRepeatedFieldsGeneratorGroup2 ()
@property (strong) TestAllTypes* field1;
@end

@implementation TestParsingMergeRepeatedFieldsGeneratorGroup2

- (BOOL) hasField1 {
  return !!hasField1_;
}
- (void) setHasField1:(BOOL) _value_ {
  hasField1_ = !!_value_;
}
@synthesize field1;
- (instancetype) init {
  if ((self = [super init])) {
    self.field1 = [TestAllTypes defaultInstance];
  }
  return self;
}
static TestParsingMergeRepeatedFieldsGeneratorGroup2* defaultTestParsingMergeRepeatedFieldsGeneratorGroup2Instance = nil;
+ (void) initialize {
  if (self == [TestParsingMergeRepeatedFieldsGeneratorGroup2 class]) {
    defaultTestParsingMergeRepeatedFieldsGeneratorGroup2Instance = [[TestParsingMergeRepeatedFieldsGeneratorGroup2 alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeRepeatedFieldsGeneratorGroup2Instance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeRepeatedFieldsGeneratorGroup2Instance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasField1) {
    [output writeMessage:21 value:self.field1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasField1) {
    size_ += computeMessageSize(21, self.field1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup2*) parseFromData:(NSData*) data {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup2 builder] mergeFromData:data] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup2*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup2 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup2*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup2 builder] mergeFromInputStream:input] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup2*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup2 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup2*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup2 builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup2*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeRepeatedFieldsGeneratorGroup2 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) builder {
  return [[TestParsingMergeRepeatedFieldsGeneratorGroup2Builder alloc] init];
}
+ (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) builderWithPrototype:(TestParsingMergeRepeatedFieldsGeneratorGroup2*) prototype {
  return [[TestParsingMergeRepeatedFieldsGeneratorGroup2 builder] mergeFrom:prototype];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) builder {
  return [TestParsingMergeRepeatedFieldsGeneratorGroup2 builder];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) toBuilder {
  return [TestParsingMergeRepeatedFieldsGeneratorGroup2 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasField1) {
    [output appendFormat:@"%@%@ {\n", indent, @"field1"];
    [self.field1 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasField1) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.field1 storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"field1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMergeRepeatedFieldsGeneratorGroup2 class]]) {
    return NO;
  }
  TestParsingMergeRepeatedFieldsGeneratorGroup2 *otherMessage = other;
  return
      self.hasField1 == otherMessage.hasField1 &&
      (!self.hasField1 || [self.field1 isEqual:otherMessage.field1]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasField1) {
    hashCode = hashCode * 31 + [self.field1 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeRepeatedFieldsGeneratorGroup2Builder()
@property (strong) TestParsingMergeRepeatedFieldsGeneratorGroup2* resultGroup2;
@end

@implementation TestParsingMergeRepeatedFieldsGeneratorGroup2Builder
@synthesize resultGroup2;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGroup2 = [[TestParsingMergeRepeatedFieldsGeneratorGroup2 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGroup2;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) clear {
  self.resultGroup2 = [[TestParsingMergeRepeatedFieldsGeneratorGroup2 alloc] init];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) clone {
  return [TestParsingMergeRepeatedFieldsGeneratorGroup2 builderWithPrototype:resultGroup2];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2*) defaultInstance {
  return [TestParsingMergeRepeatedFieldsGeneratorGroup2 defaultInstance];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2*) buildPartial {
  TestParsingMergeRepeatedFieldsGeneratorGroup2* returnMe = resultGroup2;
  self.resultGroup2 = nil;
  return returnMe;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) mergeFrom:(TestParsingMergeRepeatedFieldsGeneratorGroup2*) other {
  if (other == [TestParsingMergeRepeatedFieldsGeneratorGroup2 defaultInstance]) {
    return self;
  }
  if (other.hasField1) {
    [self mergeField1:other.field1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 170: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        if (self.hasField1) {
          [subBuilder mergeFrom:self.field1];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setField1:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasField1 {
  return resultGroup2.hasField1;
}
- (TestAllTypes*) field1 {
  return resultGroup2.field1;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) setField1:(TestAllTypes*) value {
  resultGroup2.hasField1 = YES;
  resultGroup2.field1 = value;
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) setField1Builder:(TestAllTypesBuilder*) builderForValue {
  return [self setField1:[builderForValue build]];
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) mergeField1:(TestAllTypes*) value {
  if (resultGroup2.hasField1 &&
      resultGroup2.field1 != [TestAllTypes defaultInstance]) {
    resultGroup2.field1 =
      [[[TestAllTypes builderWithPrototype:resultGroup2.field1] mergeFrom:value] buildPartial];
  } else {
    resultGroup2.field1 = value;
  }
  resultGroup2.hasField1 = YES;
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2Builder*) clearField1 {
  resultGroup2.hasField1 = NO;
  resultGroup2.field1 = [TestAllTypes defaultInstance];
  return self;
}
@end

@interface TestParsingMergeRepeatedFieldsGeneratorBuilder()
@property (strong) TestParsingMergeRepeatedFieldsGenerator* resultRepeatedFieldsGenerator;
@end

@implementation TestParsingMergeRepeatedFieldsGeneratorBuilder
@synthesize resultRepeatedFieldsGenerator;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepeatedFieldsGenerator = [[TestParsingMergeRepeatedFieldsGenerator alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepeatedFieldsGenerator;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder*) clear {
  self.resultRepeatedFieldsGenerator = [[TestParsingMergeRepeatedFieldsGenerator alloc] init];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder*) clone {
  return [TestParsingMergeRepeatedFieldsGenerator builderWithPrototype:resultRepeatedFieldsGenerator];
}
- (TestParsingMergeRepeatedFieldsGenerator*) defaultInstance {
  return [TestParsingMergeRepeatedFieldsGenerator defaultInstance];
}
- (TestParsingMergeRepeatedFieldsGenerator*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMergeRepeatedFieldsGenerator*) buildPartial {
  TestParsingMergeRepeatedFieldsGenerator* returnMe = resultRepeatedFieldsGenerator;
  self.resultRepeatedFieldsGenerator = nil;
  return returnMe;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder*) mergeFrom:(TestParsingMergeRepeatedFieldsGenerator*) other {
  if (other == [TestParsingMergeRepeatedFieldsGenerator defaultInstance]) {
    return self;
  }
  if (other.field1Array.count > 0) {
    if (resultRepeatedFieldsGenerator.field1Array == nil) {
      resultRepeatedFieldsGenerator.field1Array = [[NSMutableArray alloc] initWithArray:other.field1Array];
    } else {
      [resultRepeatedFieldsGenerator.field1Array addObjectsFromArray:other.field1Array];
    }
  }
  if (other.field2Array.count > 0) {
    if (resultRepeatedFieldsGenerator.field2Array == nil) {
      resultRepeatedFieldsGenerator.field2Array = [[NSMutableArray alloc] initWithArray:other.field2Array];
    } else {
      [resultRepeatedFieldsGenerator.field2Array addObjectsFromArray:other.field2Array];
    }
  }
  if (other.field3Array.count > 0) {
    if (resultRepeatedFieldsGenerator.field3Array == nil) {
      resultRepeatedFieldsGenerator.field3Array = [[NSMutableArray alloc] initWithArray:other.field3Array];
    } else {
      [resultRepeatedFieldsGenerator.field3Array addObjectsFromArray:other.field3Array];
    }
  }
  if (other.group1Array.count > 0) {
    if (resultRepeatedFieldsGenerator.group1Array == nil) {
      resultRepeatedFieldsGenerator.group1Array = [[NSMutableArray alloc] initWithArray:other.group1Array];
    } else {
      [resultRepeatedFieldsGenerator.group1Array addObjectsFromArray:other.group1Array];
    }
  }
  if (other.group2Array.count > 0) {
    if (resultRepeatedFieldsGenerator.group2Array == nil) {
      resultRepeatedFieldsGenerator.group2Array = [[NSMutableArray alloc] initWithArray:other.group2Array];
    } else {
      [resultRepeatedFieldsGenerator.group2Array addObjectsFromArray:other.group2Array];
    }
  }
  if (other.ext1Array.count > 0) {
    if (resultRepeatedFieldsGenerator.ext1Array == nil) {
      resultRepeatedFieldsGenerator.ext1Array = [[NSMutableArray alloc] initWithArray:other.ext1Array];
    } else {
      [resultRepeatedFieldsGenerator.ext1Array addObjectsFromArray:other.ext1Array];
    }
  }
  if (other.ext2Array.count > 0) {
    if (resultRepeatedFieldsGenerator.ext2Array == nil) {
      resultRepeatedFieldsGenerator.ext2Array = [[NSMutableArray alloc] initWithArray:other.ext2Array];
    } else {
      [resultRepeatedFieldsGenerator.ext2Array addObjectsFromArray:other.ext2Array];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addField1:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addField2:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addField3:[subBuilder buildPartial]];
        break;
      }
      case 83: {
        TestParsingMergeRepeatedFieldsGeneratorGroup1Builder* subBuilder = [TestParsingMergeRepeatedFieldsGeneratorGroup1 builder];
        [input readGroup:10 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addGroup1:[subBuilder buildPartial]];
        break;
      }
      case 163: {
        TestParsingMergeRepeatedFieldsGeneratorGroup2Builder* subBuilder = [TestParsingMergeRepeatedFieldsGeneratorGroup2 builder];
        [input readGroup:20 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addGroup2:[subBuilder buildPartial]];
        break;
      }
      case 8002: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addExt1:[subBuilder buildPartial]];
        break;
      }
      case 8010: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addExt2:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)field1 {
  return resultRepeatedFieldsGenerator.field1Array;
}
- (TestAllTypes*)field1AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator field1AtIndex:index];
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)addField1:(TestAllTypes*)value {
  if (resultRepeatedFieldsGenerator.field1Array == nil) {
    resultRepeatedFieldsGenerator.field1Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.field1Array addObject:value];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)setField1Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.field1Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)clearField1 {
  resultRepeatedFieldsGenerator.field1Array = nil;
  return self;
}
- (NSMutableArray *)field2 {
  return resultRepeatedFieldsGenerator.field2Array;
}
- (TestAllTypes*)field2AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator field2AtIndex:index];
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)addField2:(TestAllTypes*)value {
  if (resultRepeatedFieldsGenerator.field2Array == nil) {
    resultRepeatedFieldsGenerator.field2Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.field2Array addObject:value];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)setField2Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.field2Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)clearField2 {
  resultRepeatedFieldsGenerator.field2Array = nil;
  return self;
}
- (NSMutableArray *)field3 {
  return resultRepeatedFieldsGenerator.field3Array;
}
- (TestAllTypes*)field3AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator field3AtIndex:index];
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)addField3:(TestAllTypes*)value {
  if (resultRepeatedFieldsGenerator.field3Array == nil) {
    resultRepeatedFieldsGenerator.field3Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.field3Array addObject:value];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)setField3Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.field3Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)clearField3 {
  resultRepeatedFieldsGenerator.field3Array = nil;
  return self;
}
- (NSMutableArray *)group1 {
  return resultRepeatedFieldsGenerator.group1Array;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup1*)group1AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator group1AtIndex:index];
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)addGroup1:(TestParsingMergeRepeatedFieldsGeneratorGroup1*)value {
  if (resultRepeatedFieldsGenerator.group1Array == nil) {
    resultRepeatedFieldsGenerator.group1Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.group1Array addObject:value];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)setGroup1Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.group1Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)clearGroup1 {
  resultRepeatedFieldsGenerator.group1Array = nil;
  return self;
}
- (NSMutableArray *)group2 {
  return resultRepeatedFieldsGenerator.group2Array;
}
- (TestParsingMergeRepeatedFieldsGeneratorGroup2*)group2AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator group2AtIndex:index];
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)addGroup2:(TestParsingMergeRepeatedFieldsGeneratorGroup2*)value {
  if (resultRepeatedFieldsGenerator.group2Array == nil) {
    resultRepeatedFieldsGenerator.group2Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.group2Array addObject:value];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)setGroup2Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.group2Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)clearGroup2 {
  resultRepeatedFieldsGenerator.group2Array = nil;
  return self;
}
- (NSMutableArray *)ext1 {
  return resultRepeatedFieldsGenerator.ext1Array;
}
- (TestAllTypes*)ext1AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator ext1AtIndex:index];
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)addExt1:(TestAllTypes*)value {
  if (resultRepeatedFieldsGenerator.ext1Array == nil) {
    resultRepeatedFieldsGenerator.ext1Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.ext1Array addObject:value];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)setExt1Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.ext1Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)clearExt1 {
  resultRepeatedFieldsGenerator.ext1Array = nil;
  return self;
}
- (NSMutableArray *)ext2 {
  return resultRepeatedFieldsGenerator.ext2Array;
}
- (TestAllTypes*)ext2AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator ext2AtIndex:index];
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)addExt2:(TestAllTypes*)value {
  if (resultRepeatedFieldsGenerator.ext2Array == nil) {
    resultRepeatedFieldsGenerator.ext2Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.ext2Array addObject:value];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)setExt2Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.ext2Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeRepeatedFieldsGeneratorBuilder *)clearExt2 {
  resultRepeatedFieldsGenerator.ext2Array = nil;
  return self;
}
@end

@interface TestParsingMergeOptionalGroup ()
@property (strong) TestAllTypes* optionalGroupAllTypes;
@end

@implementation TestParsingMergeOptionalGroup

- (BOOL) hasOptionalGroupAllTypes {
  return !!hasOptionalGroupAllTypes_;
}
- (void) setHasOptionalGroupAllTypes:(BOOL) _value_ {
  hasOptionalGroupAllTypes_ = !!_value_;
}
@synthesize optionalGroupAllTypes;
- (instancetype) init {
  if ((self = [super init])) {
    self.optionalGroupAllTypes = [TestAllTypes defaultInstance];
  }
  return self;
}
static TestParsingMergeOptionalGroup* defaultTestParsingMergeOptionalGroupInstance = nil;
+ (void) initialize {
  if (self == [TestParsingMergeOptionalGroup class]) {
    defaultTestParsingMergeOptionalGroupInstance = [[TestParsingMergeOptionalGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeOptionalGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeOptionalGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOptionalGroupAllTypes) {
    [output writeMessage:11 value:self.optionalGroupAllTypes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptionalGroupAllTypes) {
    size_ += computeMessageSize(11, self.optionalGroupAllTypes);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMergeOptionalGroup*) parseFromData:(NSData*) data {
  return (TestParsingMergeOptionalGroup*)[[[TestParsingMergeOptionalGroup builder] mergeFromData:data] build];
}
+ (TestParsingMergeOptionalGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeOptionalGroup*)[[[TestParsingMergeOptionalGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeOptionalGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMergeOptionalGroup*)[[[TestParsingMergeOptionalGroup builder] mergeFromInputStream:input] build];
}
+ (TestParsingMergeOptionalGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeOptionalGroup*)[[[TestParsingMergeOptionalGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeOptionalGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMergeOptionalGroup*)[[[TestParsingMergeOptionalGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMergeOptionalGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeOptionalGroup*)[[[TestParsingMergeOptionalGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeOptionalGroupBuilder*) builder {
  return [[TestParsingMergeOptionalGroupBuilder alloc] init];
}
+ (TestParsingMergeOptionalGroupBuilder*) builderWithPrototype:(TestParsingMergeOptionalGroup*) prototype {
  return [[TestParsingMergeOptionalGroup builder] mergeFrom:prototype];
}
- (TestParsingMergeOptionalGroupBuilder*) builder {
  return [TestParsingMergeOptionalGroup builder];
}
- (TestParsingMergeOptionalGroupBuilder*) toBuilder {
  return [TestParsingMergeOptionalGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOptionalGroupAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalGroupAllTypes"];
    [self.optionalGroupAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOptionalGroupAllTypes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalGroupAllTypes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalGroupAllTypes"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMergeOptionalGroup class]]) {
    return NO;
  }
  TestParsingMergeOptionalGroup *otherMessage = other;
  return
      self.hasOptionalGroupAllTypes == otherMessage.hasOptionalGroupAllTypes &&
      (!self.hasOptionalGroupAllTypes || [self.optionalGroupAllTypes isEqual:otherMessage.optionalGroupAllTypes]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOptionalGroupAllTypes) {
    hashCode = hashCode * 31 + [self.optionalGroupAllTypes hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeOptionalGroupBuilder()
@property (strong) TestParsingMergeOptionalGroup* resultOptionalGroup;
@end

@implementation TestParsingMergeOptionalGroupBuilder
@synthesize resultOptionalGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOptionalGroup = [[TestParsingMergeOptionalGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOptionalGroup;
}
- (TestParsingMergeOptionalGroupBuilder*) clear {
  self.resultOptionalGroup = [[TestParsingMergeOptionalGroup alloc] init];
  return self;
}
- (TestParsingMergeOptionalGroupBuilder*) clone {
  return [TestParsingMergeOptionalGroup builderWithPrototype:resultOptionalGroup];
}
- (TestParsingMergeOptionalGroup*) defaultInstance {
  return [TestParsingMergeOptionalGroup defaultInstance];
}
- (TestParsingMergeOptionalGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMergeOptionalGroup*) buildPartial {
  TestParsingMergeOptionalGroup* returnMe = resultOptionalGroup;
  self.resultOptionalGroup = nil;
  return returnMe;
}
- (TestParsingMergeOptionalGroupBuilder*) mergeFrom:(TestParsingMergeOptionalGroup*) other {
  if (other == [TestParsingMergeOptionalGroup defaultInstance]) {
    return self;
  }
  if (other.hasOptionalGroupAllTypes) {
    [self mergeOptionalGroupAllTypes:other.optionalGroupAllTypes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeOptionalGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeOptionalGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 90: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        if (self.hasOptionalGroupAllTypes) {
          [subBuilder mergeFrom:self.optionalGroupAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroupAllTypes:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOptionalGroupAllTypes {
  return resultOptionalGroup.hasOptionalGroupAllTypes;
}
- (TestAllTypes*) optionalGroupAllTypes {
  return resultOptionalGroup.optionalGroupAllTypes;
}
- (TestParsingMergeOptionalGroupBuilder*) setOptionalGroupAllTypes:(TestAllTypes*) value {
  resultOptionalGroup.hasOptionalGroupAllTypes = YES;
  resultOptionalGroup.optionalGroupAllTypes = value;
  return self;
}
- (TestParsingMergeOptionalGroupBuilder*) setOptionalGroupAllTypesBuilder:(TestAllTypesBuilder*) builderForValue {
  return [self setOptionalGroupAllTypes:[builderForValue build]];
}
- (TestParsingMergeOptionalGroupBuilder*) mergeOptionalGroupAllTypes:(TestAllTypes*) value {
  if (resultOptionalGroup.hasOptionalGroupAllTypes &&
      resultOptionalGroup.optionalGroupAllTypes != [TestAllTypes defaultInstance]) {
    resultOptionalGroup.optionalGroupAllTypes =
      [[[TestAllTypes builderWithPrototype:resultOptionalGroup.optionalGroupAllTypes] mergeFrom:value] buildPartial];
  } else {
    resultOptionalGroup.optionalGroupAllTypes = value;
  }
  resultOptionalGroup.hasOptionalGroupAllTypes = YES;
  return self;
}
- (TestParsingMergeOptionalGroupBuilder*) clearOptionalGroupAllTypes {
  resultOptionalGroup.hasOptionalGroupAllTypes = NO;
  resultOptionalGroup.optionalGroupAllTypes = [TestAllTypes defaultInstance];
  return self;
}
@end

@interface TestParsingMergeRepeatedGroup ()
@property (strong) TestAllTypes* repeatedGroupAllTypes;
@end

@implementation TestParsingMergeRepeatedGroup

- (BOOL) hasRepeatedGroupAllTypes {
  return !!hasRepeatedGroupAllTypes_;
}
- (void) setHasRepeatedGroupAllTypes:(BOOL) _value_ {
  hasRepeatedGroupAllTypes_ = !!_value_;
}
@synthesize repeatedGroupAllTypes;
- (instancetype) init {
  if ((self = [super init])) {
    self.repeatedGroupAllTypes = [TestAllTypes defaultInstance];
  }
  return self;
}
static TestParsingMergeRepeatedGroup* defaultTestParsingMergeRepeatedGroupInstance = nil;
+ (void) initialize {
  if (self == [TestParsingMergeRepeatedGroup class]) {
    defaultTestParsingMergeRepeatedGroupInstance = [[TestParsingMergeRepeatedGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeRepeatedGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeRepeatedGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRepeatedGroupAllTypes) {
    [output writeMessage:21 value:self.repeatedGroupAllTypes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRepeatedGroupAllTypes) {
    size_ += computeMessageSize(21, self.repeatedGroupAllTypes);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMergeRepeatedGroup*) parseFromData:(NSData*) data {
  return (TestParsingMergeRepeatedGroup*)[[[TestParsingMergeRepeatedGroup builder] mergeFromData:data] build];
}
+ (TestParsingMergeRepeatedGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedGroup*)[[[TestParsingMergeRepeatedGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMergeRepeatedGroup*)[[[TestParsingMergeRepeatedGroup builder] mergeFromInputStream:input] build];
}
+ (TestParsingMergeRepeatedGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedGroup*)[[[TestParsingMergeRepeatedGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMergeRepeatedGroup*)[[[TestParsingMergeRepeatedGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMergeRepeatedGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeRepeatedGroup*)[[[TestParsingMergeRepeatedGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeRepeatedGroupBuilder*) builder {
  return [[TestParsingMergeRepeatedGroupBuilder alloc] init];
}
+ (TestParsingMergeRepeatedGroupBuilder*) builderWithPrototype:(TestParsingMergeRepeatedGroup*) prototype {
  return [[TestParsingMergeRepeatedGroup builder] mergeFrom:prototype];
}
- (TestParsingMergeRepeatedGroupBuilder*) builder {
  return [TestParsingMergeRepeatedGroup builder];
}
- (TestParsingMergeRepeatedGroupBuilder*) toBuilder {
  return [TestParsingMergeRepeatedGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRepeatedGroupAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedGroupAllTypes"];
    [self.repeatedGroupAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRepeatedGroupAllTypes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.repeatedGroupAllTypes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"repeatedGroupAllTypes"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMergeRepeatedGroup class]]) {
    return NO;
  }
  TestParsingMergeRepeatedGroup *otherMessage = other;
  return
      self.hasRepeatedGroupAllTypes == otherMessage.hasRepeatedGroupAllTypes &&
      (!self.hasRepeatedGroupAllTypes || [self.repeatedGroupAllTypes isEqual:otherMessage.repeatedGroupAllTypes]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRepeatedGroupAllTypes) {
    hashCode = hashCode * 31 + [self.repeatedGroupAllTypes hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeRepeatedGroupBuilder()
@property (strong) TestParsingMergeRepeatedGroup* resultRepeatedGroup;
@end

@implementation TestParsingMergeRepeatedGroupBuilder
@synthesize resultRepeatedGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepeatedGroup = [[TestParsingMergeRepeatedGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepeatedGroup;
}
- (TestParsingMergeRepeatedGroupBuilder*) clear {
  self.resultRepeatedGroup = [[TestParsingMergeRepeatedGroup alloc] init];
  return self;
}
- (TestParsingMergeRepeatedGroupBuilder*) clone {
  return [TestParsingMergeRepeatedGroup builderWithPrototype:resultRepeatedGroup];
}
- (TestParsingMergeRepeatedGroup*) defaultInstance {
  return [TestParsingMergeRepeatedGroup defaultInstance];
}
- (TestParsingMergeRepeatedGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMergeRepeatedGroup*) buildPartial {
  TestParsingMergeRepeatedGroup* returnMe = resultRepeatedGroup;
  self.resultRepeatedGroup = nil;
  return returnMe;
}
- (TestParsingMergeRepeatedGroupBuilder*) mergeFrom:(TestParsingMergeRepeatedGroup*) other {
  if (other == [TestParsingMergeRepeatedGroup defaultInstance]) {
    return self;
  }
  if (other.hasRepeatedGroupAllTypes) {
    [self mergeRepeatedGroupAllTypes:other.repeatedGroupAllTypes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeRepeatedGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeRepeatedGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 170: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        if (self.hasRepeatedGroupAllTypes) {
          [subBuilder mergeFrom:self.repeatedGroupAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRepeatedGroupAllTypes:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRepeatedGroupAllTypes {
  return resultRepeatedGroup.hasRepeatedGroupAllTypes;
}
- (TestAllTypes*) repeatedGroupAllTypes {
  return resultRepeatedGroup.repeatedGroupAllTypes;
}
- (TestParsingMergeRepeatedGroupBuilder*) setRepeatedGroupAllTypes:(TestAllTypes*) value {
  resultRepeatedGroup.hasRepeatedGroupAllTypes = YES;
  resultRepeatedGroup.repeatedGroupAllTypes = value;
  return self;
}
- (TestParsingMergeRepeatedGroupBuilder*) setRepeatedGroupAllTypesBuilder:(TestAllTypesBuilder*) builderForValue {
  return [self setRepeatedGroupAllTypes:[builderForValue build]];
}
- (TestParsingMergeRepeatedGroupBuilder*) mergeRepeatedGroupAllTypes:(TestAllTypes*) value {
  if (resultRepeatedGroup.hasRepeatedGroupAllTypes &&
      resultRepeatedGroup.repeatedGroupAllTypes != [TestAllTypes defaultInstance]) {
    resultRepeatedGroup.repeatedGroupAllTypes =
      [[[TestAllTypes builderWithPrototype:resultRepeatedGroup.repeatedGroupAllTypes] mergeFrom:value] buildPartial];
  } else {
    resultRepeatedGroup.repeatedGroupAllTypes = value;
  }
  resultRepeatedGroup.hasRepeatedGroupAllTypes = YES;
  return self;
}
- (TestParsingMergeRepeatedGroupBuilder*) clearRepeatedGroupAllTypes {
  resultRepeatedGroup.hasRepeatedGroupAllTypes = NO;
  resultRepeatedGroup.repeatedGroupAllTypes = [TestAllTypes defaultInstance];
  return self;
}
@end

@interface TestParsingMergeBuilder()
@property (strong) TestParsingMerge* resultTestParsingMerge;
@end

@implementation TestParsingMergeBuilder
@synthesize resultTestParsingMerge;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestParsingMerge = [[TestParsingMerge alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return resultTestParsingMerge;
}
- (TestParsingMergeBuilder*) clear {
  self.resultTestParsingMerge = [[TestParsingMerge alloc] init];
  return self;
}
- (TestParsingMergeBuilder*) clone {
  return [TestParsingMerge builderWithPrototype:resultTestParsingMerge];
}
- (TestParsingMerge*) defaultInstance {
  return [TestParsingMerge defaultInstance];
}
- (TestParsingMerge*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMerge*) buildPartial {
  TestParsingMerge* returnMe = resultTestParsingMerge;
  self.resultTestParsingMerge = nil;
  return returnMe;
}
- (TestParsingMergeBuilder*) mergeFrom:(TestParsingMerge*) other {
  if (other == [TestParsingMerge defaultInstance]) {
    return self;
  }
  if (other.hasRequiredAllTypes) {
    [self mergeRequiredAllTypes:other.requiredAllTypes];
  }
  if (other.hasOptionalAllTypes) {
    [self mergeOptionalAllTypes:other.optionalAllTypes];
  }
  if (other.repeatedAllTypesArray.count > 0) {
    if (resultTestParsingMerge.repeatedAllTypesArray == nil) {
      resultTestParsingMerge.repeatedAllTypesArray = [[NSMutableArray alloc] initWithArray:other.repeatedAllTypesArray];
    } else {
      [resultTestParsingMerge.repeatedAllTypesArray addObjectsFromArray:other.repeatedAllTypesArray];
    }
  }
  if (other.hasOptionalGroup) {
    [self mergeOptionalGroup:other.optionalGroup];
  }
  if (other.repeatedGroupArray.count > 0) {
    if (resultTestParsingMerge.repeatedGroupArray == nil) {
      resultTestParsingMerge.repeatedGroupArray = [[NSMutableArray alloc] initWithArray:other.repeatedGroupArray];
    } else {
      [resultTestParsingMerge.repeatedGroupArray addObjectsFromArray:other.repeatedGroupArray];
    }
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        if (self.hasRequiredAllTypes) {
          [subBuilder mergeFrom:self.requiredAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequiredAllTypes:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        if (self.hasOptionalAllTypes) {
          [subBuilder mergeFrom:self.optionalAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalAllTypes:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        TestAllTypesBuilder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedAllTypes:[subBuilder buildPartial]];
        break;
      }
      case 83: {
        TestParsingMergeOptionalGroupBuilder* subBuilder = [TestParsingMergeOptionalGroup builder];
        if (self.hasOptionalGroup) {
          [subBuilder mergeFrom:self.optionalGroup];
        }
        [input readGroup:10 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroup:[subBuilder buildPartial]];
        break;
      }
      case 163: {
        TestParsingMergeRepeatedGroupBuilder* subBuilder = [TestParsingMergeRepeatedGroup builder];
        [input readGroup:20 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedGroup:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRequiredAllTypes {
  return resultTestParsingMerge.hasRequiredAllTypes;
}
- (TestAllTypes*) requiredAllTypes {
  return resultTestParsingMerge.requiredAllTypes;
}
- (TestParsingMergeBuilder*) setRequiredAllTypes:(TestAllTypes*) value {
  resultTestParsingMerge.hasRequiredAllTypes = YES;
  resultTestParsingMerge.requiredAllTypes = value;
  return self;
}
- (TestParsingMergeBuilder*) setRequiredAllTypesBuilder:(TestAllTypesBuilder*) builderForValue {
  return [self setRequiredAllTypes:[builderForValue build]];
}
- (TestParsingMergeBuilder*) mergeRequiredAllTypes:(TestAllTypes*) value {
  if (resultTestParsingMerge.hasRequiredAllTypes &&
      resultTestParsingMerge.requiredAllTypes != [TestAllTypes defaultInstance]) {
    resultTestParsingMerge.requiredAllTypes =
      [[[TestAllTypes builderWithPrototype:resultTestParsingMerge.requiredAllTypes] mergeFrom:value] buildPartial];
  } else {
    resultTestParsingMerge.requiredAllTypes = value;
  }
  resultTestParsingMerge.hasRequiredAllTypes = YES;
  return self;
}
- (TestParsingMergeBuilder*) clearRequiredAllTypes {
  resultTestParsingMerge.hasRequiredAllTypes = NO;
  resultTestParsingMerge.requiredAllTypes = [TestAllTypes defaultInstance];
  return self;
}
- (BOOL) hasOptionalAllTypes {
  return resultTestParsingMerge.hasOptionalAllTypes;
}
- (TestAllTypes*) optionalAllTypes {
  return resultTestParsingMerge.optionalAllTypes;
}
- (TestParsingMergeBuilder*) setOptionalAllTypes:(TestAllTypes*) value {
  resultTestParsingMerge.hasOptionalAllTypes = YES;
  resultTestParsingMerge.optionalAllTypes = value;
  return self;
}
- (TestParsingMergeBuilder*) setOptionalAllTypesBuilder:(TestAllTypesBuilder*) builderForValue {
  return [self setOptionalAllTypes:[builderForValue build]];
}
- (TestParsingMergeBuilder*) mergeOptionalAllTypes:(TestAllTypes*) value {
  if (resultTestParsingMerge.hasOptionalAllTypes &&
      resultTestParsingMerge.optionalAllTypes != [TestAllTypes defaultInstance]) {
    resultTestParsingMerge.optionalAllTypes =
      [[[TestAllTypes builderWithPrototype:resultTestParsingMerge.optionalAllTypes] mergeFrom:value] buildPartial];
  } else {
    resultTestParsingMerge.optionalAllTypes = value;
  }
  resultTestParsingMerge.hasOptionalAllTypes = YES;
  return self;
}
- (TestParsingMergeBuilder*) clearOptionalAllTypes {
  resultTestParsingMerge.hasOptionalAllTypes = NO;
  resultTestParsingMerge.optionalAllTypes = [TestAllTypes defaultInstance];
  return self;
}
- (NSMutableArray *)repeatedAllTypes {
  return resultTestParsingMerge.repeatedAllTypesArray;
}
- (TestAllTypes*)repeatedAllTypesAtIndex:(NSUInteger)index {
  return [resultTestParsingMerge repeatedAllTypesAtIndex:index];
}
- (TestParsingMergeBuilder *)addRepeatedAllTypes:(TestAllTypes*)value {
  if (resultTestParsingMerge.repeatedAllTypesArray == nil) {
    resultTestParsingMerge.repeatedAllTypesArray = [[NSMutableArray alloc]init];
  }
  [resultTestParsingMerge.repeatedAllTypesArray addObject:value];
  return self;
}
- (TestParsingMergeBuilder *)setRepeatedAllTypesArray:(NSArray *)array {
  resultTestParsingMerge.repeatedAllTypesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeBuilder *)clearRepeatedAllTypes {
  resultTestParsingMerge.repeatedAllTypesArray = nil;
  return self;
}
- (BOOL) hasOptionalGroup {
  return resultTestParsingMerge.hasOptionalGroup;
}
- (TestParsingMergeOptionalGroup*) optionalGroup {
  return resultTestParsingMerge.optionalGroup;
}
- (TestParsingMergeBuilder*) setOptionalGroup:(TestParsingMergeOptionalGroup*) value {
  resultTestParsingMerge.hasOptionalGroup = YES;
  resultTestParsingMerge.optionalGroup = value;
  return self;
}
- (TestParsingMergeBuilder*) setOptionalGroupBuilder:(TestParsingMergeOptionalGroupBuilder*) builderForValue {
  return [self setOptionalGroup:[builderForValue build]];
}
- (TestParsingMergeBuilder*) mergeOptionalGroup:(TestParsingMergeOptionalGroup*) value {
  if (resultTestParsingMerge.hasOptionalGroup &&
      resultTestParsingMerge.optionalGroup != [TestParsingMergeOptionalGroup defaultInstance]) {
    resultTestParsingMerge.optionalGroup =
      [[[TestParsingMergeOptionalGroup builderWithPrototype:resultTestParsingMerge.optionalGroup] mergeFrom:value] buildPartial];
  } else {
    resultTestParsingMerge.optionalGroup = value;
  }
  resultTestParsingMerge.hasOptionalGroup = YES;
  return self;
}
- (TestParsingMergeBuilder*) clearOptionalGroup {
  resultTestParsingMerge.hasOptionalGroup = NO;
  resultTestParsingMerge.optionalGroup = [TestParsingMergeOptionalGroup defaultInstance];
  return self;
}
- (NSMutableArray *)repeatedGroup {
  return resultTestParsingMerge.repeatedGroupArray;
}
- (TestParsingMergeRepeatedGroup*)repeatedGroupAtIndex:(NSUInteger)index {
  return [resultTestParsingMerge repeatedGroupAtIndex:index];
}
- (TestParsingMergeBuilder *)addRepeatedGroup:(TestParsingMergeRepeatedGroup*)value {
  if (resultTestParsingMerge.repeatedGroupArray == nil) {
    resultTestParsingMerge.repeatedGroupArray = [[NSMutableArray alloc]init];
  }
  [resultTestParsingMerge.repeatedGroupArray addObject:value];
  return self;
}
- (TestParsingMergeBuilder *)setRepeatedGroupArray:(NSArray *)array {
  resultTestParsingMerge.repeatedGroupArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeBuilder *)clearRepeatedGroup {
  resultTestParsingMerge.repeatedGroupArray = nil;
  return self;
}
@end

@interface TestCommentInjectionMessage ()
@property (strong) NSString* a;
@end

@implementation TestCommentInjectionMessage

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = @"*/ <- Neither should this.";
  }
  return self;
}
static TestCommentInjectionMessage* defaultTestCommentInjectionMessageInstance = nil;
+ (void) initialize {
  if (self == [TestCommentInjectionMessage class]) {
    defaultTestCommentInjectionMessageInstance = [[TestCommentInjectionMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestCommentInjectionMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultTestCommentInjectionMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeString:1 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeStringSize(1, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestCommentInjectionMessage*) parseFromData:(NSData*) data {
  return (TestCommentInjectionMessage*)[[[TestCommentInjectionMessage builder] mergeFromData:data] build];
}
+ (TestCommentInjectionMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestCommentInjectionMessage*)[[[TestCommentInjectionMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestCommentInjectionMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TestCommentInjectionMessage*)[[[TestCommentInjectionMessage builder] mergeFromInputStream:input] build];
}
+ (TestCommentInjectionMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestCommentInjectionMessage*)[[[TestCommentInjectionMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestCommentInjectionMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestCommentInjectionMessage*)[[[TestCommentInjectionMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TestCommentInjectionMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestCommentInjectionMessage*)[[[TestCommentInjectionMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestCommentInjectionMessageBuilder*) builder {
  return [[TestCommentInjectionMessageBuilder alloc] init];
}
+ (TestCommentInjectionMessageBuilder*) builderWithPrototype:(TestCommentInjectionMessage*) prototype {
  return [[TestCommentInjectionMessage builder] mergeFrom:prototype];
}
- (TestCommentInjectionMessageBuilder*) builder {
  return [TestCommentInjectionMessage builder];
}
- (TestCommentInjectionMessageBuilder*) toBuilder {
  return [TestCommentInjectionMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", self.a];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: self.a forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestCommentInjectionMessage class]]) {
    return NO;
  }
  TestCommentInjectionMessage *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || [self.a isEqual:otherMessage.a]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [self.a hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestCommentInjectionMessageBuilder()
@property (strong) TestCommentInjectionMessage* resultTestCommentInjectionMessage;
@end

@implementation TestCommentInjectionMessageBuilder
@synthesize resultTestCommentInjectionMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestCommentInjectionMessage = [[TestCommentInjectionMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestCommentInjectionMessage;
}
- (TestCommentInjectionMessageBuilder*) clear {
  self.resultTestCommentInjectionMessage = [[TestCommentInjectionMessage alloc] init];
  return self;
}
- (TestCommentInjectionMessageBuilder*) clone {
  return [TestCommentInjectionMessage builderWithPrototype:resultTestCommentInjectionMessage];
}
- (TestCommentInjectionMessage*) defaultInstance {
  return [TestCommentInjectionMessage defaultInstance];
}
- (TestCommentInjectionMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestCommentInjectionMessage*) buildPartial {
  TestCommentInjectionMessage* returnMe = resultTestCommentInjectionMessage;
  self.resultTestCommentInjectionMessage = nil;
  return returnMe;
}
- (TestCommentInjectionMessageBuilder*) mergeFrom:(TestCommentInjectionMessage*) other {
  if (other == [TestCommentInjectionMessage defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestCommentInjectionMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestCommentInjectionMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setA:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultTestCommentInjectionMessage.hasA;
}
- (NSString*) a {
  return resultTestCommentInjectionMessage.a;
}
- (TestCommentInjectionMessageBuilder*) setA:(NSString*) value {
  resultTestCommentInjectionMessage.hasA = YES;
  resultTestCommentInjectionMessage.a = value;
  return self;
}
- (TestCommentInjectionMessageBuilder*) clearA {
  resultTestCommentInjectionMessage.hasA = NO;
  resultTestCommentInjectionMessage.a = @"*/ <- Neither should this.";
  return self;
}
@end

@interface FooRequest ()
@end

@implementation FooRequest

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static FooRequest* defaultFooRequestInstance = nil;
+ (void) initialize {
  if (self == [FooRequest class]) {
    defaultFooRequestInstance = [[FooRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFooRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultFooRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FooRequest*) parseFromData:(NSData*) data {
  return (FooRequest*)[[[FooRequest builder] mergeFromData:data] build];
}
+ (FooRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooRequest*)[[[FooRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FooRequest*) parseFromInputStream:(NSInputStream*) input {
  return (FooRequest*)[[[FooRequest builder] mergeFromInputStream:input] build];
}
+ (FooRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooRequest*)[[[FooRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FooRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FooRequest*)[[[FooRequest builder] mergeFromCodedInputStream:input] build];
}
+ (FooRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooRequest*)[[[FooRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FooRequestBuilder*) builder {
  return [[FooRequestBuilder alloc] init];
}
+ (FooRequestBuilder*) builderWithPrototype:(FooRequest*) prototype {
  return [[FooRequest builder] mergeFrom:prototype];
}
- (FooRequestBuilder*) builder {
  return [FooRequest builder];
}
- (FooRequestBuilder*) toBuilder {
  return [FooRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FooRequest class]]) {
    return NO;
  }
  FooRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FooRequestBuilder()
@property (strong) FooRequest* resultFooRequest;
@end

@implementation FooRequestBuilder
@synthesize resultFooRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFooRequest = [[FooRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFooRequest;
}
- (FooRequestBuilder*) clear {
  self.resultFooRequest = [[FooRequest alloc] init];
  return self;
}
- (FooRequestBuilder*) clone {
  return [FooRequest builderWithPrototype:resultFooRequest];
}
- (FooRequest*) defaultInstance {
  return [FooRequest defaultInstance];
}
- (FooRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FooRequest*) buildPartial {
  FooRequest* returnMe = resultFooRequest;
  self.resultFooRequest = nil;
  return returnMe;
}
- (FooRequestBuilder*) mergeFrom:(FooRequest*) other {
  if (other == [FooRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FooRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FooRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface FooResponse ()
@end

@implementation FooResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static FooResponse* defaultFooResponseInstance = nil;
+ (void) initialize {
  if (self == [FooResponse class]) {
    defaultFooResponseInstance = [[FooResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFooResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultFooResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FooResponse*) parseFromData:(NSData*) data {
  return (FooResponse*)[[[FooResponse builder] mergeFromData:data] build];
}
+ (FooResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooResponse*)[[[FooResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FooResponse*) parseFromInputStream:(NSInputStream*) input {
  return (FooResponse*)[[[FooResponse builder] mergeFromInputStream:input] build];
}
+ (FooResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooResponse*)[[[FooResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FooResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FooResponse*)[[[FooResponse builder] mergeFromCodedInputStream:input] build];
}
+ (FooResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooResponse*)[[[FooResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FooResponseBuilder*) builder {
  return [[FooResponseBuilder alloc] init];
}
+ (FooResponseBuilder*) builderWithPrototype:(FooResponse*) prototype {
  return [[FooResponse builder] mergeFrom:prototype];
}
- (FooResponseBuilder*) builder {
  return [FooResponse builder];
}
- (FooResponseBuilder*) toBuilder {
  return [FooResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FooResponse class]]) {
    return NO;
  }
  FooResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FooResponseBuilder()
@property (strong) FooResponse* resultFooResponse;
@end

@implementation FooResponseBuilder
@synthesize resultFooResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFooResponse = [[FooResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFooResponse;
}
- (FooResponseBuilder*) clear {
  self.resultFooResponse = [[FooResponse alloc] init];
  return self;
}
- (FooResponseBuilder*) clone {
  return [FooResponse builderWithPrototype:resultFooResponse];
}
- (FooResponse*) defaultInstance {
  return [FooResponse defaultInstance];
}
- (FooResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FooResponse*) buildPartial {
  FooResponse* returnMe = resultFooResponse;
  self.resultFooResponse = nil;
  return returnMe;
}
- (FooResponseBuilder*) mergeFrom:(FooResponse*) other {
  if (other == [FooResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FooResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FooResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface FooClientMessage ()
@end

@implementation FooClientMessage

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static FooClientMessage* defaultFooClientMessageInstance = nil;
+ (void) initialize {
  if (self == [FooClientMessage class]) {
    defaultFooClientMessageInstance = [[FooClientMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFooClientMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultFooClientMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FooClientMessage*) parseFromData:(NSData*) data {
  return (FooClientMessage*)[[[FooClientMessage builder] mergeFromData:data] build];
}
+ (FooClientMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooClientMessage*)[[[FooClientMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FooClientMessage*) parseFromInputStream:(NSInputStream*) input {
  return (FooClientMessage*)[[[FooClientMessage builder] mergeFromInputStream:input] build];
}
+ (FooClientMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooClientMessage*)[[[FooClientMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FooClientMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FooClientMessage*)[[[FooClientMessage builder] mergeFromCodedInputStream:input] build];
}
+ (FooClientMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooClientMessage*)[[[FooClientMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FooClientMessageBuilder*) builder {
  return [[FooClientMessageBuilder alloc] init];
}
+ (FooClientMessageBuilder*) builderWithPrototype:(FooClientMessage*) prototype {
  return [[FooClientMessage builder] mergeFrom:prototype];
}
- (FooClientMessageBuilder*) builder {
  return [FooClientMessage builder];
}
- (FooClientMessageBuilder*) toBuilder {
  return [FooClientMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FooClientMessage class]]) {
    return NO;
  }
  FooClientMessage *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FooClientMessageBuilder()
@property (strong) FooClientMessage* resultFooClientMessage;
@end

@implementation FooClientMessageBuilder
@synthesize resultFooClientMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFooClientMessage = [[FooClientMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFooClientMessage;
}
- (FooClientMessageBuilder*) clear {
  self.resultFooClientMessage = [[FooClientMessage alloc] init];
  return self;
}
- (FooClientMessageBuilder*) clone {
  return [FooClientMessage builderWithPrototype:resultFooClientMessage];
}
- (FooClientMessage*) defaultInstance {
  return [FooClientMessage defaultInstance];
}
- (FooClientMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FooClientMessage*) buildPartial {
  FooClientMessage* returnMe = resultFooClientMessage;
  self.resultFooClientMessage = nil;
  return returnMe;
}
- (FooClientMessageBuilder*) mergeFrom:(FooClientMessage*) other {
  if (other == [FooClientMessage defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FooClientMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FooClientMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface FooServerMessage ()
@end

@implementation FooServerMessage

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static FooServerMessage* defaultFooServerMessageInstance = nil;
+ (void) initialize {
  if (self == [FooServerMessage class]) {
    defaultFooServerMessageInstance = [[FooServerMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFooServerMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultFooServerMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FooServerMessage*) parseFromData:(NSData*) data {
  return (FooServerMessage*)[[[FooServerMessage builder] mergeFromData:data] build];
}
+ (FooServerMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooServerMessage*)[[[FooServerMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FooServerMessage*) parseFromInputStream:(NSInputStream*) input {
  return (FooServerMessage*)[[[FooServerMessage builder] mergeFromInputStream:input] build];
}
+ (FooServerMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooServerMessage*)[[[FooServerMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FooServerMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FooServerMessage*)[[[FooServerMessage builder] mergeFromCodedInputStream:input] build];
}
+ (FooServerMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FooServerMessage*)[[[FooServerMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FooServerMessageBuilder*) builder {
  return [[FooServerMessageBuilder alloc] init];
}
+ (FooServerMessageBuilder*) builderWithPrototype:(FooServerMessage*) prototype {
  return [[FooServerMessage builder] mergeFrom:prototype];
}
- (FooServerMessageBuilder*) builder {
  return [FooServerMessage builder];
}
- (FooServerMessageBuilder*) toBuilder {
  return [FooServerMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FooServerMessage class]]) {
    return NO;
  }
  FooServerMessage *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FooServerMessageBuilder()
@property (strong) FooServerMessage* resultFooServerMessage;
@end

@implementation FooServerMessageBuilder
@synthesize resultFooServerMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFooServerMessage = [[FooServerMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFooServerMessage;
}
- (FooServerMessageBuilder*) clear {
  self.resultFooServerMessage = [[FooServerMessage alloc] init];
  return self;
}
- (FooServerMessageBuilder*) clone {
  return [FooServerMessage builderWithPrototype:resultFooServerMessage];
}
- (FooServerMessage*) defaultInstance {
  return [FooServerMessage defaultInstance];
}
- (FooServerMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FooServerMessage*) buildPartial {
  FooServerMessage* returnMe = resultFooServerMessage;
  self.resultFooServerMessage = nil;
  return returnMe;
}
- (FooServerMessageBuilder*) mergeFrom:(FooServerMessage*) other {
  if (other == [FooServerMessage defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FooServerMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FooServerMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface BarRequest ()
@end

@implementation BarRequest

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BarRequest* defaultBarRequestInstance = nil;
+ (void) initialize {
  if (self == [BarRequest class]) {
    defaultBarRequestInstance = [[BarRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBarRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultBarRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BarRequest*) parseFromData:(NSData*) data {
  return (BarRequest*)[[[BarRequest builder] mergeFromData:data] build];
}
+ (BarRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BarRequest*)[[[BarRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BarRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BarRequest*)[[[BarRequest builder] mergeFromInputStream:input] build];
}
+ (BarRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BarRequest*)[[[BarRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BarRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BarRequest*)[[[BarRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BarRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BarRequest*)[[[BarRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BarRequestBuilder*) builder {
  return [[BarRequestBuilder alloc] init];
}
+ (BarRequestBuilder*) builderWithPrototype:(BarRequest*) prototype {
  return [[BarRequest builder] mergeFrom:prototype];
}
- (BarRequestBuilder*) builder {
  return [BarRequest builder];
}
- (BarRequestBuilder*) toBuilder {
  return [BarRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BarRequest class]]) {
    return NO;
  }
  BarRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BarRequestBuilder()
@property (strong) BarRequest* resultBarRequest;
@end

@implementation BarRequestBuilder
@synthesize resultBarRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBarRequest = [[BarRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBarRequest;
}
- (BarRequestBuilder*) clear {
  self.resultBarRequest = [[BarRequest alloc] init];
  return self;
}
- (BarRequestBuilder*) clone {
  return [BarRequest builderWithPrototype:resultBarRequest];
}
- (BarRequest*) defaultInstance {
  return [BarRequest defaultInstance];
}
- (BarRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BarRequest*) buildPartial {
  BarRequest* returnMe = resultBarRequest;
  self.resultBarRequest = nil;
  return returnMe;
}
- (BarRequestBuilder*) mergeFrom:(BarRequest*) other {
  if (other == [BarRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BarRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BarRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface BarResponse ()
@end

@implementation BarResponse

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static BarResponse* defaultBarResponseInstance = nil;
+ (void) initialize {
  if (self == [BarResponse class]) {
    defaultBarResponseInstance = [[BarResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBarResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultBarResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BarResponse*) parseFromData:(NSData*) data {
  return (BarResponse*)[[[BarResponse builder] mergeFromData:data] build];
}
+ (BarResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BarResponse*)[[[BarResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BarResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BarResponse*)[[[BarResponse builder] mergeFromInputStream:input] build];
}
+ (BarResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BarResponse*)[[[BarResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BarResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BarResponse*)[[[BarResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BarResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BarResponse*)[[[BarResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BarResponseBuilder*) builder {
  return [[BarResponseBuilder alloc] init];
}
+ (BarResponseBuilder*) builderWithPrototype:(BarResponse*) prototype {
  return [[BarResponse builder] mergeFrom:prototype];
}
- (BarResponseBuilder*) builder {
  return [BarResponse builder];
}
- (BarResponseBuilder*) toBuilder {
  return [BarResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BarResponse class]]) {
    return NO;
  }
  BarResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BarResponseBuilder()
@property (strong) BarResponse* resultBarResponse;
@end

@implementation BarResponseBuilder
@synthesize resultBarResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBarResponse = [[BarResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBarResponse;
}
- (BarResponseBuilder*) clear {
  self.resultBarResponse = [[BarResponse alloc] init];
  return self;
}
- (BarResponseBuilder*) clone {
  return [BarResponse builderWithPrototype:resultBarResponse];
}
- (BarResponse*) defaultInstance {
  return [BarResponse defaultInstance];
}
- (BarResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BarResponse*) buildPartial {
  BarResponse* returnMe = resultBarResponse;
  self.resultBarResponse = nil;
  return returnMe;
}
- (BarResponseBuilder*) mergeFrom:(BarResponse*) other {
  if (other == [BarResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BarResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BarResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end


// @@protoc_insertion_point(global_scope)
