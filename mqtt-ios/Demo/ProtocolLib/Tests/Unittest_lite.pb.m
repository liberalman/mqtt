// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Unittest_lite.pb.h"
// @@protoc_insertion_point(imports)

@implementation UnittestLiteRoot
static id<PBExtensionField> UnittestLiteRoot_optionalInt32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalInt64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalUint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalUint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalSint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalSint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalFixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalFixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalSfixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalSfixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalFloatExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalDoubleExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalBoolExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalStringExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalBytesExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalGroupExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalNestedMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalForeignMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalImportMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalNestedEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalForeignEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalImportEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalStringPieceExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalCordExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalPublicImportMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_optionalLazyMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedInt32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedInt64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedUint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedUint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedSint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedSint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedFixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedFixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedSfixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedSfixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedFloatExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedDoubleExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedBoolExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedStringExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedBytesExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedGroupExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedNestedMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedForeignMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedImportMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedNestedEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedForeignEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedImportEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedStringPieceExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedCordExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_repeatedLazyMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultInt32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultInt64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultUint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultUint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultSint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultSint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultFixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultFixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultSfixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultSfixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultFloatExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultDoubleExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultBoolExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultStringExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultBytesExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultNestedEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultForeignEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultImportEnumExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultStringPieceExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_defaultCordExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_oneofUint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_oneofNestedMessageExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_oneofStringExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_oneofBytesExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedInt32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedInt64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedUint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedUint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedSint32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedSint64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedFixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedFixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedSfixed32ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedSfixed64ExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedFloatExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedDoubleExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedBoolExtensionLite = nil;
static id<PBExtensionField> UnittestLiteRoot_packedEnumExtensionLite = nil;
static id<PBExtensionField> TestNestedExtensionLite_nestedExtension = nil;
static id<PBExtensionField> TestParsingMergeLite_optionalExt = nil;
static id<PBExtensionField> TestParsingMergeLite_repeatedExt = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UnittestLiteRoot class]) {
    UnittestLiteRoot_optionalInt32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:1
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalInt64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:2
                                      defaultValue:[NSNumber numberWithLongLong:0L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalUint32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:3
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalUint64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:4
                                      defaultValue:[NSNumber numberWithLongLong:0L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalSint32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:5
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalSint64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:6
                                      defaultValue:[NSNumber numberWithLongLong:0L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalFixed32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:7
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalFixed64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:8
                                      defaultValue:[NSNumber numberWithLongLong:0L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalSfixed32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:9
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalSfixed64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:10
                                      defaultValue:[NSNumber numberWithLongLong:0L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalFloatExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFloat
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:11
                                      defaultValue:[NSNumber numberWithFloat:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalDoubleExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeDouble
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:12
                                      defaultValue:[NSNumber numberWithDouble:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalBoolExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBool
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:13
                                      defaultValue:[NSNumber numberWithBool:NO]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalStringExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:14
                                      defaultValue:@""
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalBytesExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBytes
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:15
                                      defaultValue:[NSData data]
                               messageOrGroupClass:[NSData class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalGroupExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeGroup
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:16
                                      defaultValue:[OptionalGroup_extension_lite defaultInstance]
                               messageOrGroupClass:[OptionalGroup_extension_lite class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalNestedMessageExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:18
                                      defaultValue:[TestAllTypesLiteNestedMessage defaultInstance]
                               messageOrGroupClass:[TestAllTypesLiteNestedMessage class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalForeignMessageExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:19
                                      defaultValue:[ForeignMessageLite defaultInstance]
                               messageOrGroupClass:[ForeignMessageLite class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalImportMessageExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:20
                                      defaultValue:[ImportMessageLite defaultInstance]
                               messageOrGroupClass:[ImportMessageLite class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalNestedEnumExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:21
                                      defaultValue:[NSNumber numberWithInteger:TestAllTypesLiteNestedEnumFoo]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalForeignEnumExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:22
                                      defaultValue:[NSNumber numberWithInteger:ForeignEnumLiteForeignLiteFoo]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalImportEnumExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:23
                                      defaultValue:[NSNumber numberWithInteger:ImportEnumLiteImportLiteFoo]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalStringPieceExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:24
                                      defaultValue:@""
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalCordExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:25
                                      defaultValue:@""
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalPublicImportMessageExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:26
                                      defaultValue:[PublicImportMessageLite defaultInstance]
                               messageOrGroupClass:[PublicImportMessageLite class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_optionalLazyMessageExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:27
                                      defaultValue:[TestAllTypesLiteNestedMessage defaultInstance]
                               messageOrGroupClass:[TestAllTypesLiteNestedMessage class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedInt32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:31
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedInt64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:32
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedUint32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:33
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedUint64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:34
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedSint32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:35
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedSint64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:36
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedFixed32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:37
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedFixed64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:38
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedSfixed32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:39
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedSfixed64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:40
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedFloatExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFloat
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:41
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeFloat]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedDoubleExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeDouble
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:42
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeDouble]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedBoolExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBool
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:43
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeBool]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedStringExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:44
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSString class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedBytesExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBytes
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:45
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSData class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedGroupExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeGroup
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:46
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[RepeatedGroup_extension_lite class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedNestedMessageExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:48
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[TestAllTypesLiteNestedMessage class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedForeignMessageExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:49
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[ForeignMessageLite class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedImportMessageExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:50
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[ImportMessageLite class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedNestedEnumExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:51
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedForeignEnumExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:52
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedImportEnumExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:53
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedStringPieceExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:54
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSString class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedCordExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:55
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSString class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_repeatedLazyMessageExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:57
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[TestAllTypesLiteNestedMessage class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultInt32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:61
                                      defaultValue:[NSNumber numberWithInteger:41]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultInt64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:62
                                      defaultValue:[NSNumber numberWithLongLong:42L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultUint32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:63
                                      defaultValue:[NSNumber numberWithInteger:43]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultUint64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:64
                                      defaultValue:[NSNumber numberWithLongLong:44L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultSint32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:65
                                      defaultValue:[NSNumber numberWithInteger:-45]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultSint64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:66
                                      defaultValue:[NSNumber numberWithLongLong:46L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultFixed32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:67
                                      defaultValue:[NSNumber numberWithInteger:47]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultFixed64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:68
                                      defaultValue:[NSNumber numberWithLongLong:48L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultSfixed32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:69
                                      defaultValue:[NSNumber numberWithInteger:49]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultSfixed64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed64
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:70
                                      defaultValue:[NSNumber numberWithLongLong:-50L]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultFloatExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFloat
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:71
                                      defaultValue:[NSNumber numberWithFloat:51.5]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultDoubleExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeDouble
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:72
                                      defaultValue:[NSNumber numberWithDouble:52000]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultBoolExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBool
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:73
                                      defaultValue:[NSNumber numberWithBool:YES]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultStringExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:74
                                      defaultValue:@"hello"
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultBytesExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBytes
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:75
                                      defaultValue:[NSData dataWithBytes:"world" length:5]
                               messageOrGroupClass:[NSData class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultNestedEnumExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:81
                                      defaultValue:[NSNumber numberWithInteger:TestAllTypesLiteNestedEnumBar]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultForeignEnumExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:82
                                      defaultValue:[NSNumber numberWithInteger:ForeignEnumLiteForeignLiteBar]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultImportEnumExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:83
                                      defaultValue:[NSNumber numberWithInteger:ImportEnumLiteImportLiteBar]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultStringPieceExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:84
                                      defaultValue:@"abc"
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_defaultCordExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:85
                                      defaultValue:@"123"
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_oneofUint32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:111
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_oneofNestedMessageExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:112
                                      defaultValue:[TestAllTypesLiteNestedMessage defaultInstance]
                               messageOrGroupClass:[TestAllTypesLiteNestedMessage class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_oneofStringExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeString
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:113
                                      defaultValue:@""
                               messageOrGroupClass:[NSString class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_oneofBytesExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBytes
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:114
                                      defaultValue:[NSData data]
                               messageOrGroupClass:[NSData class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedInt32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt32
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:90
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedInt64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt64
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:91
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedUint32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt32
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:92
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedUint64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeUInt64
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:93
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedSint32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt32
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:94
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedSint64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSInt64
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:95
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedFixed32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed32
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:96
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedFixed64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFixed64
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:97
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedSfixed32ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed32
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:98
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedSfixed64ExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeSFixed64
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:99
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedFloatExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeFloat
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:100
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeFloat]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedDoubleExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeDouble
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:101
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeDouble]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedBoolExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeBool
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:102
                                      defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeBool]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    UnittestLiteRoot_packedEnumExtensionLite =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeEnum
                                     extendedClass:[TestPackedExtensionsLite class]
                                       fieldNumber:103
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:YES
                                          isPacked:YES
                            isMessageSetWireFormat:NO];
    TestNestedExtensionLite_nestedExtension =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeInt32
                                     extendedClass:[TestAllExtensionsLite class]
                                       fieldNumber:12345
                                      defaultValue:[NSNumber numberWithInteger:0]
                               messageOrGroupClass:[NSNumber class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    TestParsingMergeLite_optionalExt =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestParsingMergeLite class]
                                       fieldNumber:1000
                                      defaultValue:[TestAllTypesLite defaultInstance]
                               messageOrGroupClass:[TestAllTypesLite class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    TestParsingMergeLite_repeatedExt =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TestParsingMergeLite class]
                                       fieldNumber:1001
                                      defaultValue:[[NSArray alloc] init]
                               messageOrGroupClass:[TestAllTypesLite class]
                                        isRepeated:YES
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [UnittestImportLiteRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:UnittestLiteRoot_optionalInt32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalInt64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalUint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalUint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalSint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalSint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalFixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalFixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalSfixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalSfixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalFloatExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalDoubleExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalBoolExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalStringExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalBytesExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalGroupExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalNestedMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalForeignMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalImportMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalNestedEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalForeignEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalImportEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalStringPieceExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalCordExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalPublicImportMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_optionalLazyMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedInt32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedInt64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedUint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedUint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedSint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedSint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedFixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedFixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedSfixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedSfixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedFloatExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedDoubleExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedBoolExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedStringExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedBytesExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedGroupExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedNestedMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedForeignMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedImportMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedNestedEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedForeignEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedImportEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedStringPieceExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedCordExtensionLite];
  [registry addExtension:UnittestLiteRoot_repeatedLazyMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultInt32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultInt64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultUint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultUint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultSint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultSint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultFixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultFixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultSfixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultSfixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultFloatExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultDoubleExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultBoolExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultStringExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultBytesExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultNestedEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultForeignEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultImportEnumExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultStringPieceExtensionLite];
  [registry addExtension:UnittestLiteRoot_defaultCordExtensionLite];
  [registry addExtension:UnittestLiteRoot_oneofUint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_oneofNestedMessageExtensionLite];
  [registry addExtension:UnittestLiteRoot_oneofStringExtensionLite];
  [registry addExtension:UnittestLiteRoot_oneofBytesExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedInt32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedInt64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedUint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedUint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedSint32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedSint64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedFixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedFixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedSfixed32ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedSfixed64ExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedFloatExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedDoubleExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedBoolExtensionLite];
  [registry addExtension:UnittestLiteRoot_packedEnumExtensionLite];
  [registry addExtension:TestNestedExtensionLite_nestedExtension];
  [registry addExtension:TestParsingMergeLite_optionalExt];
  [registry addExtension:TestParsingMergeLite_repeatedExt];
}
+ (id<PBExtensionField>) optionalInt32ExtensionLite {
  return UnittestLiteRoot_optionalInt32ExtensionLite;
}
+ (id<PBExtensionField>) optionalInt64ExtensionLite {
  return UnittestLiteRoot_optionalInt64ExtensionLite;
}
+ (id<PBExtensionField>) optionalUint32ExtensionLite {
  return UnittestLiteRoot_optionalUint32ExtensionLite;
}
+ (id<PBExtensionField>) optionalUint64ExtensionLite {
  return UnittestLiteRoot_optionalUint64ExtensionLite;
}
+ (id<PBExtensionField>) optionalSint32ExtensionLite {
  return UnittestLiteRoot_optionalSint32ExtensionLite;
}
+ (id<PBExtensionField>) optionalSint64ExtensionLite {
  return UnittestLiteRoot_optionalSint64ExtensionLite;
}
+ (id<PBExtensionField>) optionalFixed32ExtensionLite {
  return UnittestLiteRoot_optionalFixed32ExtensionLite;
}
+ (id<PBExtensionField>) optionalFixed64ExtensionLite {
  return UnittestLiteRoot_optionalFixed64ExtensionLite;
}
+ (id<PBExtensionField>) optionalSfixed32ExtensionLite {
  return UnittestLiteRoot_optionalSfixed32ExtensionLite;
}
+ (id<PBExtensionField>) optionalSfixed64ExtensionLite {
  return UnittestLiteRoot_optionalSfixed64ExtensionLite;
}
+ (id<PBExtensionField>) optionalFloatExtensionLite {
  return UnittestLiteRoot_optionalFloatExtensionLite;
}
+ (id<PBExtensionField>) optionalDoubleExtensionLite {
  return UnittestLiteRoot_optionalDoubleExtensionLite;
}
+ (id<PBExtensionField>) optionalBoolExtensionLite {
  return UnittestLiteRoot_optionalBoolExtensionLite;
}
+ (id<PBExtensionField>) optionalStringExtensionLite {
  return UnittestLiteRoot_optionalStringExtensionLite;
}
+ (id<PBExtensionField>) optionalBytesExtensionLite {
  return UnittestLiteRoot_optionalBytesExtensionLite;
}
+ (id<PBExtensionField>) optionalGroupExtensionLite {
  return UnittestLiteRoot_optionalGroupExtensionLite;
}
+ (id<PBExtensionField>) optionalNestedMessageExtensionLite {
  return UnittestLiteRoot_optionalNestedMessageExtensionLite;
}
+ (id<PBExtensionField>) optionalForeignMessageExtensionLite {
  return UnittestLiteRoot_optionalForeignMessageExtensionLite;
}
+ (id<PBExtensionField>) optionalImportMessageExtensionLite {
  return UnittestLiteRoot_optionalImportMessageExtensionLite;
}
+ (id<PBExtensionField>) optionalNestedEnumExtensionLite {
  return UnittestLiteRoot_optionalNestedEnumExtensionLite;
}
+ (id<PBExtensionField>) optionalForeignEnumExtensionLite {
  return UnittestLiteRoot_optionalForeignEnumExtensionLite;
}
+ (id<PBExtensionField>) optionalImportEnumExtensionLite {
  return UnittestLiteRoot_optionalImportEnumExtensionLite;
}
+ (id<PBExtensionField>) optionalStringPieceExtensionLite {
  return UnittestLiteRoot_optionalStringPieceExtensionLite;
}
+ (id<PBExtensionField>) optionalCordExtensionLite {
  return UnittestLiteRoot_optionalCordExtensionLite;
}
+ (id<PBExtensionField>) optionalPublicImportMessageExtensionLite {
  return UnittestLiteRoot_optionalPublicImportMessageExtensionLite;
}
+ (id<PBExtensionField>) optionalLazyMessageExtensionLite {
  return UnittestLiteRoot_optionalLazyMessageExtensionLite;
}
+ (id<PBExtensionField>) repeatedInt32ExtensionLite {
  return UnittestLiteRoot_repeatedInt32ExtensionLite;
}
+ (id<PBExtensionField>) repeatedInt64ExtensionLite {
  return UnittestLiteRoot_repeatedInt64ExtensionLite;
}
+ (id<PBExtensionField>) repeatedUint32ExtensionLite {
  return UnittestLiteRoot_repeatedUint32ExtensionLite;
}
+ (id<PBExtensionField>) repeatedUint64ExtensionLite {
  return UnittestLiteRoot_repeatedUint64ExtensionLite;
}
+ (id<PBExtensionField>) repeatedSint32ExtensionLite {
  return UnittestLiteRoot_repeatedSint32ExtensionLite;
}
+ (id<PBExtensionField>) repeatedSint64ExtensionLite {
  return UnittestLiteRoot_repeatedSint64ExtensionLite;
}
+ (id<PBExtensionField>) repeatedFixed32ExtensionLite {
  return UnittestLiteRoot_repeatedFixed32ExtensionLite;
}
+ (id<PBExtensionField>) repeatedFixed64ExtensionLite {
  return UnittestLiteRoot_repeatedFixed64ExtensionLite;
}
+ (id<PBExtensionField>) repeatedSfixed32ExtensionLite {
  return UnittestLiteRoot_repeatedSfixed32ExtensionLite;
}
+ (id<PBExtensionField>) repeatedSfixed64ExtensionLite {
  return UnittestLiteRoot_repeatedSfixed64ExtensionLite;
}
+ (id<PBExtensionField>) repeatedFloatExtensionLite {
  return UnittestLiteRoot_repeatedFloatExtensionLite;
}
+ (id<PBExtensionField>) repeatedDoubleExtensionLite {
  return UnittestLiteRoot_repeatedDoubleExtensionLite;
}
+ (id<PBExtensionField>) repeatedBoolExtensionLite {
  return UnittestLiteRoot_repeatedBoolExtensionLite;
}
+ (id<PBExtensionField>) repeatedStringExtensionLite {
  return UnittestLiteRoot_repeatedStringExtensionLite;
}
+ (id<PBExtensionField>) repeatedBytesExtensionLite {
  return UnittestLiteRoot_repeatedBytesExtensionLite;
}
+ (id<PBExtensionField>) repeatedGroupExtensionLite {
  return UnittestLiteRoot_repeatedGroupExtensionLite;
}
+ (id<PBExtensionField>) repeatedNestedMessageExtensionLite {
  return UnittestLiteRoot_repeatedNestedMessageExtensionLite;
}
+ (id<PBExtensionField>) repeatedForeignMessageExtensionLite {
  return UnittestLiteRoot_repeatedForeignMessageExtensionLite;
}
+ (id<PBExtensionField>) repeatedImportMessageExtensionLite {
  return UnittestLiteRoot_repeatedImportMessageExtensionLite;
}
+ (id<PBExtensionField>) repeatedNestedEnumExtensionLite {
  return UnittestLiteRoot_repeatedNestedEnumExtensionLite;
}
+ (id<PBExtensionField>) repeatedForeignEnumExtensionLite {
  return UnittestLiteRoot_repeatedForeignEnumExtensionLite;
}
+ (id<PBExtensionField>) repeatedImportEnumExtensionLite {
  return UnittestLiteRoot_repeatedImportEnumExtensionLite;
}
+ (id<PBExtensionField>) repeatedStringPieceExtensionLite {
  return UnittestLiteRoot_repeatedStringPieceExtensionLite;
}
+ (id<PBExtensionField>) repeatedCordExtensionLite {
  return UnittestLiteRoot_repeatedCordExtensionLite;
}
+ (id<PBExtensionField>) repeatedLazyMessageExtensionLite {
  return UnittestLiteRoot_repeatedLazyMessageExtensionLite;
}
+ (id<PBExtensionField>) defaultInt32ExtensionLite {
  return UnittestLiteRoot_defaultInt32ExtensionLite;
}
+ (id<PBExtensionField>) defaultInt64ExtensionLite {
  return UnittestLiteRoot_defaultInt64ExtensionLite;
}
+ (id<PBExtensionField>) defaultUint32ExtensionLite {
  return UnittestLiteRoot_defaultUint32ExtensionLite;
}
+ (id<PBExtensionField>) defaultUint64ExtensionLite {
  return UnittestLiteRoot_defaultUint64ExtensionLite;
}
+ (id<PBExtensionField>) defaultSint32ExtensionLite {
  return UnittestLiteRoot_defaultSint32ExtensionLite;
}
+ (id<PBExtensionField>) defaultSint64ExtensionLite {
  return UnittestLiteRoot_defaultSint64ExtensionLite;
}
+ (id<PBExtensionField>) defaultFixed32ExtensionLite {
  return UnittestLiteRoot_defaultFixed32ExtensionLite;
}
+ (id<PBExtensionField>) defaultFixed64ExtensionLite {
  return UnittestLiteRoot_defaultFixed64ExtensionLite;
}
+ (id<PBExtensionField>) defaultSfixed32ExtensionLite {
  return UnittestLiteRoot_defaultSfixed32ExtensionLite;
}
+ (id<PBExtensionField>) defaultSfixed64ExtensionLite {
  return UnittestLiteRoot_defaultSfixed64ExtensionLite;
}
+ (id<PBExtensionField>) defaultFloatExtensionLite {
  return UnittestLiteRoot_defaultFloatExtensionLite;
}
+ (id<PBExtensionField>) defaultDoubleExtensionLite {
  return UnittestLiteRoot_defaultDoubleExtensionLite;
}
+ (id<PBExtensionField>) defaultBoolExtensionLite {
  return UnittestLiteRoot_defaultBoolExtensionLite;
}
+ (id<PBExtensionField>) defaultStringExtensionLite {
  return UnittestLiteRoot_defaultStringExtensionLite;
}
+ (id<PBExtensionField>) defaultBytesExtensionLite {
  return UnittestLiteRoot_defaultBytesExtensionLite;
}
+ (id<PBExtensionField>) defaultNestedEnumExtensionLite {
  return UnittestLiteRoot_defaultNestedEnumExtensionLite;
}
+ (id<PBExtensionField>) defaultForeignEnumExtensionLite {
  return UnittestLiteRoot_defaultForeignEnumExtensionLite;
}
+ (id<PBExtensionField>) defaultImportEnumExtensionLite {
  return UnittestLiteRoot_defaultImportEnumExtensionLite;
}
+ (id<PBExtensionField>) defaultStringPieceExtensionLite {
  return UnittestLiteRoot_defaultStringPieceExtensionLite;
}
+ (id<PBExtensionField>) defaultCordExtensionLite {
  return UnittestLiteRoot_defaultCordExtensionLite;
}
+ (id<PBExtensionField>) oneofUint32ExtensionLite {
  return UnittestLiteRoot_oneofUint32ExtensionLite;
}
+ (id<PBExtensionField>) oneofNestedMessageExtensionLite {
  return UnittestLiteRoot_oneofNestedMessageExtensionLite;
}
+ (id<PBExtensionField>) oneofStringExtensionLite {
  return UnittestLiteRoot_oneofStringExtensionLite;
}
+ (id<PBExtensionField>) oneofBytesExtensionLite {
  return UnittestLiteRoot_oneofBytesExtensionLite;
}
+ (id<PBExtensionField>) packedInt32ExtensionLite {
  return UnittestLiteRoot_packedInt32ExtensionLite;
}
+ (id<PBExtensionField>) packedInt64ExtensionLite {
  return UnittestLiteRoot_packedInt64ExtensionLite;
}
+ (id<PBExtensionField>) packedUint32ExtensionLite {
  return UnittestLiteRoot_packedUint32ExtensionLite;
}
+ (id<PBExtensionField>) packedUint64ExtensionLite {
  return UnittestLiteRoot_packedUint64ExtensionLite;
}
+ (id<PBExtensionField>) packedSint32ExtensionLite {
  return UnittestLiteRoot_packedSint32ExtensionLite;
}
+ (id<PBExtensionField>) packedSint64ExtensionLite {
  return UnittestLiteRoot_packedSint64ExtensionLite;
}
+ (id<PBExtensionField>) packedFixed32ExtensionLite {
  return UnittestLiteRoot_packedFixed32ExtensionLite;
}
+ (id<PBExtensionField>) packedFixed64ExtensionLite {
  return UnittestLiteRoot_packedFixed64ExtensionLite;
}
+ (id<PBExtensionField>) packedSfixed32ExtensionLite {
  return UnittestLiteRoot_packedSfixed32ExtensionLite;
}
+ (id<PBExtensionField>) packedSfixed64ExtensionLite {
  return UnittestLiteRoot_packedSfixed64ExtensionLite;
}
+ (id<PBExtensionField>) packedFloatExtensionLite {
  return UnittestLiteRoot_packedFloatExtensionLite;
}
+ (id<PBExtensionField>) packedDoubleExtensionLite {
  return UnittestLiteRoot_packedDoubleExtensionLite;
}
+ (id<PBExtensionField>) packedBoolExtensionLite {
  return UnittestLiteRoot_packedBoolExtensionLite;
}
+ (id<PBExtensionField>) packedEnumExtensionLite {
  return UnittestLiteRoot_packedEnumExtensionLite;
}
@end

BOOL ForeignEnumLiteIsValidValue(ForeignEnumLite value) {
  switch (value) {
    case ForeignEnumLiteForeignLiteFoo:
    case ForeignEnumLiteForeignLiteBar:
    case ForeignEnumLiteForeignLiteBaz:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromForeignEnumLite(ForeignEnumLite value) {
  switch (value) {
    case ForeignEnumLiteForeignLiteFoo:
      return @"ForeignEnumLiteForeignLiteFoo";
    case ForeignEnumLiteForeignLiteBar:
      return @"ForeignEnumLiteForeignLiteBar";
    case ForeignEnumLiteForeignLiteBaz:
      return @"ForeignEnumLiteForeignLiteBaz";
    default:
      return nil;
  }
}

@interface TestAllTypesLite ()
@property SInt32 optionalInt32;
@property SInt64 optionalInt64;
@property UInt32 optionalUint32;
@property UInt64 optionalUint64;
@property SInt32 optionalSint32;
@property SInt64 optionalSint64;
@property UInt32 optionalFixed32;
@property UInt64 optionalFixed64;
@property SInt32 optionalSfixed32;
@property SInt64 optionalSfixed64;
@property Float32 optionalFloat;
@property Float64 optionalDouble;
@property BOOL optionalBool;
@property (strong) NSString* optionalString;
@property (strong) NSData* optionalBytes;
@property (strong) TestAllTypesLiteOptionalGroup* optionalGroup;
@property (strong) TestAllTypesLiteNestedMessage* optionalNestedMessage;
@property (strong) ForeignMessageLite* optionalForeignMessage;
@property (strong) ImportMessageLite* optionalImportMessage;
@property TestAllTypesLiteNestedEnum optionalNestedEnum;
@property ForeignEnumLite optionalForeignEnum;
@property ImportEnumLite optionalImportEnum;
@property (strong) NSString* optionalStringPiece;
@property (strong) NSString* optionalCord;
@property (strong) PublicImportMessageLite* optionalPublicImportMessage;
@property (strong) TestAllTypesLiteNestedMessage* optionalLazyMessage;
@property (strong) PBAppendableArray * repeatedInt32Array;
@property (strong) PBAppendableArray * repeatedInt64Array;
@property (strong) PBAppendableArray * repeatedUint32Array;
@property (strong) PBAppendableArray * repeatedUint64Array;
@property (strong) PBAppendableArray * repeatedSint32Array;
@property (strong) PBAppendableArray * repeatedSint64Array;
@property (strong) PBAppendableArray * repeatedFixed32Array;
@property (strong) PBAppendableArray * repeatedFixed64Array;
@property (strong) PBAppendableArray * repeatedSfixed32Array;
@property (strong) PBAppendableArray * repeatedSfixed64Array;
@property (strong) PBAppendableArray * repeatedFloatArray;
@property (strong) PBAppendableArray * repeatedDoubleArray;
@property (strong) PBAppendableArray * repeatedBoolArray;
@property (strong) NSMutableArray * repeatedStringArray;
@property (strong) NSMutableArray * repeatedBytesArray;
@property (strong) NSMutableArray * repeatedGroupArray;
@property (strong) NSMutableArray * repeatedNestedMessageArray;
@property (strong) NSMutableArray * repeatedForeignMessageArray;
@property (strong) NSMutableArray * repeatedImportMessageArray;
@property (strong) PBAppendableArray * repeatedNestedEnumArray;
@property (strong) PBAppendableArray * repeatedForeignEnumArray;
@property (strong) PBAppendableArray * repeatedImportEnumArray;
@property (strong) NSMutableArray * repeatedStringPieceArray;
@property (strong) NSMutableArray * repeatedCordArray;
@property (strong) NSMutableArray * repeatedLazyMessageArray;
@property SInt32 defaultInt32;
@property SInt64 defaultInt64;
@property UInt32 defaultUint32;
@property UInt64 defaultUint64;
@property SInt32 defaultSint32;
@property SInt64 defaultSint64;
@property UInt32 defaultFixed32;
@property UInt64 defaultFixed64;
@property SInt32 defaultSfixed32;
@property SInt64 defaultSfixed64;
@property Float32 defaultFloat;
@property Float64 defaultDouble;
@property BOOL defaultBool;
@property (strong) NSString* defaultString;
@property (strong) NSData* defaultBytes;
@property TestAllTypesLiteNestedEnum defaultNestedEnum;
@property ForeignEnumLite defaultForeignEnum;
@property ImportEnumLite defaultImportEnum;
@property (strong) NSString* defaultStringPiece;
@property (strong) NSString* defaultCord;
@property UInt32 oneofUint32;
@property (strong) TestAllTypesLiteNestedMessage* oneofNestedMessage;
@property (strong) NSString* oneofString;
@property (strong) NSData* oneofBytes;
@end

@implementation TestAllTypesLite

- (BOOL) hasOptionalInt32 {
  return !!hasOptionalInt32_;
}
- (void) setHasOptionalInt32:(BOOL) _value_ {
  hasOptionalInt32_ = !!_value_;
}
@synthesize optionalInt32;
- (BOOL) hasOptionalInt64 {
  return !!hasOptionalInt64_;
}
- (void) setHasOptionalInt64:(BOOL) _value_ {
  hasOptionalInt64_ = !!_value_;
}
@synthesize optionalInt64;
- (BOOL) hasOptionalUint32 {
  return !!hasOptionalUint32_;
}
- (void) setHasOptionalUint32:(BOOL) _value_ {
  hasOptionalUint32_ = !!_value_;
}
@synthesize optionalUint32;
- (BOOL) hasOptionalUint64 {
  return !!hasOptionalUint64_;
}
- (void) setHasOptionalUint64:(BOOL) _value_ {
  hasOptionalUint64_ = !!_value_;
}
@synthesize optionalUint64;
- (BOOL) hasOptionalSint32 {
  return !!hasOptionalSint32_;
}
- (void) setHasOptionalSint32:(BOOL) _value_ {
  hasOptionalSint32_ = !!_value_;
}
@synthesize optionalSint32;
- (BOOL) hasOptionalSint64 {
  return !!hasOptionalSint64_;
}
- (void) setHasOptionalSint64:(BOOL) _value_ {
  hasOptionalSint64_ = !!_value_;
}
@synthesize optionalSint64;
- (BOOL) hasOptionalFixed32 {
  return !!hasOptionalFixed32_;
}
- (void) setHasOptionalFixed32:(BOOL) _value_ {
  hasOptionalFixed32_ = !!_value_;
}
@synthesize optionalFixed32;
- (BOOL) hasOptionalFixed64 {
  return !!hasOptionalFixed64_;
}
- (void) setHasOptionalFixed64:(BOOL) _value_ {
  hasOptionalFixed64_ = !!_value_;
}
@synthesize optionalFixed64;
- (BOOL) hasOptionalSfixed32 {
  return !!hasOptionalSfixed32_;
}
- (void) setHasOptionalSfixed32:(BOOL) _value_ {
  hasOptionalSfixed32_ = !!_value_;
}
@synthesize optionalSfixed32;
- (BOOL) hasOptionalSfixed64 {
  return !!hasOptionalSfixed64_;
}
- (void) setHasOptionalSfixed64:(BOOL) _value_ {
  hasOptionalSfixed64_ = !!_value_;
}
@synthesize optionalSfixed64;
- (BOOL) hasOptionalFloat {
  return !!hasOptionalFloat_;
}
- (void) setHasOptionalFloat:(BOOL) _value_ {
  hasOptionalFloat_ = !!_value_;
}
@synthesize optionalFloat;
- (BOOL) hasOptionalDouble {
  return !!hasOptionalDouble_;
}
- (void) setHasOptionalDouble:(BOOL) _value_ {
  hasOptionalDouble_ = !!_value_;
}
@synthesize optionalDouble;
- (BOOL) hasOptionalBool {
  return !!hasOptionalBool_;
}
- (void) setHasOptionalBool:(BOOL) _value_ {
  hasOptionalBool_ = !!_value_;
}
- (BOOL) optionalBool {
  return !!optionalBool_;
}
- (void) setOptionalBool:(BOOL) _value_ {
  optionalBool_ = !!_value_;
}
- (BOOL) hasOptionalString {
  return !!hasOptionalString_;
}
- (void) setHasOptionalString:(BOOL) _value_ {
  hasOptionalString_ = !!_value_;
}
@synthesize optionalString;
- (BOOL) hasOptionalBytes {
  return !!hasOptionalBytes_;
}
- (void) setHasOptionalBytes:(BOOL) _value_ {
  hasOptionalBytes_ = !!_value_;
}
@synthesize optionalBytes;
- (BOOL) hasOptionalGroup {
  return !!hasOptionalGroup_;
}
- (void) setHasOptionalGroup:(BOOL) _value_ {
  hasOptionalGroup_ = !!_value_;
}
@synthesize optionalGroup;
- (BOOL) hasOptionalNestedMessage {
  return !!hasOptionalNestedMessage_;
}
- (void) setHasOptionalNestedMessage:(BOOL) _value_ {
  hasOptionalNestedMessage_ = !!_value_;
}
@synthesize optionalNestedMessage;
- (BOOL) hasOptionalForeignMessage {
  return !!hasOptionalForeignMessage_;
}
- (void) setHasOptionalForeignMessage:(BOOL) _value_ {
  hasOptionalForeignMessage_ = !!_value_;
}
@synthesize optionalForeignMessage;
- (BOOL) hasOptionalImportMessage {
  return !!hasOptionalImportMessage_;
}
- (void) setHasOptionalImportMessage:(BOOL) _value_ {
  hasOptionalImportMessage_ = !!_value_;
}
@synthesize optionalImportMessage;
- (BOOL) hasOptionalNestedEnum {
  return !!hasOptionalNestedEnum_;
}
- (void) setHasOptionalNestedEnum:(BOOL) _value_ {
  hasOptionalNestedEnum_ = !!_value_;
}
@synthesize optionalNestedEnum;
- (BOOL) hasOptionalForeignEnum {
  return !!hasOptionalForeignEnum_;
}
- (void) setHasOptionalForeignEnum:(BOOL) _value_ {
  hasOptionalForeignEnum_ = !!_value_;
}
@synthesize optionalForeignEnum;
- (BOOL) hasOptionalImportEnum {
  return !!hasOptionalImportEnum_;
}
- (void) setHasOptionalImportEnum:(BOOL) _value_ {
  hasOptionalImportEnum_ = !!_value_;
}
@synthesize optionalImportEnum;
- (BOOL) hasOptionalStringPiece {
  return !!hasOptionalStringPiece_;
}
- (void) setHasOptionalStringPiece:(BOOL) _value_ {
  hasOptionalStringPiece_ = !!_value_;
}
@synthesize optionalStringPiece;
- (BOOL) hasOptionalCord {
  return !!hasOptionalCord_;
}
- (void) setHasOptionalCord:(BOOL) _value_ {
  hasOptionalCord_ = !!_value_;
}
@synthesize optionalCord;
- (BOOL) hasOptionalPublicImportMessage {
  return !!hasOptionalPublicImportMessage_;
}
- (void) setHasOptionalPublicImportMessage:(BOOL) _value_ {
  hasOptionalPublicImportMessage_ = !!_value_;
}
@synthesize optionalPublicImportMessage;
- (BOOL) hasOptionalLazyMessage {
  return !!hasOptionalLazyMessage_;
}
- (void) setHasOptionalLazyMessage:(BOOL) _value_ {
  hasOptionalLazyMessage_ = !!_value_;
}
@synthesize optionalLazyMessage;
@synthesize repeatedInt32Array;
@dynamic repeatedInt32;
@synthesize repeatedInt64Array;
@dynamic repeatedInt64;
@synthesize repeatedUint32Array;
@dynamic repeatedUint32;
@synthesize repeatedUint64Array;
@dynamic repeatedUint64;
@synthesize repeatedSint32Array;
@dynamic repeatedSint32;
@synthesize repeatedSint64Array;
@dynamic repeatedSint64;
@synthesize repeatedFixed32Array;
@dynamic repeatedFixed32;
@synthesize repeatedFixed64Array;
@dynamic repeatedFixed64;
@synthesize repeatedSfixed32Array;
@dynamic repeatedSfixed32;
@synthesize repeatedSfixed64Array;
@dynamic repeatedSfixed64;
@synthesize repeatedFloatArray;
@dynamic repeatedFloat;
@synthesize repeatedDoubleArray;
@dynamic repeatedDouble;
@synthesize repeatedBoolArray;
@dynamic repeatedBool;
@synthesize repeatedStringArray;
@dynamic repeatedString;
@synthesize repeatedBytesArray;
@dynamic repeatedBytes;
@synthesize repeatedGroupArray;
@dynamic repeatedGroup;
@synthesize repeatedNestedMessageArray;
@dynamic repeatedNestedMessage;
@synthesize repeatedForeignMessageArray;
@dynamic repeatedForeignMessage;
@synthesize repeatedImportMessageArray;
@dynamic repeatedImportMessage;
@synthesize repeatedNestedEnumArray;
@dynamic repeatedNestedEnum;
@synthesize repeatedForeignEnumArray;
@dynamic repeatedForeignEnum;
@synthesize repeatedImportEnumArray;
@dynamic repeatedImportEnum;
@synthesize repeatedStringPieceArray;
@dynamic repeatedStringPiece;
@synthesize repeatedCordArray;
@dynamic repeatedCord;
@synthesize repeatedLazyMessageArray;
@dynamic repeatedLazyMessage;
- (BOOL) hasDefaultInt32 {
  return !!hasDefaultInt32_;
}
- (void) setHasDefaultInt32:(BOOL) _value_ {
  hasDefaultInt32_ = !!_value_;
}
@synthesize defaultInt32;
- (BOOL) hasDefaultInt64 {
  return !!hasDefaultInt64_;
}
- (void) setHasDefaultInt64:(BOOL) _value_ {
  hasDefaultInt64_ = !!_value_;
}
@synthesize defaultInt64;
- (BOOL) hasDefaultUint32 {
  return !!hasDefaultUint32_;
}
- (void) setHasDefaultUint32:(BOOL) _value_ {
  hasDefaultUint32_ = !!_value_;
}
@synthesize defaultUint32;
- (BOOL) hasDefaultUint64 {
  return !!hasDefaultUint64_;
}
- (void) setHasDefaultUint64:(BOOL) _value_ {
  hasDefaultUint64_ = !!_value_;
}
@synthesize defaultUint64;
- (BOOL) hasDefaultSint32 {
  return !!hasDefaultSint32_;
}
- (void) setHasDefaultSint32:(BOOL) _value_ {
  hasDefaultSint32_ = !!_value_;
}
@synthesize defaultSint32;
- (BOOL) hasDefaultSint64 {
  return !!hasDefaultSint64_;
}
- (void) setHasDefaultSint64:(BOOL) _value_ {
  hasDefaultSint64_ = !!_value_;
}
@synthesize defaultSint64;
- (BOOL) hasDefaultFixed32 {
  return !!hasDefaultFixed32_;
}
- (void) setHasDefaultFixed32:(BOOL) _value_ {
  hasDefaultFixed32_ = !!_value_;
}
@synthesize defaultFixed32;
- (BOOL) hasDefaultFixed64 {
  return !!hasDefaultFixed64_;
}
- (void) setHasDefaultFixed64:(BOOL) _value_ {
  hasDefaultFixed64_ = !!_value_;
}
@synthesize defaultFixed64;
- (BOOL) hasDefaultSfixed32 {
  return !!hasDefaultSfixed32_;
}
- (void) setHasDefaultSfixed32:(BOOL) _value_ {
  hasDefaultSfixed32_ = !!_value_;
}
@synthesize defaultSfixed32;
- (BOOL) hasDefaultSfixed64 {
  return !!hasDefaultSfixed64_;
}
- (void) setHasDefaultSfixed64:(BOOL) _value_ {
  hasDefaultSfixed64_ = !!_value_;
}
@synthesize defaultSfixed64;
- (BOOL) hasDefaultFloat {
  return !!hasDefaultFloat_;
}
- (void) setHasDefaultFloat:(BOOL) _value_ {
  hasDefaultFloat_ = !!_value_;
}
@synthesize defaultFloat;
- (BOOL) hasDefaultDouble {
  return !!hasDefaultDouble_;
}
- (void) setHasDefaultDouble:(BOOL) _value_ {
  hasDefaultDouble_ = !!_value_;
}
@synthesize defaultDouble;
- (BOOL) hasDefaultBool {
  return !!hasDefaultBool_;
}
- (void) setHasDefaultBool:(BOOL) _value_ {
  hasDefaultBool_ = !!_value_;
}
- (BOOL) defaultBool {
  return !!defaultBool_;
}
- (void) setDefaultBool:(BOOL) _value_ {
  defaultBool_ = !!_value_;
}
- (BOOL) hasDefaultString {
  return !!hasDefaultString_;
}
- (void) setHasDefaultString:(BOOL) _value_ {
  hasDefaultString_ = !!_value_;
}
@synthesize defaultString;
- (BOOL) hasDefaultBytes {
  return !!hasDefaultBytes_;
}
- (void) setHasDefaultBytes:(BOOL) _value_ {
  hasDefaultBytes_ = !!_value_;
}
@synthesize defaultBytes;
- (BOOL) hasDefaultNestedEnum {
  return !!hasDefaultNestedEnum_;
}
- (void) setHasDefaultNestedEnum:(BOOL) _value_ {
  hasDefaultNestedEnum_ = !!_value_;
}
@synthesize defaultNestedEnum;
- (BOOL) hasDefaultForeignEnum {
  return !!hasDefaultForeignEnum_;
}
- (void) setHasDefaultForeignEnum:(BOOL) _value_ {
  hasDefaultForeignEnum_ = !!_value_;
}
@synthesize defaultForeignEnum;
- (BOOL) hasDefaultImportEnum {
  return !!hasDefaultImportEnum_;
}
- (void) setHasDefaultImportEnum:(BOOL) _value_ {
  hasDefaultImportEnum_ = !!_value_;
}
@synthesize defaultImportEnum;
- (BOOL) hasDefaultStringPiece {
  return !!hasDefaultStringPiece_;
}
- (void) setHasDefaultStringPiece:(BOOL) _value_ {
  hasDefaultStringPiece_ = !!_value_;
}
@synthesize defaultStringPiece;
- (BOOL) hasDefaultCord {
  return !!hasDefaultCord_;
}
- (void) setHasDefaultCord:(BOOL) _value_ {
  hasDefaultCord_ = !!_value_;
}
@synthesize defaultCord;
- (BOOL) hasOneofUint32 {
  return !!hasOneofUint32_;
}
- (void) setHasOneofUint32:(BOOL) _value_ {
  hasOneofUint32_ = !!_value_;
}
@synthesize oneofUint32;
- (BOOL) hasOneofNestedMessage {
  return !!hasOneofNestedMessage_;
}
- (void) setHasOneofNestedMessage:(BOOL) _value_ {
  hasOneofNestedMessage_ = !!_value_;
}
@synthesize oneofNestedMessage;
- (BOOL) hasOneofString {
  return !!hasOneofString_;
}
- (void) setHasOneofString:(BOOL) _value_ {
  hasOneofString_ = !!_value_;
}
@synthesize oneofString;
- (BOOL) hasOneofBytes {
  return !!hasOneofBytes_;
}
- (void) setHasOneofBytes:(BOOL) _value_ {
  hasOneofBytes_ = !!_value_;
}
@synthesize oneofBytes;
- (instancetype) init {
  if ((self = [super init])) {
    self.optionalInt32 = 0;
    self.optionalInt64 = 0L;
    self.optionalUint32 = 0;
    self.optionalUint64 = 0L;
    self.optionalSint32 = 0;
    self.optionalSint64 = 0L;
    self.optionalFixed32 = 0;
    self.optionalFixed64 = 0L;
    self.optionalSfixed32 = 0;
    self.optionalSfixed64 = 0L;
    self.optionalFloat = 0;
    self.optionalDouble = 0;
    self.optionalBool = NO;
    self.optionalString = @"";
    self.optionalBytes = [NSData data];
    self.optionalGroup = [TestAllTypesLiteOptionalGroup defaultInstance];
    self.optionalNestedMessage = [TestAllTypesLiteNestedMessage defaultInstance];
    self.optionalForeignMessage = [ForeignMessageLite defaultInstance];
    self.optionalImportMessage = [ImportMessageLite defaultInstance];
    self.optionalNestedEnum = TestAllTypesLiteNestedEnumFoo;
    self.optionalForeignEnum = ForeignEnumLiteForeignLiteFoo;
    self.optionalImportEnum = ImportEnumLiteImportLiteFoo;
    self.optionalStringPiece = @"";
    self.optionalCord = @"";
    self.optionalPublicImportMessage = [PublicImportMessageLite defaultInstance];
    self.optionalLazyMessage = [TestAllTypesLiteNestedMessage defaultInstance];
    self.defaultInt32 = 41;
    self.defaultInt64 = 42L;
    self.defaultUint32 = 43;
    self.defaultUint64 = 44L;
    self.defaultSint32 = -45;
    self.defaultSint64 = 46L;
    self.defaultFixed32 = 47;
    self.defaultFixed64 = 48L;
    self.defaultSfixed32 = 49;
    self.defaultSfixed64 = -50L;
    self.defaultFloat = 51.5;
    self.defaultDouble = 52000;
    self.defaultBool = YES;
    self.defaultString = @"hello";
    self.defaultBytes = [NSData dataWithBytes:"world" length:5];
    self.defaultNestedEnum = TestAllTypesLiteNestedEnumBar;
    self.defaultForeignEnum = ForeignEnumLiteForeignLiteBar;
    self.defaultImportEnum = ImportEnumLiteImportLiteBar;
    self.defaultStringPiece = @"abc";
    self.defaultCord = @"123";
    self.oneofUint32 = 0;
    self.oneofNestedMessage = [TestAllTypesLiteNestedMessage defaultInstance];
    self.oneofString = @"";
    self.oneofBytes = [NSData data];
  }
  return self;
}
static TestAllTypesLite* defaultTestAllTypesLiteInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypesLite class]) {
    defaultTestAllTypesLiteInstance = [[TestAllTypesLite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesLiteInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesLiteInstance;
}
- (PBArray *)repeatedInt32 {
  return repeatedInt32Array;
}
- (SInt32)repeatedInt32AtIndex:(NSUInteger)index {
  return [repeatedInt32Array int32AtIndex:index];
}
- (PBArray *)repeatedInt64 {
  return repeatedInt64Array;
}
- (SInt64)repeatedInt64AtIndex:(NSUInteger)index {
  return [repeatedInt64Array int64AtIndex:index];
}
- (PBArray *)repeatedUint32 {
  return repeatedUint32Array;
}
- (UInt32)repeatedUint32AtIndex:(NSUInteger)index {
  return [repeatedUint32Array uint32AtIndex:index];
}
- (PBArray *)repeatedUint64 {
  return repeatedUint64Array;
}
- (UInt64)repeatedUint64AtIndex:(NSUInteger)index {
  return [repeatedUint64Array uint64AtIndex:index];
}
- (PBArray *)repeatedSint32 {
  return repeatedSint32Array;
}
- (SInt32)repeatedSint32AtIndex:(NSUInteger)index {
  return [repeatedSint32Array int32AtIndex:index];
}
- (PBArray *)repeatedSint64 {
  return repeatedSint64Array;
}
- (SInt64)repeatedSint64AtIndex:(NSUInteger)index {
  return [repeatedSint64Array int64AtIndex:index];
}
- (PBArray *)repeatedFixed32 {
  return repeatedFixed32Array;
}
- (UInt32)repeatedFixed32AtIndex:(NSUInteger)index {
  return [repeatedFixed32Array uint32AtIndex:index];
}
- (PBArray *)repeatedFixed64 {
  return repeatedFixed64Array;
}
- (UInt64)repeatedFixed64AtIndex:(NSUInteger)index {
  return [repeatedFixed64Array uint64AtIndex:index];
}
- (PBArray *)repeatedSfixed32 {
  return repeatedSfixed32Array;
}
- (SInt32)repeatedSfixed32AtIndex:(NSUInteger)index {
  return [repeatedSfixed32Array int32AtIndex:index];
}
- (PBArray *)repeatedSfixed64 {
  return repeatedSfixed64Array;
}
- (SInt64)repeatedSfixed64AtIndex:(NSUInteger)index {
  return [repeatedSfixed64Array int64AtIndex:index];
}
- (PBArray *)repeatedFloat {
  return repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [repeatedFloatArray floatAtIndex:index];
}
- (PBArray *)repeatedDouble {
  return repeatedDoubleArray;
}
- (Float64)repeatedDoubleAtIndex:(NSUInteger)index {
  return [repeatedDoubleArray doubleAtIndex:index];
}
- (PBArray *)repeatedBool {
  return repeatedBoolArray;
}
- (BOOL)repeatedBoolAtIndex:(NSUInteger)index {
  return [repeatedBoolArray boolAtIndex:index];
}
- (NSArray *)repeatedString {
  return repeatedStringArray;
}
- (NSString*)repeatedStringAtIndex:(NSUInteger)index {
  return [repeatedStringArray objectAtIndex:index];
}
- (NSArray *)repeatedBytes {
  return repeatedBytesArray;
}
- (NSData*)repeatedBytesAtIndex:(NSUInteger)index {
  return [repeatedBytesArray objectAtIndex:index];
}
- (NSArray *)repeatedGroup {
  return repeatedGroupArray;
}
- (TestAllTypesLiteRepeatedGroup*)repeatedGroupAtIndex:(NSUInteger)index {
  return [repeatedGroupArray objectAtIndex:index];
}
- (NSArray *)repeatedNestedMessage {
  return repeatedNestedMessageArray;
}
- (TestAllTypesLiteNestedMessage*)repeatedNestedMessageAtIndex:(NSUInteger)index {
  return [repeatedNestedMessageArray objectAtIndex:index];
}
- (NSArray *)repeatedForeignMessage {
  return repeatedForeignMessageArray;
}
- (ForeignMessageLite*)repeatedForeignMessageAtIndex:(NSUInteger)index {
  return [repeatedForeignMessageArray objectAtIndex:index];
}
- (NSArray *)repeatedImportMessage {
  return repeatedImportMessageArray;
}
- (ImportMessageLite*)repeatedImportMessageAtIndex:(NSUInteger)index {
  return [repeatedImportMessageArray objectAtIndex:index];
}
- (PBArray *)repeatedNestedEnum {
  return repeatedNestedEnumArray;
}
- (TestAllTypesLiteNestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index {
  return (TestAllTypesLiteNestedEnum)[repeatedNestedEnumArray enumAtIndex:index];
}
- (PBArray *)repeatedForeignEnum {
  return repeatedForeignEnumArray;
}
- (ForeignEnumLite)repeatedForeignEnumAtIndex:(NSUInteger)index {
  return (ForeignEnumLite)[repeatedForeignEnumArray enumAtIndex:index];
}
- (PBArray *)repeatedImportEnum {
  return repeatedImportEnumArray;
}
- (ImportEnumLite)repeatedImportEnumAtIndex:(NSUInteger)index {
  return (ImportEnumLite)[repeatedImportEnumArray enumAtIndex:index];
}
- (NSArray *)repeatedStringPiece {
  return repeatedStringPieceArray;
}
- (NSString*)repeatedStringPieceAtIndex:(NSUInteger)index {
  return [repeatedStringPieceArray objectAtIndex:index];
}
- (NSArray *)repeatedCord {
  return repeatedCordArray;
}
- (NSString*)repeatedCordAtIndex:(NSUInteger)index {
  return [repeatedCordArray objectAtIndex:index];
}
- (NSArray *)repeatedLazyMessage {
  return repeatedLazyMessageArray;
}
- (TestAllTypesLiteNestedMessage*)repeatedLazyMessageAtIndex:(NSUInteger)index {
  return [repeatedLazyMessageArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOptionalInt32) {
    [output writeInt32:1 value:self.optionalInt32];
  }
  if (self.hasOptionalInt64) {
    [output writeInt64:2 value:self.optionalInt64];
  }
  if (self.hasOptionalUint32) {
    [output writeUInt32:3 value:self.optionalUint32];
  }
  if (self.hasOptionalUint64) {
    [output writeUInt64:4 value:self.optionalUint64];
  }
  if (self.hasOptionalSint32) {
    [output writeSInt32:5 value:self.optionalSint32];
  }
  if (self.hasOptionalSint64) {
    [output writeSInt64:6 value:self.optionalSint64];
  }
  if (self.hasOptionalFixed32) {
    [output writeFixed32:7 value:self.optionalFixed32];
  }
  if (self.hasOptionalFixed64) {
    [output writeFixed64:8 value:self.optionalFixed64];
  }
  if (self.hasOptionalSfixed32) {
    [output writeSFixed32:9 value:self.optionalSfixed32];
  }
  if (self.hasOptionalSfixed64) {
    [output writeSFixed64:10 value:self.optionalSfixed64];
  }
  if (self.hasOptionalFloat) {
    [output writeFloat:11 value:self.optionalFloat];
  }
  if (self.hasOptionalDouble) {
    [output writeDouble:12 value:self.optionalDouble];
  }
  if (self.hasOptionalBool) {
    [output writeBool:13 value:self.optionalBool];
  }
  if (self.hasOptionalString) {
    [output writeString:14 value:self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output writeData:15 value:self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output writeGroup:16 value:self.optionalGroup];
  }
  if (self.hasOptionalNestedMessage) {
    [output writeMessage:18 value:self.optionalNestedMessage];
  }
  if (self.hasOptionalForeignMessage) {
    [output writeMessage:19 value:self.optionalForeignMessage];
  }
  if (self.hasOptionalImportMessage) {
    [output writeMessage:20 value:self.optionalImportMessage];
  }
  if (self.hasOptionalNestedEnum) {
    [output writeEnum:21 value:self.optionalNestedEnum];
  }
  if (self.hasOptionalForeignEnum) {
    [output writeEnum:22 value:self.optionalForeignEnum];
  }
  if (self.hasOptionalImportEnum) {
    [output writeEnum:23 value:self.optionalImportEnum];
  }
  if (self.hasOptionalStringPiece) {
    [output writeString:24 value:self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output writeString:25 value:self.optionalCord];
  }
  if (self.hasOptionalPublicImportMessage) {
    [output writeMessage:26 value:self.optionalPublicImportMessage];
  }
  if (self.hasOptionalLazyMessage) {
    [output writeMessage:27 value:self.optionalLazyMessage];
  }
  const NSUInteger repeatedInt32ArrayCount = self.repeatedInt32Array.count;
  if (repeatedInt32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < repeatedInt32ArrayCount; ++i) {
      [output writeInt32:31 value:values[i]];
    }
  }
  const NSUInteger repeatedInt64ArrayCount = self.repeatedInt64Array.count;
  if (repeatedInt64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < repeatedInt64ArrayCount; ++i) {
      [output writeInt64:32 value:values[i]];
    }
  }
  const NSUInteger repeatedUint32ArrayCount = self.repeatedUint32Array.count;
  if (repeatedUint32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.repeatedUint32Array.data;
    for (NSUInteger i = 0; i < repeatedUint32ArrayCount; ++i) {
      [output writeUInt32:33 value:values[i]];
    }
  }
  const NSUInteger repeatedUint64ArrayCount = self.repeatedUint64Array.count;
  if (repeatedUint64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < repeatedUint64ArrayCount; ++i) {
      [output writeUInt64:34 value:values[i]];
    }
  }
  const NSUInteger repeatedSint32ArrayCount = self.repeatedSint32Array.count;
  if (repeatedSint32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.repeatedSint32Array.data;
    for (NSUInteger i = 0; i < repeatedSint32ArrayCount; ++i) {
      [output writeSInt32:35 value:values[i]];
    }
  }
  const NSUInteger repeatedSint64ArrayCount = self.repeatedSint64Array.count;
  if (repeatedSint64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.repeatedSint64Array.data;
    for (NSUInteger i = 0; i < repeatedSint64ArrayCount; ++i) {
      [output writeSInt64:36 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed32ArrayCount = self.repeatedFixed32Array.count;
  if (repeatedFixed32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.repeatedFixed32Array.data;
    for (NSUInteger i = 0; i < repeatedFixed32ArrayCount; ++i) {
      [output writeFixed32:37 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed64ArrayCount = self.repeatedFixed64Array.count;
  if (repeatedFixed64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.repeatedFixed64Array.data;
    for (NSUInteger i = 0; i < repeatedFixed64ArrayCount; ++i) {
      [output writeFixed64:38 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed32ArrayCount = self.repeatedSfixed32Array.count;
  if (repeatedSfixed32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.repeatedSfixed32Array.data;
    for (NSUInteger i = 0; i < repeatedSfixed32ArrayCount; ++i) {
      [output writeSFixed32:39 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed64ArrayCount = self.repeatedSfixed64Array.count;
  if (repeatedSfixed64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.repeatedSfixed64Array.data;
    for (NSUInteger i = 0; i < repeatedSfixed64ArrayCount; ++i) {
      [output writeSFixed64:40 value:values[i]];
    }
  }
  const NSUInteger repeatedFloatArrayCount = self.repeatedFloatArray.count;
  if (repeatedFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.repeatedFloatArray.data;
    for (NSUInteger i = 0; i < repeatedFloatArrayCount; ++i) {
      [output writeFloat:41 value:values[i]];
    }
  }
  const NSUInteger repeatedDoubleArrayCount = self.repeatedDoubleArray.count;
  if (repeatedDoubleArrayCount > 0) {
    const Float64 *values = (const Float64 *)self.repeatedDoubleArray.data;
    for (NSUInteger i = 0; i < repeatedDoubleArrayCount; ++i) {
      [output writeDouble:42 value:values[i]];
    }
  }
  const NSUInteger repeatedBoolArrayCount = self.repeatedBoolArray.count;
  if (repeatedBoolArrayCount > 0) {
    const BOOL *values = (const BOOL *)self.repeatedBoolArray.data;
    for (NSUInteger i = 0; i < repeatedBoolArrayCount; ++i) {
      [output writeBool:43 value:values[i]];
    }
  }
  [self.repeatedStringArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:44 value:element];
  }];
  [self.repeatedBytesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    [output writeData:45 value:element];
  }];
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesLiteRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    [output writeGroup:46 value:element];
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesLiteNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:48 value:element];
  }];
  [self.repeatedForeignMessageArray enumerateObjectsUsingBlock:^(ForeignMessageLite *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:49 value:element];
  }];
  [self.repeatedImportMessageArray enumerateObjectsUsingBlock:^(ImportMessageLite *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:50 value:element];
  }];
  const NSUInteger repeatedNestedEnumArrayCount = self.repeatedNestedEnumArray.count;
  const TestAllTypesLiteNestedEnum *repeatedNestedEnumArrayValues = (const TestAllTypesLiteNestedEnum *)self.repeatedNestedEnumArray.data;
  for (NSUInteger i = 0; i < repeatedNestedEnumArrayCount; ++i) {
    [output writeEnum:51 value:repeatedNestedEnumArrayValues[i]];
  }
  const NSUInteger repeatedForeignEnumArrayCount = self.repeatedForeignEnumArray.count;
  const ForeignEnumLite *repeatedForeignEnumArrayValues = (const ForeignEnumLite *)self.repeatedForeignEnumArray.data;
  for (NSUInteger i = 0; i < repeatedForeignEnumArrayCount; ++i) {
    [output writeEnum:52 value:repeatedForeignEnumArrayValues[i]];
  }
  const NSUInteger repeatedImportEnumArrayCount = self.repeatedImportEnumArray.count;
  const ImportEnumLite *repeatedImportEnumArrayValues = (const ImportEnumLite *)self.repeatedImportEnumArray.data;
  for (NSUInteger i = 0; i < repeatedImportEnumArrayCount; ++i) {
    [output writeEnum:53 value:repeatedImportEnumArrayValues[i]];
  }
  [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:54 value:element];
  }];
  [self.repeatedCordArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:55 value:element];
  }];
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesLiteNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:57 value:element];
  }];
  if (self.hasDefaultInt32) {
    [output writeInt32:61 value:self.defaultInt32];
  }
  if (self.hasDefaultInt64) {
    [output writeInt64:62 value:self.defaultInt64];
  }
  if (self.hasDefaultUint32) {
    [output writeUInt32:63 value:self.defaultUint32];
  }
  if (self.hasDefaultUint64) {
    [output writeUInt64:64 value:self.defaultUint64];
  }
  if (self.hasDefaultSint32) {
    [output writeSInt32:65 value:self.defaultSint32];
  }
  if (self.hasDefaultSint64) {
    [output writeSInt64:66 value:self.defaultSint64];
  }
  if (self.hasDefaultFixed32) {
    [output writeFixed32:67 value:self.defaultFixed32];
  }
  if (self.hasDefaultFixed64) {
    [output writeFixed64:68 value:self.defaultFixed64];
  }
  if (self.hasDefaultSfixed32) {
    [output writeSFixed32:69 value:self.defaultSfixed32];
  }
  if (self.hasDefaultSfixed64) {
    [output writeSFixed64:70 value:self.defaultSfixed64];
  }
  if (self.hasDefaultFloat) {
    [output writeFloat:71 value:self.defaultFloat];
  }
  if (self.hasDefaultDouble) {
    [output writeDouble:72 value:self.defaultDouble];
  }
  if (self.hasDefaultBool) {
    [output writeBool:73 value:self.defaultBool];
  }
  if (self.hasDefaultString) {
    [output writeString:74 value:self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output writeData:75 value:self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output writeEnum:81 value:self.defaultNestedEnum];
  }
  if (self.hasDefaultForeignEnum) {
    [output writeEnum:82 value:self.defaultForeignEnum];
  }
  if (self.hasDefaultImportEnum) {
    [output writeEnum:83 value:self.defaultImportEnum];
  }
  if (self.hasDefaultStringPiece) {
    [output writeString:84 value:self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output writeString:85 value:self.defaultCord];
  }
  if (self.hasOneofUint32) {
    [output writeUInt32:111 value:self.oneofUint32];
  }
  if (self.hasOneofNestedMessage) {
    [output writeMessage:112 value:self.oneofNestedMessage];
  }
  if (self.hasOneofString) {
    [output writeString:113 value:self.oneofString];
  }
  if (self.hasOneofBytes) {
    [output writeData:114 value:self.oneofBytes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptionalInt32) {
    size_ += computeInt32Size(1, self.optionalInt32);
  }
  if (self.hasOptionalInt64) {
    size_ += computeInt64Size(2, self.optionalInt64);
  }
  if (self.hasOptionalUint32) {
    size_ += computeUInt32Size(3, self.optionalUint32);
  }
  if (self.hasOptionalUint64) {
    size_ += computeUInt64Size(4, self.optionalUint64);
  }
  if (self.hasOptionalSint32) {
    size_ += computeSInt32Size(5, self.optionalSint32);
  }
  if (self.hasOptionalSint64) {
    size_ += computeSInt64Size(6, self.optionalSint64);
  }
  if (self.hasOptionalFixed32) {
    size_ += computeFixed32Size(7, self.optionalFixed32);
  }
  if (self.hasOptionalFixed64) {
    size_ += computeFixed64Size(8, self.optionalFixed64);
  }
  if (self.hasOptionalSfixed32) {
    size_ += computeSFixed32Size(9, self.optionalSfixed32);
  }
  if (self.hasOptionalSfixed64) {
    size_ += computeSFixed64Size(10, self.optionalSfixed64);
  }
  if (self.hasOptionalFloat) {
    size_ += computeFloatSize(11, self.optionalFloat);
  }
  if (self.hasOptionalDouble) {
    size_ += computeDoubleSize(12, self.optionalDouble);
  }
  if (self.hasOptionalBool) {
    size_ += computeBoolSize(13, self.optionalBool);
  }
  if (self.hasOptionalString) {
    size_ += computeStringSize(14, self.optionalString);
  }
  if (self.hasOptionalBytes) {
    size_ += computeDataSize(15, self.optionalBytes);
  }
  if (self.hasOptionalGroup) {
    size_ += computeGroupSize(16, self.optionalGroup);
  }
  if (self.hasOptionalNestedMessage) {
    size_ += computeMessageSize(18, self.optionalNestedMessage);
  }
  if (self.hasOptionalForeignMessage) {
    size_ += computeMessageSize(19, self.optionalForeignMessage);
  }
  if (self.hasOptionalImportMessage) {
    size_ += computeMessageSize(20, self.optionalImportMessage);
  }
  if (self.hasOptionalNestedEnum) {
    size_ += computeEnumSize(21, self.optionalNestedEnum);
  }
  if (self.hasOptionalForeignEnum) {
    size_ += computeEnumSize(22, self.optionalForeignEnum);
  }
  if (self.hasOptionalImportEnum) {
    size_ += computeEnumSize(23, self.optionalImportEnum);
  }
  if (self.hasOptionalStringPiece) {
    size_ += computeStringSize(24, self.optionalStringPiece);
  }
  if (self.hasOptionalCord) {
    size_ += computeStringSize(25, self.optionalCord);
  }
  if (self.hasOptionalPublicImportMessage) {
    size_ += computeMessageSize(26, self.optionalPublicImportMessage);
  }
  if (self.hasOptionalLazyMessage) {
    size_ += computeMessageSize(27, self.optionalLazyMessage);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedInt32Array.count;
    const SInt32 *values = (const SInt32 *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedInt64Array.count;
    const SInt64 *values = (const SInt64 *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedUint32Array.count;
    const UInt32 *values = (const UInt32 *)self.repeatedUint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedUint64Array.count;
    const UInt64 *values = (const UInt64 *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSint32Array.count;
    const SInt32 *values = (const SInt32 *)self.repeatedSint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSint64Array.count;
    const SInt64 *values = (const SInt64 *)self.repeatedSint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSfixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedSfixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedFloatArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedDoubleArray.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedBoolArray.count;
    dataSize = (SInt32)(1 * count);
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedStringArray.count;
    [self.repeatedStringArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedBytesArray.count;
    [self.repeatedBytesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeDataSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesLiteRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    size_ += computeGroupSize(46, element);
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesLiteNestedMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(48, element);
  }];
  [self.repeatedForeignMessageArray enumerateObjectsUsingBlock:^(ForeignMessageLite *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(49, element);
  }];
  [self.repeatedImportMessageArray enumerateObjectsUsingBlock:^(ImportMessageLite *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(50, element);
  }];
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedNestedEnumArray.count;
    const TestAllTypesLiteNestedEnum *values = (const TestAllTypesLiteNestedEnum *)self.repeatedNestedEnumArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedForeignEnumArray.count;
    const ForeignEnumLite *values = (const ForeignEnumLite *)self.repeatedForeignEnumArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedImportEnumArray.count;
    const ImportEnumLite *values = (const ImportEnumLite *)self.repeatedImportEnumArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedStringPieceArray.count;
    [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.repeatedCordArray.count;
    [self.repeatedCordArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesLiteNestedMessage *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(57, element);
  }];
  if (self.hasDefaultInt32) {
    size_ += computeInt32Size(61, self.defaultInt32);
  }
  if (self.hasDefaultInt64) {
    size_ += computeInt64Size(62, self.defaultInt64);
  }
  if (self.hasDefaultUint32) {
    size_ += computeUInt32Size(63, self.defaultUint32);
  }
  if (self.hasDefaultUint64) {
    size_ += computeUInt64Size(64, self.defaultUint64);
  }
  if (self.hasDefaultSint32) {
    size_ += computeSInt32Size(65, self.defaultSint32);
  }
  if (self.hasDefaultSint64) {
    size_ += computeSInt64Size(66, self.defaultSint64);
  }
  if (self.hasDefaultFixed32) {
    size_ += computeFixed32Size(67, self.defaultFixed32);
  }
  if (self.hasDefaultFixed64) {
    size_ += computeFixed64Size(68, self.defaultFixed64);
  }
  if (self.hasDefaultSfixed32) {
    size_ += computeSFixed32Size(69, self.defaultSfixed32);
  }
  if (self.hasDefaultSfixed64) {
    size_ += computeSFixed64Size(70, self.defaultSfixed64);
  }
  if (self.hasDefaultFloat) {
    size_ += computeFloatSize(71, self.defaultFloat);
  }
  if (self.hasDefaultDouble) {
    size_ += computeDoubleSize(72, self.defaultDouble);
  }
  if (self.hasDefaultBool) {
    size_ += computeBoolSize(73, self.defaultBool);
  }
  if (self.hasDefaultString) {
    size_ += computeStringSize(74, self.defaultString);
  }
  if (self.hasDefaultBytes) {
    size_ += computeDataSize(75, self.defaultBytes);
  }
  if (self.hasDefaultNestedEnum) {
    size_ += computeEnumSize(81, self.defaultNestedEnum);
  }
  if (self.hasDefaultForeignEnum) {
    size_ += computeEnumSize(82, self.defaultForeignEnum);
  }
  if (self.hasDefaultImportEnum) {
    size_ += computeEnumSize(83, self.defaultImportEnum);
  }
  if (self.hasDefaultStringPiece) {
    size_ += computeStringSize(84, self.defaultStringPiece);
  }
  if (self.hasDefaultCord) {
    size_ += computeStringSize(85, self.defaultCord);
  }
  if (self.hasOneofUint32) {
    size_ += computeUInt32Size(111, self.oneofUint32);
  }
  if (self.hasOneofNestedMessage) {
    size_ += computeMessageSize(112, self.oneofNestedMessage);
  }
  if (self.hasOneofString) {
    size_ += computeStringSize(113, self.oneofString);
  }
  if (self.hasOneofBytes) {
    size_ += computeDataSize(114, self.oneofBytes);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypesLite*) parseFromData:(NSData*) data {
  return (TestAllTypesLite*)[[[TestAllTypesLite builder] mergeFromData:data] build];
}
+ (TestAllTypesLite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLite*)[[[TestAllTypesLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLite*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypesLite*)[[[TestAllTypesLite builder] mergeFromInputStream:input] build];
}
+ (TestAllTypesLite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLite*)[[[TestAllTypesLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypesLite*)[[[TestAllTypesLite builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypesLite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLite*)[[[TestAllTypesLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLiteBuilder*) builder {
  return [[TestAllTypesLiteBuilder alloc] init];
}
+ (TestAllTypesLiteBuilder*) builderWithPrototype:(TestAllTypesLite*) prototype {
  return [[TestAllTypesLite builder] mergeFrom:prototype];
}
- (TestAllTypesLiteBuilder*) builder {
  return [TestAllTypesLite builder];
}
- (TestAllTypesLiteBuilder*) toBuilder {
  return [TestAllTypesLite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOptionalInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt32", [NSNumber numberWithInteger:self.optionalInt32]];
  }
  if (self.hasOptionalInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt64", [NSNumber numberWithLongLong:self.optionalInt64]];
  }
  if (self.hasOptionalUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint32", [NSNumber numberWithInteger:self.optionalUint32]];
  }
  if (self.hasOptionalUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint64", [NSNumber numberWithLongLong:self.optionalUint64]];
  }
  if (self.hasOptionalSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint32", [NSNumber numberWithInteger:self.optionalSint32]];
  }
  if (self.hasOptionalSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint64", [NSNumber numberWithLongLong:self.optionalSint64]];
  }
  if (self.hasOptionalFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed32", [NSNumber numberWithInteger:self.optionalFixed32]];
  }
  if (self.hasOptionalFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed64", [NSNumber numberWithLongLong:self.optionalFixed64]];
  }
  if (self.hasOptionalSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed32", [NSNumber numberWithInteger:self.optionalSfixed32]];
  }
  if (self.hasOptionalSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed64", [NSNumber numberWithLongLong:self.optionalSfixed64]];
  }
  if (self.hasOptionalFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFloat", [NSNumber numberWithFloat:self.optionalFloat]];
  }
  if (self.hasOptionalDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalDouble", [NSNumber numberWithDouble:self.optionalDouble]];
  }
  if (self.hasOptionalBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBool", [NSNumber numberWithBool:self.optionalBool]];
  }
  if (self.hasOptionalString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalString", self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBytes", self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalGroup"];
    [self.optionalGroup writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalNestedMessage"];
    [self.optionalNestedMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalForeignMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalForeignMessage"];
    [self.optionalForeignMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalImportMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalImportMessage"];
    [self.optionalImportMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalNestedEnum", NSStringFromTestAllTypesLiteNestedEnum(self.optionalNestedEnum)];
  }
  if (self.hasOptionalForeignEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalForeignEnum", NSStringFromForeignEnumLite(self.optionalForeignEnum)];
  }
  if (self.hasOptionalImportEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalImportEnum", NSStringFromImportEnumLite(self.optionalImportEnum)];
  }
  if (self.hasOptionalStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalStringPiece", self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalCord", self.optionalCord];
  }
  if (self.hasOptionalPublicImportMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalPublicImportMessage"];
    [self.optionalPublicImportMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalLazyMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalLazyMessage"];
    [self.optionalLazyMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.repeatedInt32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt32", obj];
  }];
  [self.repeatedInt64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt64", obj];
  }];
  [self.repeatedUint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint32", obj];
  }];
  [self.repeatedUint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint64", obj];
  }];
  [self.repeatedSint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint32", obj];
  }];
  [self.repeatedSint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint64", obj];
  }];
  [self.repeatedFixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed32", obj];
  }];
  [self.repeatedFixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed64", obj];
  }];
  [self.repeatedSfixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed32", obj];
  }];
  [self.repeatedSfixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed64", obj];
  }];
  [self.repeatedFloatArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFloat", obj];
  }];
  [self.repeatedDoubleArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedDouble", obj];
  }];
  [self.repeatedBoolArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBool", obj];
  }];
  [self.repeatedStringArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedString", obj];
  }];
  [self.repeatedBytesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBytes", obj];
  }];
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesLiteRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedGroup"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesLiteNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedNestedMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repeatedForeignMessageArray enumerateObjectsUsingBlock:^(ForeignMessageLite *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedForeignMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repeatedImportMessageArray enumerateObjectsUsingBlock:^(ImportMessageLite *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedImportMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.repeatedNestedEnumArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedNestedEnum", NSStringFromTestAllTypesLiteNestedEnum([(NSNumber *)element intValue])];
  }];
  [self.repeatedForeignEnumArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedForeignEnum", NSStringFromForeignEnumLite([(NSNumber *)element intValue])];
  }];
  [self.repeatedImportEnumArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedImportEnum", NSStringFromImportEnumLite([(NSNumber *)element intValue])];
  }];
  [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedStringPiece", obj];
  }];
  [self.repeatedCordArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedCord", obj];
  }];
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesLiteNestedMessage *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedLazyMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDefaultInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt32", [NSNumber numberWithInteger:self.defaultInt32]];
  }
  if (self.hasDefaultInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt64", [NSNumber numberWithLongLong:self.defaultInt64]];
  }
  if (self.hasDefaultUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint32", [NSNumber numberWithInteger:self.defaultUint32]];
  }
  if (self.hasDefaultUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint64", [NSNumber numberWithLongLong:self.defaultUint64]];
  }
  if (self.hasDefaultSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint32", [NSNumber numberWithInteger:self.defaultSint32]];
  }
  if (self.hasDefaultSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint64", [NSNumber numberWithLongLong:self.defaultSint64]];
  }
  if (self.hasDefaultFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed32", [NSNumber numberWithInteger:self.defaultFixed32]];
  }
  if (self.hasDefaultFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed64", [NSNumber numberWithLongLong:self.defaultFixed64]];
  }
  if (self.hasDefaultSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed32", [NSNumber numberWithInteger:self.defaultSfixed32]];
  }
  if (self.hasDefaultSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed64", [NSNumber numberWithLongLong:self.defaultSfixed64]];
  }
  if (self.hasDefaultFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFloat", [NSNumber numberWithFloat:self.defaultFloat]];
  }
  if (self.hasDefaultDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultDouble", [NSNumber numberWithDouble:self.defaultDouble]];
  }
  if (self.hasDefaultBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBool", [NSNumber numberWithBool:self.defaultBool]];
  }
  if (self.hasDefaultString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultString", self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBytes", self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultNestedEnum", NSStringFromTestAllTypesLiteNestedEnum(self.defaultNestedEnum)];
  }
  if (self.hasDefaultForeignEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultForeignEnum", NSStringFromForeignEnumLite(self.defaultForeignEnum)];
  }
  if (self.hasDefaultImportEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultImportEnum", NSStringFromImportEnumLite(self.defaultImportEnum)];
  }
  if (self.hasDefaultStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultStringPiece", self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultCord", self.defaultCord];
  }
  if (self.hasOneofUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneofUint32", [NSNumber numberWithInteger:self.oneofUint32]];
  }
  if (self.hasOneofNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"oneofNestedMessage"];
    [self.oneofNestedMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOneofString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneofString", self.oneofString];
  }
  if (self.hasOneofBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneofBytes", self.oneofBytes];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOptionalInt32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalInt32] forKey: @"optionalInt32"];
  }
  if (self.hasOptionalInt64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalInt64] forKey: @"optionalInt64"];
  }
  if (self.hasOptionalUint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalUint32] forKey: @"optionalUint32"];
  }
  if (self.hasOptionalUint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalUint64] forKey: @"optionalUint64"];
  }
  if (self.hasOptionalSint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalSint32] forKey: @"optionalSint32"];
  }
  if (self.hasOptionalSint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalSint64] forKey: @"optionalSint64"];
  }
  if (self.hasOptionalFixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalFixed32] forKey: @"optionalFixed32"];
  }
  if (self.hasOptionalFixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalFixed64] forKey: @"optionalFixed64"];
  }
  if (self.hasOptionalSfixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.optionalSfixed32] forKey: @"optionalSfixed32"];
  }
  if (self.hasOptionalSfixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.optionalSfixed64] forKey: @"optionalSfixed64"];
  }
  if (self.hasOptionalFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.optionalFloat] forKey: @"optionalFloat"];
  }
  if (self.hasOptionalDouble) {
    [dictionary setObject: [NSNumber numberWithDouble:self.optionalDouble] forKey: @"optionalDouble"];
  }
  if (self.hasOptionalBool) {
    [dictionary setObject: [NSNumber numberWithBool:self.optionalBool] forKey: @"optionalBool"];
  }
  if (self.hasOptionalString) {
    [dictionary setObject: self.optionalString forKey: @"optionalString"];
  }
  if (self.hasOptionalBytes) {
    [dictionary setObject: self.optionalBytes forKey: @"optionalBytes"];
  }
  if (self.hasOptionalGroup) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalGroup storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalGroup"];
  }
  if (self.hasOptionalNestedMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalNestedMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalNestedMessage"];
  }
  if (self.hasOptionalForeignMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalForeignMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalForeignMessage"];
  }
  if (self.hasOptionalImportMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalImportMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalImportMessage"];
  }
  if (self.hasOptionalNestedEnum) {
    [dictionary setObject: @(self.optionalNestedEnum) forKey: @"optionalNestedEnum"];
  }
  if (self.hasOptionalForeignEnum) {
    [dictionary setObject: @(self.optionalForeignEnum) forKey: @"optionalForeignEnum"];
  }
  if (self.hasOptionalImportEnum) {
    [dictionary setObject: @(self.optionalImportEnum) forKey: @"optionalImportEnum"];
  }
  if (self.hasOptionalStringPiece) {
    [dictionary setObject: self.optionalStringPiece forKey: @"optionalStringPiece"];
  }
  if (self.hasOptionalCord) {
    [dictionary setObject: self.optionalCord forKey: @"optionalCord"];
  }
  if (self.hasOptionalPublicImportMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalPublicImportMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalPublicImportMessage"];
  }
  if (self.hasOptionalLazyMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalLazyMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalLazyMessage"];
  }
  NSMutableArray * repeatedInt32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedInt32ArrayCount=self.repeatedInt32Array.count;
  for(int i=0;i<repeatedInt32ArrayCount;i++){
    [repeatedInt32ArrayArray addObject: @([self.repeatedInt32Array int32AtIndex:i])];
  }
  [dictionary setObject: repeatedInt32ArrayArray forKey: @"repeatedInt32"];
  NSMutableArray * repeatedInt64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedInt64ArrayCount=self.repeatedInt64Array.count;
  for(int i=0;i<repeatedInt64ArrayCount;i++){
    [repeatedInt64ArrayArray addObject: @([self.repeatedInt64Array int64AtIndex:i])];
  }
  [dictionary setObject: repeatedInt64ArrayArray forKey: @"repeatedInt64"];
  NSMutableArray * repeatedUint32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedUint32ArrayCount=self.repeatedUint32Array.count;
  for(int i=0;i<repeatedUint32ArrayCount;i++){
    [repeatedUint32ArrayArray addObject: @([self.repeatedUint32Array uint32AtIndex:i])];
  }
  [dictionary setObject: repeatedUint32ArrayArray forKey: @"repeatedUint32"];
  NSMutableArray * repeatedUint64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedUint64ArrayCount=self.repeatedUint64Array.count;
  for(int i=0;i<repeatedUint64ArrayCount;i++){
    [repeatedUint64ArrayArray addObject: @([self.repeatedUint64Array uint64AtIndex:i])];
  }
  [dictionary setObject: repeatedUint64ArrayArray forKey: @"repeatedUint64"];
  NSMutableArray * repeatedSint32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSint32ArrayCount=self.repeatedSint32Array.count;
  for(int i=0;i<repeatedSint32ArrayCount;i++){
    [repeatedSint32ArrayArray addObject: @([self.repeatedSint32Array int32AtIndex:i])];
  }
  [dictionary setObject: repeatedSint32ArrayArray forKey: @"repeatedSint32"];
  NSMutableArray * repeatedSint64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSint64ArrayCount=self.repeatedSint64Array.count;
  for(int i=0;i<repeatedSint64ArrayCount;i++){
    [repeatedSint64ArrayArray addObject: @([self.repeatedSint64Array int64AtIndex:i])];
  }
  [dictionary setObject: repeatedSint64ArrayArray forKey: @"repeatedSint64"];
  NSMutableArray * repeatedFixed32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedFixed32ArrayCount=self.repeatedFixed32Array.count;
  for(int i=0;i<repeatedFixed32ArrayCount;i++){
    [repeatedFixed32ArrayArray addObject: @([self.repeatedFixed32Array uint32AtIndex:i])];
  }
  [dictionary setObject: repeatedFixed32ArrayArray forKey: @"repeatedFixed32"];
  NSMutableArray * repeatedFixed64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedFixed64ArrayCount=self.repeatedFixed64Array.count;
  for(int i=0;i<repeatedFixed64ArrayCount;i++){
    [repeatedFixed64ArrayArray addObject: @([self.repeatedFixed64Array uint64AtIndex:i])];
  }
  [dictionary setObject: repeatedFixed64ArrayArray forKey: @"repeatedFixed64"];
  NSMutableArray * repeatedSfixed32ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSfixed32ArrayCount=self.repeatedSfixed32Array.count;
  for(int i=0;i<repeatedSfixed32ArrayCount;i++){
    [repeatedSfixed32ArrayArray addObject: @([self.repeatedSfixed32Array int32AtIndex:i])];
  }
  [dictionary setObject: repeatedSfixed32ArrayArray forKey: @"repeatedSfixed32"];
  NSMutableArray * repeatedSfixed64ArrayArray = [NSMutableArray new];
  NSUInteger repeatedSfixed64ArrayCount=self.repeatedSfixed64Array.count;
  for(int i=0;i<repeatedSfixed64ArrayCount;i++){
    [repeatedSfixed64ArrayArray addObject: @([self.repeatedSfixed64Array int64AtIndex:i])];
  }
  [dictionary setObject: repeatedSfixed64ArrayArray forKey: @"repeatedSfixed64"];
  NSMutableArray * repeatedFloatArrayArray = [NSMutableArray new];
  NSUInteger repeatedFloatArrayCount=self.repeatedFloatArray.count;
  for(int i=0;i<repeatedFloatArrayCount;i++){
    [repeatedFloatArrayArray addObject: @([self.repeatedFloatArray floatAtIndex:i])];
  }
  [dictionary setObject: repeatedFloatArrayArray forKey: @"repeatedFloat"];
  NSMutableArray * repeatedDoubleArrayArray = [NSMutableArray new];
  NSUInteger repeatedDoubleArrayCount=self.repeatedDoubleArray.count;
  for(int i=0;i<repeatedDoubleArrayCount;i++){
    [repeatedDoubleArrayArray addObject: @([self.repeatedDoubleArray doubleAtIndex:i])];
  }
  [dictionary setObject: repeatedDoubleArrayArray forKey: @"repeatedDouble"];
  NSMutableArray * repeatedBoolArrayArray = [NSMutableArray new];
  NSUInteger repeatedBoolArrayCount=self.repeatedBoolArray.count;
  for(int i=0;i<repeatedBoolArrayCount;i++){
    [repeatedBoolArrayArray addObject: @([self.repeatedBoolArray boolAtIndex:i])];
  }
  [dictionary setObject: repeatedBoolArrayArray forKey: @"repeatedBool"];
  [dictionary setObject:self.repeatedString forKey: @"repeatedString"];
  [dictionary setObject:self.repeatedBytes forKey: @"repeatedBytes"];
  for (TestAllTypesLiteRepeatedGroup* element in self.repeatedGroupArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedGroup"];
  }
  for (TestAllTypesLiteNestedMessage* element in self.repeatedNestedMessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedNestedMessage"];
  }
  for (ForeignMessageLite* element in self.repeatedForeignMessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedForeignMessage"];
  }
  for (ImportMessageLite* element in self.repeatedImportMessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedImportMessage"];
  }
  const NSUInteger repeatedNestedEnumArrayCount = self.repeatedNestedEnumArray.count;
  if (repeatedNestedEnumArrayCount > 0) {
    const TestAllTypesLiteNestedEnum *repeatedNestedEnumArrayValues = (const TestAllTypesLiteNestedEnum *)self.repeatedNestedEnumArray.data;
    NSMutableArray * repeatedNestedEnumArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < repeatedNestedEnumArrayCount; ++i) {
      [repeatedNestedEnumArrayArray addObject: @(repeatedNestedEnumArrayValues[i])];
    }
    [dictionary setObject: repeatedNestedEnumArrayArray forKey: @"repeatedNestedEnum"];
  }
  const NSUInteger repeatedForeignEnumArrayCount = self.repeatedForeignEnumArray.count;
  if (repeatedForeignEnumArrayCount > 0) {
    const ForeignEnumLite *repeatedForeignEnumArrayValues = (const ForeignEnumLite *)self.repeatedForeignEnumArray.data;
    NSMutableArray * repeatedForeignEnumArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < repeatedForeignEnumArrayCount; ++i) {
      [repeatedForeignEnumArrayArray addObject: @(repeatedForeignEnumArrayValues[i])];
    }
    [dictionary setObject: repeatedForeignEnumArrayArray forKey: @"repeatedForeignEnum"];
  }
  const NSUInteger repeatedImportEnumArrayCount = self.repeatedImportEnumArray.count;
  if (repeatedImportEnumArrayCount > 0) {
    const ImportEnumLite *repeatedImportEnumArrayValues = (const ImportEnumLite *)self.repeatedImportEnumArray.data;
    NSMutableArray * repeatedImportEnumArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < repeatedImportEnumArrayCount; ++i) {
      [repeatedImportEnumArrayArray addObject: @(repeatedImportEnumArrayValues[i])];
    }
    [dictionary setObject: repeatedImportEnumArrayArray forKey: @"repeatedImportEnum"];
  }
  [dictionary setObject:self.repeatedStringPiece forKey: @"repeatedStringPiece"];
  [dictionary setObject:self.repeatedCord forKey: @"repeatedCord"];
  for (TestAllTypesLiteNestedMessage* element in self.repeatedLazyMessageArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedLazyMessage"];
  }
  if (self.hasDefaultInt32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultInt32] forKey: @"defaultInt32"];
  }
  if (self.hasDefaultInt64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultInt64] forKey: @"defaultInt64"];
  }
  if (self.hasDefaultUint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultUint32] forKey: @"defaultUint32"];
  }
  if (self.hasDefaultUint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultUint64] forKey: @"defaultUint64"];
  }
  if (self.hasDefaultSint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultSint32] forKey: @"defaultSint32"];
  }
  if (self.hasDefaultSint64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultSint64] forKey: @"defaultSint64"];
  }
  if (self.hasDefaultFixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultFixed32] forKey: @"defaultFixed32"];
  }
  if (self.hasDefaultFixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultFixed64] forKey: @"defaultFixed64"];
  }
  if (self.hasDefaultSfixed32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.defaultSfixed32] forKey: @"defaultSfixed32"];
  }
  if (self.hasDefaultSfixed64) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.defaultSfixed64] forKey: @"defaultSfixed64"];
  }
  if (self.hasDefaultFloat) {
    [dictionary setObject: [NSNumber numberWithFloat:self.defaultFloat] forKey: @"defaultFloat"];
  }
  if (self.hasDefaultDouble) {
    [dictionary setObject: [NSNumber numberWithDouble:self.defaultDouble] forKey: @"defaultDouble"];
  }
  if (self.hasDefaultBool) {
    [dictionary setObject: [NSNumber numberWithBool:self.defaultBool] forKey: @"defaultBool"];
  }
  if (self.hasDefaultString) {
    [dictionary setObject: self.defaultString forKey: @"defaultString"];
  }
  if (self.hasDefaultBytes) {
    [dictionary setObject: self.defaultBytes forKey: @"defaultBytes"];
  }
  if (self.hasDefaultNestedEnum) {
    [dictionary setObject: @(self.defaultNestedEnum) forKey: @"defaultNestedEnum"];
  }
  if (self.hasDefaultForeignEnum) {
    [dictionary setObject: @(self.defaultForeignEnum) forKey: @"defaultForeignEnum"];
  }
  if (self.hasDefaultImportEnum) {
    [dictionary setObject: @(self.defaultImportEnum) forKey: @"defaultImportEnum"];
  }
  if (self.hasDefaultStringPiece) {
    [dictionary setObject: self.defaultStringPiece forKey: @"defaultStringPiece"];
  }
  if (self.hasDefaultCord) {
    [dictionary setObject: self.defaultCord forKey: @"defaultCord"];
  }
  if (self.hasOneofUint32) {
    [dictionary setObject: [NSNumber numberWithInteger:self.oneofUint32] forKey: @"oneofUint32"];
  }
  if (self.hasOneofNestedMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.oneofNestedMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"oneofNestedMessage"];
  }
  if (self.hasOneofString) {
    [dictionary setObject: self.oneofString forKey: @"oneofString"];
  }
  if (self.hasOneofBytes) {
    [dictionary setObject: self.oneofBytes forKey: @"oneofBytes"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesLite class]]) {
    return NO;
  }
  TestAllTypesLite *otherMessage = other;
  return
      self.hasOptionalInt32 == otherMessage.hasOptionalInt32 &&
      (!self.hasOptionalInt32 || self.optionalInt32 == otherMessage.optionalInt32) &&
      self.hasOptionalInt64 == otherMessage.hasOptionalInt64 &&
      (!self.hasOptionalInt64 || self.optionalInt64 == otherMessage.optionalInt64) &&
      self.hasOptionalUint32 == otherMessage.hasOptionalUint32 &&
      (!self.hasOptionalUint32 || self.optionalUint32 == otherMessage.optionalUint32) &&
      self.hasOptionalUint64 == otherMessage.hasOptionalUint64 &&
      (!self.hasOptionalUint64 || self.optionalUint64 == otherMessage.optionalUint64) &&
      self.hasOptionalSint32 == otherMessage.hasOptionalSint32 &&
      (!self.hasOptionalSint32 || self.optionalSint32 == otherMessage.optionalSint32) &&
      self.hasOptionalSint64 == otherMessage.hasOptionalSint64 &&
      (!self.hasOptionalSint64 || self.optionalSint64 == otherMessage.optionalSint64) &&
      self.hasOptionalFixed32 == otherMessage.hasOptionalFixed32 &&
      (!self.hasOptionalFixed32 || self.optionalFixed32 == otherMessage.optionalFixed32) &&
      self.hasOptionalFixed64 == otherMessage.hasOptionalFixed64 &&
      (!self.hasOptionalFixed64 || self.optionalFixed64 == otherMessage.optionalFixed64) &&
      self.hasOptionalSfixed32 == otherMessage.hasOptionalSfixed32 &&
      (!self.hasOptionalSfixed32 || self.optionalSfixed32 == otherMessage.optionalSfixed32) &&
      self.hasOptionalSfixed64 == otherMessage.hasOptionalSfixed64 &&
      (!self.hasOptionalSfixed64 || self.optionalSfixed64 == otherMessage.optionalSfixed64) &&
      self.hasOptionalFloat == otherMessage.hasOptionalFloat &&
      (!self.hasOptionalFloat || self.optionalFloat == otherMessage.optionalFloat) &&
      self.hasOptionalDouble == otherMessage.hasOptionalDouble &&
      (!self.hasOptionalDouble || self.optionalDouble == otherMessage.optionalDouble) &&
      self.hasOptionalBool == otherMessage.hasOptionalBool &&
      (!self.hasOptionalBool || self.optionalBool == otherMessage.optionalBool) &&
      self.hasOptionalString == otherMessage.hasOptionalString &&
      (!self.hasOptionalString || [self.optionalString isEqual:otherMessage.optionalString]) &&
      self.hasOptionalBytes == otherMessage.hasOptionalBytes &&
      (!self.hasOptionalBytes || [self.optionalBytes isEqual:otherMessage.optionalBytes]) &&
      self.hasOptionalGroup == otherMessage.hasOptionalGroup &&
      (!self.hasOptionalGroup || [self.optionalGroup isEqual:otherMessage.optionalGroup]) &&
      self.hasOptionalNestedMessage == otherMessage.hasOptionalNestedMessage &&
      (!self.hasOptionalNestedMessage || [self.optionalNestedMessage isEqual:otherMessage.optionalNestedMessage]) &&
      self.hasOptionalForeignMessage == otherMessage.hasOptionalForeignMessage &&
      (!self.hasOptionalForeignMessage || [self.optionalForeignMessage isEqual:otherMessage.optionalForeignMessage]) &&
      self.hasOptionalImportMessage == otherMessage.hasOptionalImportMessage &&
      (!self.hasOptionalImportMessage || [self.optionalImportMessage isEqual:otherMessage.optionalImportMessage]) &&
      self.hasOptionalNestedEnum == otherMessage.hasOptionalNestedEnum &&
      (!self.hasOptionalNestedEnum || self.optionalNestedEnum == otherMessage.optionalNestedEnum) &&
      self.hasOptionalForeignEnum == otherMessage.hasOptionalForeignEnum &&
      (!self.hasOptionalForeignEnum || self.optionalForeignEnum == otherMessage.optionalForeignEnum) &&
      self.hasOptionalImportEnum == otherMessage.hasOptionalImportEnum &&
      (!self.hasOptionalImportEnum || self.optionalImportEnum == otherMessage.optionalImportEnum) &&
      self.hasOptionalStringPiece == otherMessage.hasOptionalStringPiece &&
      (!self.hasOptionalStringPiece || [self.optionalStringPiece isEqual:otherMessage.optionalStringPiece]) &&
      self.hasOptionalCord == otherMessage.hasOptionalCord &&
      (!self.hasOptionalCord || [self.optionalCord isEqual:otherMessage.optionalCord]) &&
      self.hasOptionalPublicImportMessage == otherMessage.hasOptionalPublicImportMessage &&
      (!self.hasOptionalPublicImportMessage || [self.optionalPublicImportMessage isEqual:otherMessage.optionalPublicImportMessage]) &&
      self.hasOptionalLazyMessage == otherMessage.hasOptionalLazyMessage &&
      (!self.hasOptionalLazyMessage || [self.optionalLazyMessage isEqual:otherMessage.optionalLazyMessage]) &&
      [self.repeatedInt32Array isEqualToArray:otherMessage.repeatedInt32Array] &&
      [self.repeatedInt64Array isEqualToArray:otherMessage.repeatedInt64Array] &&
      [self.repeatedUint32Array isEqualToArray:otherMessage.repeatedUint32Array] &&
      [self.repeatedUint64Array isEqualToArray:otherMessage.repeatedUint64Array] &&
      [self.repeatedSint32Array isEqualToArray:otherMessage.repeatedSint32Array] &&
      [self.repeatedSint64Array isEqualToArray:otherMessage.repeatedSint64Array] &&
      [self.repeatedFixed32Array isEqualToArray:otherMessage.repeatedFixed32Array] &&
      [self.repeatedFixed64Array isEqualToArray:otherMessage.repeatedFixed64Array] &&
      [self.repeatedSfixed32Array isEqualToArray:otherMessage.repeatedSfixed32Array] &&
      [self.repeatedSfixed64Array isEqualToArray:otherMessage.repeatedSfixed64Array] &&
      [self.repeatedFloatArray isEqualToArray:otherMessage.repeatedFloatArray] &&
      [self.repeatedDoubleArray isEqualToArray:otherMessage.repeatedDoubleArray] &&
      [self.repeatedBoolArray isEqualToArray:otherMessage.repeatedBoolArray] &&
      [self.repeatedStringArray isEqualToArray:otherMessage.repeatedStringArray] &&
      [self.repeatedBytesArray isEqualToArray:otherMessage.repeatedBytesArray] &&
      [self.repeatedGroupArray isEqualToArray:otherMessage.repeatedGroupArray] &&
      [self.repeatedNestedMessageArray isEqualToArray:otherMessage.repeatedNestedMessageArray] &&
      [self.repeatedForeignMessageArray isEqualToArray:otherMessage.repeatedForeignMessageArray] &&
      [self.repeatedImportMessageArray isEqualToArray:otherMessage.repeatedImportMessageArray] &&
      [self.repeatedNestedEnumArray isEqualToArray:otherMessage.repeatedNestedEnumArray] &&
      [self.repeatedForeignEnumArray isEqualToArray:otherMessage.repeatedForeignEnumArray] &&
      [self.repeatedImportEnumArray isEqualToArray:otherMessage.repeatedImportEnumArray] &&
      [self.repeatedStringPieceArray isEqualToArray:otherMessage.repeatedStringPieceArray] &&
      [self.repeatedCordArray isEqualToArray:otherMessage.repeatedCordArray] &&
      [self.repeatedLazyMessageArray isEqualToArray:otherMessage.repeatedLazyMessageArray] &&
      self.hasDefaultInt32 == otherMessage.hasDefaultInt32 &&
      (!self.hasDefaultInt32 || self.defaultInt32 == otherMessage.defaultInt32) &&
      self.hasDefaultInt64 == otherMessage.hasDefaultInt64 &&
      (!self.hasDefaultInt64 || self.defaultInt64 == otherMessage.defaultInt64) &&
      self.hasDefaultUint32 == otherMessage.hasDefaultUint32 &&
      (!self.hasDefaultUint32 || self.defaultUint32 == otherMessage.defaultUint32) &&
      self.hasDefaultUint64 == otherMessage.hasDefaultUint64 &&
      (!self.hasDefaultUint64 || self.defaultUint64 == otherMessage.defaultUint64) &&
      self.hasDefaultSint32 == otherMessage.hasDefaultSint32 &&
      (!self.hasDefaultSint32 || self.defaultSint32 == otherMessage.defaultSint32) &&
      self.hasDefaultSint64 == otherMessage.hasDefaultSint64 &&
      (!self.hasDefaultSint64 || self.defaultSint64 == otherMessage.defaultSint64) &&
      self.hasDefaultFixed32 == otherMessage.hasDefaultFixed32 &&
      (!self.hasDefaultFixed32 || self.defaultFixed32 == otherMessage.defaultFixed32) &&
      self.hasDefaultFixed64 == otherMessage.hasDefaultFixed64 &&
      (!self.hasDefaultFixed64 || self.defaultFixed64 == otherMessage.defaultFixed64) &&
      self.hasDefaultSfixed32 == otherMessage.hasDefaultSfixed32 &&
      (!self.hasDefaultSfixed32 || self.defaultSfixed32 == otherMessage.defaultSfixed32) &&
      self.hasDefaultSfixed64 == otherMessage.hasDefaultSfixed64 &&
      (!self.hasDefaultSfixed64 || self.defaultSfixed64 == otherMessage.defaultSfixed64) &&
      self.hasDefaultFloat == otherMessage.hasDefaultFloat &&
      (!self.hasDefaultFloat || self.defaultFloat == otherMessage.defaultFloat) &&
      self.hasDefaultDouble == otherMessage.hasDefaultDouble &&
      (!self.hasDefaultDouble || self.defaultDouble == otherMessage.defaultDouble) &&
      self.hasDefaultBool == otherMessage.hasDefaultBool &&
      (!self.hasDefaultBool || self.defaultBool == otherMessage.defaultBool) &&
      self.hasDefaultString == otherMessage.hasDefaultString &&
      (!self.hasDefaultString || [self.defaultString isEqual:otherMessage.defaultString]) &&
      self.hasDefaultBytes == otherMessage.hasDefaultBytes &&
      (!self.hasDefaultBytes || [self.defaultBytes isEqual:otherMessage.defaultBytes]) &&
      self.hasDefaultNestedEnum == otherMessage.hasDefaultNestedEnum &&
      (!self.hasDefaultNestedEnum || self.defaultNestedEnum == otherMessage.defaultNestedEnum) &&
      self.hasDefaultForeignEnum == otherMessage.hasDefaultForeignEnum &&
      (!self.hasDefaultForeignEnum || self.defaultForeignEnum == otherMessage.defaultForeignEnum) &&
      self.hasDefaultImportEnum == otherMessage.hasDefaultImportEnum &&
      (!self.hasDefaultImportEnum || self.defaultImportEnum == otherMessage.defaultImportEnum) &&
      self.hasDefaultStringPiece == otherMessage.hasDefaultStringPiece &&
      (!self.hasDefaultStringPiece || [self.defaultStringPiece isEqual:otherMessage.defaultStringPiece]) &&
      self.hasDefaultCord == otherMessage.hasDefaultCord &&
      (!self.hasDefaultCord || [self.defaultCord isEqual:otherMessage.defaultCord]) &&
      self.hasOneofUint32 == otherMessage.hasOneofUint32 &&
      (!self.hasOneofUint32 || self.oneofUint32 == otherMessage.oneofUint32) &&
      self.hasOneofNestedMessage == otherMessage.hasOneofNestedMessage &&
      (!self.hasOneofNestedMessage || [self.oneofNestedMessage isEqual:otherMessage.oneofNestedMessage]) &&
      self.hasOneofString == otherMessage.hasOneofString &&
      (!self.hasOneofString || [self.oneofString isEqual:otherMessage.oneofString]) &&
      self.hasOneofBytes == otherMessage.hasOneofBytes &&
      (!self.hasOneofBytes || [self.oneofBytes isEqual:otherMessage.oneofBytes]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOptionalInt32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalInt32] hash];
  }
  if (self.hasOptionalInt64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalInt64] hash];
  }
  if (self.hasOptionalUint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalUint32] hash];
  }
  if (self.hasOptionalUint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalUint64] hash];
  }
  if (self.hasOptionalSint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalSint32] hash];
  }
  if (self.hasOptionalSint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalSint64] hash];
  }
  if (self.hasOptionalFixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalFixed32] hash];
  }
  if (self.hasOptionalFixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalFixed64] hash];
  }
  if (self.hasOptionalSfixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.optionalSfixed32] hash];
  }
  if (self.hasOptionalSfixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.optionalSfixed64] hash];
  }
  if (self.hasOptionalFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.optionalFloat] hash];
  }
  if (self.hasOptionalDouble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.optionalDouble] hash];
  }
  if (self.hasOptionalBool) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.optionalBool] hash];
  }
  if (self.hasOptionalString) {
    hashCode = hashCode * 31 + [self.optionalString hash];
  }
  if (self.hasOptionalBytes) {
    hashCode = hashCode * 31 + [self.optionalBytes hash];
  }
  if (self.hasOptionalGroup) {
    hashCode = hashCode * 31 + [self.optionalGroup hash];
  }
  if (self.hasOptionalNestedMessage) {
    hashCode = hashCode * 31 + [self.optionalNestedMessage hash];
  }
  if (self.hasOptionalForeignMessage) {
    hashCode = hashCode * 31 + [self.optionalForeignMessage hash];
  }
  if (self.hasOptionalImportMessage) {
    hashCode = hashCode * 31 + [self.optionalImportMessage hash];
  }
  if (self.hasOptionalNestedEnum) {
    hashCode = hashCode * 31 + self.optionalNestedEnum;
  }
  if (self.hasOptionalForeignEnum) {
    hashCode = hashCode * 31 + self.optionalForeignEnum;
  }
  if (self.hasOptionalImportEnum) {
    hashCode = hashCode * 31 + self.optionalImportEnum;
  }
  if (self.hasOptionalStringPiece) {
    hashCode = hashCode * 31 + [self.optionalStringPiece hash];
  }
  if (self.hasOptionalCord) {
    hashCode = hashCode * 31 + [self.optionalCord hash];
  }
  if (self.hasOptionalPublicImportMessage) {
    hashCode = hashCode * 31 + [self.optionalPublicImportMessage hash];
  }
  if (self.hasOptionalLazyMessage) {
    hashCode = hashCode * 31 + [self.optionalLazyMessage hash];
  }
  [self.repeatedInt32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedInt64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedUint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedUint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedFixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedFixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSfixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedSfixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedFloatArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedDoubleArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedBoolArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.repeatedStringArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedBytesArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestAllTypesLiteRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedNestedMessageArray enumerateObjectsUsingBlock:^(TestAllTypesLiteNestedMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedForeignMessageArray enumerateObjectsUsingBlock:^(ForeignMessageLite *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedImportMessageArray enumerateObjectsUsingBlock:^(ImportMessageLite *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedNestedEnumArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  [self.repeatedForeignEnumArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  [self.repeatedImportEnumArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  [self.repeatedStringPieceArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedCordArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.repeatedLazyMessageArray enumerateObjectsUsingBlock:^(TestAllTypesLiteNestedMessage *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDefaultInt32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultInt32] hash];
  }
  if (self.hasDefaultInt64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultInt64] hash];
  }
  if (self.hasDefaultUint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultUint32] hash];
  }
  if (self.hasDefaultUint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultUint64] hash];
  }
  if (self.hasDefaultSint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultSint32] hash];
  }
  if (self.hasDefaultSint64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultSint64] hash];
  }
  if (self.hasDefaultFixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultFixed32] hash];
  }
  if (self.hasDefaultFixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultFixed64] hash];
  }
  if (self.hasDefaultSfixed32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defaultSfixed32] hash];
  }
  if (self.hasDefaultSfixed64) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.defaultSfixed64] hash];
  }
  if (self.hasDefaultFloat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.defaultFloat] hash];
  }
  if (self.hasDefaultDouble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.defaultDouble] hash];
  }
  if (self.hasDefaultBool) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.defaultBool] hash];
  }
  if (self.hasDefaultString) {
    hashCode = hashCode * 31 + [self.defaultString hash];
  }
  if (self.hasDefaultBytes) {
    hashCode = hashCode * 31 + [self.defaultBytes hash];
  }
  if (self.hasDefaultNestedEnum) {
    hashCode = hashCode * 31 + self.defaultNestedEnum;
  }
  if (self.hasDefaultForeignEnum) {
    hashCode = hashCode * 31 + self.defaultForeignEnum;
  }
  if (self.hasDefaultImportEnum) {
    hashCode = hashCode * 31 + self.defaultImportEnum;
  }
  if (self.hasDefaultStringPiece) {
    hashCode = hashCode * 31 + [self.defaultStringPiece hash];
  }
  if (self.hasDefaultCord) {
    hashCode = hashCode * 31 + [self.defaultCord hash];
  }
  if (self.hasOneofUint32) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oneofUint32] hash];
  }
  if (self.hasOneofNestedMessage) {
    hashCode = hashCode * 31 + [self.oneofNestedMessage hash];
  }
  if (self.hasOneofString) {
    hashCode = hashCode * 31 + [self.oneofString hash];
  }
  if (self.hasOneofBytes) {
    hashCode = hashCode * 31 + [self.oneofBytes hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL TestAllTypesLiteNestedEnumIsValidValue(TestAllTypesLiteNestedEnum value) {
  switch (value) {
    case TestAllTypesLiteNestedEnumFoo:
    case TestAllTypesLiteNestedEnumBar:
    case TestAllTypesLiteNestedEnumBaz:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromTestAllTypesLiteNestedEnum(TestAllTypesLiteNestedEnum value) {
  switch (value) {
    case TestAllTypesLiteNestedEnumFoo:
      return @"TestAllTypesLiteNestedEnumFoo";
    case TestAllTypesLiteNestedEnumBar:
      return @"TestAllTypesLiteNestedEnumBar";
    case TestAllTypesLiteNestedEnumBaz:
      return @"TestAllTypesLiteNestedEnumBaz";
    default:
      return nil;
  }
}

@interface TestAllTypesLiteNestedMessage ()
@property SInt32 bb;
@end

@implementation TestAllTypesLiteNestedMessage

- (BOOL) hasBb {
  return !!hasBb_;
}
- (void) setHasBb:(BOOL) _value_ {
  hasBb_ = !!_value_;
}
@synthesize bb;
- (instancetype) init {
  if ((self = [super init])) {
    self.bb = 0;
  }
  return self;
}
static TestAllTypesLiteNestedMessage* defaultTestAllTypesLiteNestedMessageInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypesLiteNestedMessage class]) {
    defaultTestAllTypesLiteNestedMessageInstance = [[TestAllTypesLiteNestedMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesLiteNestedMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesLiteNestedMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBb) {
    [output writeInt32:1 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBb) {
    size_ += computeInt32Size(1, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypesLiteNestedMessage*) parseFromData:(NSData*) data {
  return (TestAllTypesLiteNestedMessage*)[[[TestAllTypesLiteNestedMessage builder] mergeFromData:data] build];
}
+ (TestAllTypesLiteNestedMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLiteNestedMessage*)[[[TestAllTypesLiteNestedMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLiteNestedMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypesLiteNestedMessage*)[[[TestAllTypesLiteNestedMessage builder] mergeFromInputStream:input] build];
}
+ (TestAllTypesLiteNestedMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLiteNestedMessage*)[[[TestAllTypesLiteNestedMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLiteNestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypesLiteNestedMessage*)[[[TestAllTypesLiteNestedMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypesLiteNestedMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLiteNestedMessage*)[[[TestAllTypesLiteNestedMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLiteNestedMessageBuilder*) builder {
  return [[TestAllTypesLiteNestedMessageBuilder alloc] init];
}
+ (TestAllTypesLiteNestedMessageBuilder*) builderWithPrototype:(TestAllTypesLiteNestedMessage*) prototype {
  return [[TestAllTypesLiteNestedMessage builder] mergeFrom:prototype];
}
- (TestAllTypesLiteNestedMessageBuilder*) builder {
  return [TestAllTypesLiteNestedMessage builder];
}
- (TestAllTypesLiteNestedMessageBuilder*) toBuilder {
  return [TestAllTypesLiteNestedMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bb", [NSNumber numberWithInteger:self.bb]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBb) {
    [dictionary setObject: [NSNumber numberWithInteger:self.bb] forKey: @"bb"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesLiteNestedMessage class]]) {
    return NO;
  }
  TestAllTypesLiteNestedMessage *otherMessage = other;
  return
      self.hasBb == otherMessage.hasBb &&
      (!self.hasBb || self.bb == otherMessage.bb) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBb) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bb] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestAllTypesLiteNestedMessageBuilder()
@property (strong) TestAllTypesLiteNestedMessage* resultNestedMessage;
@end

@implementation TestAllTypesLiteNestedMessageBuilder
@synthesize resultNestedMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNestedMessage = [[TestAllTypesLiteNestedMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNestedMessage;
}
- (TestAllTypesLiteNestedMessageBuilder*) clear {
  self.resultNestedMessage = [[TestAllTypesLiteNestedMessage alloc] init];
  return self;
}
- (TestAllTypesLiteNestedMessageBuilder*) clone {
  return [TestAllTypesLiteNestedMessage builderWithPrototype:resultNestedMessage];
}
- (TestAllTypesLiteNestedMessage*) defaultInstance {
  return [TestAllTypesLiteNestedMessage defaultInstance];
}
- (TestAllTypesLiteNestedMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypesLiteNestedMessage*) buildPartial {
  TestAllTypesLiteNestedMessage* returnMe = resultNestedMessage;
  self.resultNestedMessage = nil;
  return returnMe;
}
- (TestAllTypesLiteNestedMessageBuilder*) mergeFrom:(TestAllTypesLiteNestedMessage*) other {
  if (other == [TestAllTypesLiteNestedMessage defaultInstance]) {
    return self;
  }
  if (other.hasBb) {
    [self setBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesLiteNestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesLiteNestedMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setBb:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasBb {
  return resultNestedMessage.hasBb;
}
- (SInt32) bb {
  return resultNestedMessage.bb;
}
- (TestAllTypesLiteNestedMessageBuilder*) setBb:(SInt32) value {
  resultNestedMessage.hasBb = YES;
  resultNestedMessage.bb = value;
  return self;
}
- (TestAllTypesLiteNestedMessageBuilder*) clearBb {
  resultNestedMessage.hasBb = NO;
  resultNestedMessage.bb = 0;
  return self;
}
@end

@interface TestAllTypesLiteOptionalGroup ()
@property SInt32 a;
@end

@implementation TestAllTypesLiteOptionalGroup

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static TestAllTypesLiteOptionalGroup* defaultTestAllTypesLiteOptionalGroupInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypesLiteOptionalGroup class]) {
    defaultTestAllTypesLiteOptionalGroupInstance = [[TestAllTypesLiteOptionalGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesLiteOptionalGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesLiteOptionalGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:17 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(17, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypesLiteOptionalGroup*) parseFromData:(NSData*) data {
  return (TestAllTypesLiteOptionalGroup*)[[[TestAllTypesLiteOptionalGroup builder] mergeFromData:data] build];
}
+ (TestAllTypesLiteOptionalGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLiteOptionalGroup*)[[[TestAllTypesLiteOptionalGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLiteOptionalGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypesLiteOptionalGroup*)[[[TestAllTypesLiteOptionalGroup builder] mergeFromInputStream:input] build];
}
+ (TestAllTypesLiteOptionalGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLiteOptionalGroup*)[[[TestAllTypesLiteOptionalGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLiteOptionalGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypesLiteOptionalGroup*)[[[TestAllTypesLiteOptionalGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypesLiteOptionalGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLiteOptionalGroup*)[[[TestAllTypesLiteOptionalGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLiteOptionalGroupBuilder*) builder {
  return [[TestAllTypesLiteOptionalGroupBuilder alloc] init];
}
+ (TestAllTypesLiteOptionalGroupBuilder*) builderWithPrototype:(TestAllTypesLiteOptionalGroup*) prototype {
  return [[TestAllTypesLiteOptionalGroup builder] mergeFrom:prototype];
}
- (TestAllTypesLiteOptionalGroupBuilder*) builder {
  return [TestAllTypesLiteOptionalGroup builder];
}
- (TestAllTypesLiteOptionalGroupBuilder*) toBuilder {
  return [TestAllTypesLiteOptionalGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesLiteOptionalGroup class]]) {
    return NO;
  }
  TestAllTypesLiteOptionalGroup *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestAllTypesLiteOptionalGroupBuilder()
@property (strong) TestAllTypesLiteOptionalGroup* resultOptionalGroup;
@end

@implementation TestAllTypesLiteOptionalGroupBuilder
@synthesize resultOptionalGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOptionalGroup = [[TestAllTypesLiteOptionalGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOptionalGroup;
}
- (TestAllTypesLiteOptionalGroupBuilder*) clear {
  self.resultOptionalGroup = [[TestAllTypesLiteOptionalGroup alloc] init];
  return self;
}
- (TestAllTypesLiteOptionalGroupBuilder*) clone {
  return [TestAllTypesLiteOptionalGroup builderWithPrototype:resultOptionalGroup];
}
- (TestAllTypesLiteOptionalGroup*) defaultInstance {
  return [TestAllTypesLiteOptionalGroup defaultInstance];
}
- (TestAllTypesLiteOptionalGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypesLiteOptionalGroup*) buildPartial {
  TestAllTypesLiteOptionalGroup* returnMe = resultOptionalGroup;
  self.resultOptionalGroup = nil;
  return returnMe;
}
- (TestAllTypesLiteOptionalGroupBuilder*) mergeFrom:(TestAllTypesLiteOptionalGroup*) other {
  if (other == [TestAllTypesLiteOptionalGroup defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesLiteOptionalGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesLiteOptionalGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 136: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultOptionalGroup.hasA;
}
- (SInt32) a {
  return resultOptionalGroup.a;
}
- (TestAllTypesLiteOptionalGroupBuilder*) setA:(SInt32) value {
  resultOptionalGroup.hasA = YES;
  resultOptionalGroup.a = value;
  return self;
}
- (TestAllTypesLiteOptionalGroupBuilder*) clearA {
  resultOptionalGroup.hasA = NO;
  resultOptionalGroup.a = 0;
  return self;
}
@end

@interface TestAllTypesLiteRepeatedGroup ()
@property SInt32 a;
@end

@implementation TestAllTypesLiteRepeatedGroup

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static TestAllTypesLiteRepeatedGroup* defaultTestAllTypesLiteRepeatedGroupInstance = nil;
+ (void) initialize {
  if (self == [TestAllTypesLiteRepeatedGroup class]) {
    defaultTestAllTypesLiteRepeatedGroupInstance = [[TestAllTypesLiteRepeatedGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllTypesLiteRepeatedGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllTypesLiteRepeatedGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:47 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(47, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllTypesLiteRepeatedGroup*) parseFromData:(NSData*) data {
  return (TestAllTypesLiteRepeatedGroup*)[[[TestAllTypesLiteRepeatedGroup builder] mergeFromData:data] build];
}
+ (TestAllTypesLiteRepeatedGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLiteRepeatedGroup*)[[[TestAllTypesLiteRepeatedGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLiteRepeatedGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllTypesLiteRepeatedGroup*)[[[TestAllTypesLiteRepeatedGroup builder] mergeFromInputStream:input] build];
}
+ (TestAllTypesLiteRepeatedGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLiteRepeatedGroup*)[[[TestAllTypesLiteRepeatedGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLiteRepeatedGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllTypesLiteRepeatedGroup*)[[[TestAllTypesLiteRepeatedGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllTypesLiteRepeatedGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllTypesLiteRepeatedGroup*)[[[TestAllTypesLiteRepeatedGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllTypesLiteRepeatedGroupBuilder*) builder {
  return [[TestAllTypesLiteRepeatedGroupBuilder alloc] init];
}
+ (TestAllTypesLiteRepeatedGroupBuilder*) builderWithPrototype:(TestAllTypesLiteRepeatedGroup*) prototype {
  return [[TestAllTypesLiteRepeatedGroup builder] mergeFrom:prototype];
}
- (TestAllTypesLiteRepeatedGroupBuilder*) builder {
  return [TestAllTypesLiteRepeatedGroup builder];
}
- (TestAllTypesLiteRepeatedGroupBuilder*) toBuilder {
  return [TestAllTypesLiteRepeatedGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypesLiteRepeatedGroup class]]) {
    return NO;
  }
  TestAllTypesLiteRepeatedGroup *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestAllTypesLiteRepeatedGroupBuilder()
@property (strong) TestAllTypesLiteRepeatedGroup* resultRepeatedGroup;
@end

@implementation TestAllTypesLiteRepeatedGroupBuilder
@synthesize resultRepeatedGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepeatedGroup = [[TestAllTypesLiteRepeatedGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepeatedGroup;
}
- (TestAllTypesLiteRepeatedGroupBuilder*) clear {
  self.resultRepeatedGroup = [[TestAllTypesLiteRepeatedGroup alloc] init];
  return self;
}
- (TestAllTypesLiteRepeatedGroupBuilder*) clone {
  return [TestAllTypesLiteRepeatedGroup builderWithPrototype:resultRepeatedGroup];
}
- (TestAllTypesLiteRepeatedGroup*) defaultInstance {
  return [TestAllTypesLiteRepeatedGroup defaultInstance];
}
- (TestAllTypesLiteRepeatedGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypesLiteRepeatedGroup*) buildPartial {
  TestAllTypesLiteRepeatedGroup* returnMe = resultRepeatedGroup;
  self.resultRepeatedGroup = nil;
  return returnMe;
}
- (TestAllTypesLiteRepeatedGroupBuilder*) mergeFrom:(TestAllTypesLiteRepeatedGroup*) other {
  if (other == [TestAllTypesLiteRepeatedGroup defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesLiteRepeatedGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesLiteRepeatedGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 376: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultRepeatedGroup.hasA;
}
- (SInt32) a {
  return resultRepeatedGroup.a;
}
- (TestAllTypesLiteRepeatedGroupBuilder*) setA:(SInt32) value {
  resultRepeatedGroup.hasA = YES;
  resultRepeatedGroup.a = value;
  return self;
}
- (TestAllTypesLiteRepeatedGroupBuilder*) clearA {
  resultRepeatedGroup.hasA = NO;
  resultRepeatedGroup.a = 0;
  return self;
}
@end

@interface TestAllTypesLiteBuilder()
@property (strong) TestAllTypesLite* resultTestAllTypesLite;
@end

@implementation TestAllTypesLiteBuilder
@synthesize resultTestAllTypesLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestAllTypesLite = [[TestAllTypesLite alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestAllTypesLite;
}
- (TestAllTypesLiteBuilder*) clear {
  self.resultTestAllTypesLite = [[TestAllTypesLite alloc] init];
  return self;
}
- (TestAllTypesLiteBuilder*) clone {
  return [TestAllTypesLite builderWithPrototype:resultTestAllTypesLite];
}
- (TestAllTypesLite*) defaultInstance {
  return [TestAllTypesLite defaultInstance];
}
- (TestAllTypesLite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypesLite*) buildPartial {
  TestAllTypesLite* returnMe = resultTestAllTypesLite;
  self.resultTestAllTypesLite = nil;
  return returnMe;
}
- (TestAllTypesLiteBuilder*) mergeFrom:(TestAllTypesLite*) other {
  if (other == [TestAllTypesLite defaultInstance]) {
    return self;
  }
  if (other.hasOptionalInt32) {
    [self setOptionalInt32:other.optionalInt32];
  }
  if (other.hasOptionalInt64) {
    [self setOptionalInt64:other.optionalInt64];
  }
  if (other.hasOptionalUint32) {
    [self setOptionalUint32:other.optionalUint32];
  }
  if (other.hasOptionalUint64) {
    [self setOptionalUint64:other.optionalUint64];
  }
  if (other.hasOptionalSint32) {
    [self setOptionalSint32:other.optionalSint32];
  }
  if (other.hasOptionalSint64) {
    [self setOptionalSint64:other.optionalSint64];
  }
  if (other.hasOptionalFixed32) {
    [self setOptionalFixed32:other.optionalFixed32];
  }
  if (other.hasOptionalFixed64) {
    [self setOptionalFixed64:other.optionalFixed64];
  }
  if (other.hasOptionalSfixed32) {
    [self setOptionalSfixed32:other.optionalSfixed32];
  }
  if (other.hasOptionalSfixed64) {
    [self setOptionalSfixed64:other.optionalSfixed64];
  }
  if (other.hasOptionalFloat) {
    [self setOptionalFloat:other.optionalFloat];
  }
  if (other.hasOptionalDouble) {
    [self setOptionalDouble:other.optionalDouble];
  }
  if (other.hasOptionalBool) {
    [self setOptionalBool:other.optionalBool];
  }
  if (other.hasOptionalString) {
    [self setOptionalString:other.optionalString];
  }
  if (other.hasOptionalBytes) {
    [self setOptionalBytes:other.optionalBytes];
  }
  if (other.hasOptionalGroup) {
    [self mergeOptionalGroup:other.optionalGroup];
  }
  if (other.hasOptionalNestedMessage) {
    [self mergeOptionalNestedMessage:other.optionalNestedMessage];
  }
  if (other.hasOptionalForeignMessage) {
    [self mergeOptionalForeignMessage:other.optionalForeignMessage];
  }
  if (other.hasOptionalImportMessage) {
    [self mergeOptionalImportMessage:other.optionalImportMessage];
  }
  if (other.hasOptionalNestedEnum) {
    [self setOptionalNestedEnum:other.optionalNestedEnum];
  }
  if (other.hasOptionalForeignEnum) {
    [self setOptionalForeignEnum:other.optionalForeignEnum];
  }
  if (other.hasOptionalImportEnum) {
    [self setOptionalImportEnum:other.optionalImportEnum];
  }
  if (other.hasOptionalStringPiece) {
    [self setOptionalStringPiece:other.optionalStringPiece];
  }
  if (other.hasOptionalCord) {
    [self setOptionalCord:other.optionalCord];
  }
  if (other.hasOptionalPublicImportMessage) {
    [self mergeOptionalPublicImportMessage:other.optionalPublicImportMessage];
  }
  if (other.hasOptionalLazyMessage) {
    [self mergeOptionalLazyMessage:other.optionalLazyMessage];
  }
  if (other.repeatedInt32Array.count > 0) {
    if (resultTestAllTypesLite.repeatedInt32Array == nil) {
      resultTestAllTypesLite.repeatedInt32Array = [other.repeatedInt32Array copy];
    } else {
      [resultTestAllTypesLite.repeatedInt32Array appendArray:other.repeatedInt32Array];
    }
  }
  if (other.repeatedInt64Array.count > 0) {
    if (resultTestAllTypesLite.repeatedInt64Array == nil) {
      resultTestAllTypesLite.repeatedInt64Array = [other.repeatedInt64Array copy];
    } else {
      [resultTestAllTypesLite.repeatedInt64Array appendArray:other.repeatedInt64Array];
    }
  }
  if (other.repeatedUint32Array.count > 0) {
    if (resultTestAllTypesLite.repeatedUint32Array == nil) {
      resultTestAllTypesLite.repeatedUint32Array = [other.repeatedUint32Array copy];
    } else {
      [resultTestAllTypesLite.repeatedUint32Array appendArray:other.repeatedUint32Array];
    }
  }
  if (other.repeatedUint64Array.count > 0) {
    if (resultTestAllTypesLite.repeatedUint64Array == nil) {
      resultTestAllTypesLite.repeatedUint64Array = [other.repeatedUint64Array copy];
    } else {
      [resultTestAllTypesLite.repeatedUint64Array appendArray:other.repeatedUint64Array];
    }
  }
  if (other.repeatedSint32Array.count > 0) {
    if (resultTestAllTypesLite.repeatedSint32Array == nil) {
      resultTestAllTypesLite.repeatedSint32Array = [other.repeatedSint32Array copy];
    } else {
      [resultTestAllTypesLite.repeatedSint32Array appendArray:other.repeatedSint32Array];
    }
  }
  if (other.repeatedSint64Array.count > 0) {
    if (resultTestAllTypesLite.repeatedSint64Array == nil) {
      resultTestAllTypesLite.repeatedSint64Array = [other.repeatedSint64Array copy];
    } else {
      [resultTestAllTypesLite.repeatedSint64Array appendArray:other.repeatedSint64Array];
    }
  }
  if (other.repeatedFixed32Array.count > 0) {
    if (resultTestAllTypesLite.repeatedFixed32Array == nil) {
      resultTestAllTypesLite.repeatedFixed32Array = [other.repeatedFixed32Array copy];
    } else {
      [resultTestAllTypesLite.repeatedFixed32Array appendArray:other.repeatedFixed32Array];
    }
  }
  if (other.repeatedFixed64Array.count > 0) {
    if (resultTestAllTypesLite.repeatedFixed64Array == nil) {
      resultTestAllTypesLite.repeatedFixed64Array = [other.repeatedFixed64Array copy];
    } else {
      [resultTestAllTypesLite.repeatedFixed64Array appendArray:other.repeatedFixed64Array];
    }
  }
  if (other.repeatedSfixed32Array.count > 0) {
    if (resultTestAllTypesLite.repeatedSfixed32Array == nil) {
      resultTestAllTypesLite.repeatedSfixed32Array = [other.repeatedSfixed32Array copy];
    } else {
      [resultTestAllTypesLite.repeatedSfixed32Array appendArray:other.repeatedSfixed32Array];
    }
  }
  if (other.repeatedSfixed64Array.count > 0) {
    if (resultTestAllTypesLite.repeatedSfixed64Array == nil) {
      resultTestAllTypesLite.repeatedSfixed64Array = [other.repeatedSfixed64Array copy];
    } else {
      [resultTestAllTypesLite.repeatedSfixed64Array appendArray:other.repeatedSfixed64Array];
    }
  }
  if (other.repeatedFloatArray.count > 0) {
    if (resultTestAllTypesLite.repeatedFloatArray == nil) {
      resultTestAllTypesLite.repeatedFloatArray = [other.repeatedFloatArray copy];
    } else {
      [resultTestAllTypesLite.repeatedFloatArray appendArray:other.repeatedFloatArray];
    }
  }
  if (other.repeatedDoubleArray.count > 0) {
    if (resultTestAllTypesLite.repeatedDoubleArray == nil) {
      resultTestAllTypesLite.repeatedDoubleArray = [other.repeatedDoubleArray copy];
    } else {
      [resultTestAllTypesLite.repeatedDoubleArray appendArray:other.repeatedDoubleArray];
    }
  }
  if (other.repeatedBoolArray.count > 0) {
    if (resultTestAllTypesLite.repeatedBoolArray == nil) {
      resultTestAllTypesLite.repeatedBoolArray = [other.repeatedBoolArray copy];
    } else {
      [resultTestAllTypesLite.repeatedBoolArray appendArray:other.repeatedBoolArray];
    }
  }
  if (other.repeatedStringArray.count > 0) {
    if (resultTestAllTypesLite.repeatedStringArray == nil) {
      resultTestAllTypesLite.repeatedStringArray = [[NSMutableArray alloc] initWithArray:other.repeatedStringArray];
    } else {
      [resultTestAllTypesLite.repeatedStringArray addObjectsFromArray:other.repeatedStringArray];
    }
  }
  if (other.repeatedBytesArray.count > 0) {
    if (resultTestAllTypesLite.repeatedBytesArray == nil) {
      resultTestAllTypesLite.repeatedBytesArray = [[NSMutableArray alloc] initWithArray:other.repeatedBytesArray];
    } else {
      [resultTestAllTypesLite.repeatedBytesArray addObjectsFromArray:other.repeatedBytesArray];
    }
  }
  if (other.repeatedGroupArray.count > 0) {
    if (resultTestAllTypesLite.repeatedGroupArray == nil) {
      resultTestAllTypesLite.repeatedGroupArray = [[NSMutableArray alloc] initWithArray:other.repeatedGroupArray];
    } else {
      [resultTestAllTypesLite.repeatedGroupArray addObjectsFromArray:other.repeatedGroupArray];
    }
  }
  if (other.repeatedNestedMessageArray.count > 0) {
    if (resultTestAllTypesLite.repeatedNestedMessageArray == nil) {
      resultTestAllTypesLite.repeatedNestedMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedNestedMessageArray];
    } else {
      [resultTestAllTypesLite.repeatedNestedMessageArray addObjectsFromArray:other.repeatedNestedMessageArray];
    }
  }
  if (other.repeatedForeignMessageArray.count > 0) {
    if (resultTestAllTypesLite.repeatedForeignMessageArray == nil) {
      resultTestAllTypesLite.repeatedForeignMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedForeignMessageArray];
    } else {
      [resultTestAllTypesLite.repeatedForeignMessageArray addObjectsFromArray:other.repeatedForeignMessageArray];
    }
  }
  if (other.repeatedImportMessageArray.count > 0) {
    if (resultTestAllTypesLite.repeatedImportMessageArray == nil) {
      resultTestAllTypesLite.repeatedImportMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedImportMessageArray];
    } else {
      [resultTestAllTypesLite.repeatedImportMessageArray addObjectsFromArray:other.repeatedImportMessageArray];
    }
  }
  if (other.repeatedNestedEnumArray.count > 0) {
    if (resultTestAllTypesLite.repeatedNestedEnumArray == nil) {
      resultTestAllTypesLite.repeatedNestedEnumArray = [other.repeatedNestedEnumArray copy];
    } else {
      [resultTestAllTypesLite.repeatedNestedEnumArray appendArray:other.repeatedNestedEnumArray];
    }
  }
  if (other.repeatedForeignEnumArray.count > 0) {
    if (resultTestAllTypesLite.repeatedForeignEnumArray == nil) {
      resultTestAllTypesLite.repeatedForeignEnumArray = [other.repeatedForeignEnumArray copy];
    } else {
      [resultTestAllTypesLite.repeatedForeignEnumArray appendArray:other.repeatedForeignEnumArray];
    }
  }
  if (other.repeatedImportEnumArray.count > 0) {
    if (resultTestAllTypesLite.repeatedImportEnumArray == nil) {
      resultTestAllTypesLite.repeatedImportEnumArray = [other.repeatedImportEnumArray copy];
    } else {
      [resultTestAllTypesLite.repeatedImportEnumArray appendArray:other.repeatedImportEnumArray];
    }
  }
  if (other.repeatedStringPieceArray.count > 0) {
    if (resultTestAllTypesLite.repeatedStringPieceArray == nil) {
      resultTestAllTypesLite.repeatedStringPieceArray = [[NSMutableArray alloc] initWithArray:other.repeatedStringPieceArray];
    } else {
      [resultTestAllTypesLite.repeatedStringPieceArray addObjectsFromArray:other.repeatedStringPieceArray];
    }
  }
  if (other.repeatedCordArray.count > 0) {
    if (resultTestAllTypesLite.repeatedCordArray == nil) {
      resultTestAllTypesLite.repeatedCordArray = [[NSMutableArray alloc] initWithArray:other.repeatedCordArray];
    } else {
      [resultTestAllTypesLite.repeatedCordArray addObjectsFromArray:other.repeatedCordArray];
    }
  }
  if (other.repeatedLazyMessageArray.count > 0) {
    if (resultTestAllTypesLite.repeatedLazyMessageArray == nil) {
      resultTestAllTypesLite.repeatedLazyMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedLazyMessageArray];
    } else {
      [resultTestAllTypesLite.repeatedLazyMessageArray addObjectsFromArray:other.repeatedLazyMessageArray];
    }
  }
  if (other.hasDefaultInt32) {
    [self setDefaultInt32:other.defaultInt32];
  }
  if (other.hasDefaultInt64) {
    [self setDefaultInt64:other.defaultInt64];
  }
  if (other.hasDefaultUint32) {
    [self setDefaultUint32:other.defaultUint32];
  }
  if (other.hasDefaultUint64) {
    [self setDefaultUint64:other.defaultUint64];
  }
  if (other.hasDefaultSint32) {
    [self setDefaultSint32:other.defaultSint32];
  }
  if (other.hasDefaultSint64) {
    [self setDefaultSint64:other.defaultSint64];
  }
  if (other.hasDefaultFixed32) {
    [self setDefaultFixed32:other.defaultFixed32];
  }
  if (other.hasDefaultFixed64) {
    [self setDefaultFixed64:other.defaultFixed64];
  }
  if (other.hasDefaultSfixed32) {
    [self setDefaultSfixed32:other.defaultSfixed32];
  }
  if (other.hasDefaultSfixed64) {
    [self setDefaultSfixed64:other.defaultSfixed64];
  }
  if (other.hasDefaultFloat) {
    [self setDefaultFloat:other.defaultFloat];
  }
  if (other.hasDefaultDouble) {
    [self setDefaultDouble:other.defaultDouble];
  }
  if (other.hasDefaultBool) {
    [self setDefaultBool:other.defaultBool];
  }
  if (other.hasDefaultString) {
    [self setDefaultString:other.defaultString];
  }
  if (other.hasDefaultBytes) {
    [self setDefaultBytes:other.defaultBytes];
  }
  if (other.hasDefaultNestedEnum) {
    [self setDefaultNestedEnum:other.defaultNestedEnum];
  }
  if (other.hasDefaultForeignEnum) {
    [self setDefaultForeignEnum:other.defaultForeignEnum];
  }
  if (other.hasDefaultImportEnum) {
    [self setDefaultImportEnum:other.defaultImportEnum];
  }
  if (other.hasDefaultStringPiece) {
    [self setDefaultStringPiece:other.defaultStringPiece];
  }
  if (other.hasDefaultCord) {
    [self setDefaultCord:other.defaultCord];
  }
  if (other.hasOneofUint32) {
    [self setOneofUint32:other.oneofUint32];
  }
  if (other.hasOneofNestedMessage) {
    [self mergeOneofNestedMessage:other.oneofNestedMessage];
  }
  if (other.hasOneofString) {
    [self setOneofString:other.oneofString];
  }
  if (other.hasOneofBytes) {
    [self setOneofBytes:other.oneofBytes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllTypesLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllTypesLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOptionalInt32:[input readInt32]];
        break;
      }
      case 16: {
        [self setOptionalInt64:[input readInt64]];
        break;
      }
      case 24: {
        [self setOptionalUint32:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOptionalUint64:[input readUInt64]];
        break;
      }
      case 40: {
        [self setOptionalSint32:[input readSInt32]];
        break;
      }
      case 48: {
        [self setOptionalSint64:[input readSInt64]];
        break;
      }
      case 61: {
        [self setOptionalFixed32:[input readFixed32]];
        break;
      }
      case 65: {
        [self setOptionalFixed64:[input readFixed64]];
        break;
      }
      case 77: {
        [self setOptionalSfixed32:[input readSFixed32]];
        break;
      }
      case 81: {
        [self setOptionalSfixed64:[input readSFixed64]];
        break;
      }
      case 93: {
        [self setOptionalFloat:[input readFloat]];
        break;
      }
      case 97: {
        [self setOptionalDouble:[input readDouble]];
        break;
      }
      case 104: {
        [self setOptionalBool:[input readBool]];
        break;
      }
      case 114: {
        [self setOptionalString:[input readString]];
        break;
      }
      case 122: {
        [self setOptionalBytes:[input readData]];
        break;
      }
      case 131: {
        TestAllTypesLiteOptionalGroupBuilder* subBuilder = [TestAllTypesLiteOptionalGroup builder];
        if (self.hasOptionalGroup) {
          [subBuilder mergeFrom:self.optionalGroup];
        }
        [input readGroup:16 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroup:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        TestAllTypesLiteNestedMessageBuilder* subBuilder = [TestAllTypesLiteNestedMessage builder];
        if (self.hasOptionalNestedMessage) {
          [subBuilder mergeFrom:self.optionalNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        ForeignMessageLiteBuilder* subBuilder = [ForeignMessageLite builder];
        if (self.hasOptionalForeignMessage) {
          [subBuilder mergeFrom:self.optionalForeignMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalForeignMessage:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        ImportMessageLiteBuilder* subBuilder = [ImportMessageLite builder];
        if (self.hasOptionalImportMessage) {
          [subBuilder mergeFrom:self.optionalImportMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 168: {
        TestAllTypesLiteNestedEnum value = (TestAllTypesLiteNestedEnum)[input readEnum];
        if (TestAllTypesLiteNestedEnumIsValidValue(value)) {
          [self setOptionalNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:21 value:value];
        }
        break;
      }
      case 176: {
        ForeignEnumLite value = (ForeignEnumLite)[input readEnum];
        if (ForeignEnumLiteIsValidValue(value)) {
          [self setOptionalForeignEnum:value];
        } else {
          [unknownFields mergeVarintField:22 value:value];
        }
        break;
      }
      case 184: {
        ImportEnumLite value = (ImportEnumLite)[input readEnum];
        if (ImportEnumLiteIsValidValue(value)) {
          [self setOptionalImportEnum:value];
        } else {
          [unknownFields mergeVarintField:23 value:value];
        }
        break;
      }
      case 194: {
        [self setOptionalStringPiece:[input readString]];
        break;
      }
      case 202: {
        [self setOptionalCord:[input readString]];
        break;
      }
      case 210: {
        PublicImportMessageLiteBuilder* subBuilder = [PublicImportMessageLite builder];
        if (self.hasOptionalPublicImportMessage) {
          [subBuilder mergeFrom:self.optionalPublicImportMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalPublicImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 218: {
        TestAllTypesLiteNestedMessageBuilder* subBuilder = [TestAllTypesLiteNestedMessage builder];
        if (self.hasOptionalLazyMessage) {
          [subBuilder mergeFrom:self.optionalLazyMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalLazyMessage:[subBuilder buildPartial]];
        break;
      }
      case 248: {
        [self addRepeatedInt32:[input readInt32]];
        break;
      }
      case 256: {
        [self addRepeatedInt64:[input readInt64]];
        break;
      }
      case 264: {
        [self addRepeatedUint32:[input readUInt32]];
        break;
      }
      case 272: {
        [self addRepeatedUint64:[input readUInt64]];
        break;
      }
      case 280: {
        [self addRepeatedSint32:[input readSInt32]];
        break;
      }
      case 288: {
        [self addRepeatedSint64:[input readSInt64]];
        break;
      }
      case 301: {
        [self addRepeatedFixed32:[input readFixed32]];
        break;
      }
      case 305: {
        [self addRepeatedFixed64:[input readFixed64]];
        break;
      }
      case 317: {
        [self addRepeatedSfixed32:[input readSFixed32]];
        break;
      }
      case 321: {
        [self addRepeatedSfixed64:[input readSFixed64]];
        break;
      }
      case 333: {
        [self addRepeatedFloat:[input readFloat]];
        break;
      }
      case 337: {
        [self addRepeatedDouble:[input readDouble]];
        break;
      }
      case 344: {
        [self addRepeatedBool:[input readBool]];
        break;
      }
      case 354: {
        [self addRepeatedString:[input readString]];
        break;
      }
      case 362: {
        [self addRepeatedBytes:[input readData]];
        break;
      }
      case 371: {
        TestAllTypesLiteRepeatedGroupBuilder* subBuilder = [TestAllTypesLiteRepeatedGroup builder];
        [input readGroup:46 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedGroup:[subBuilder buildPartial]];
        break;
      }
      case 386: {
        TestAllTypesLiteNestedMessageBuilder* subBuilder = [TestAllTypesLiteNestedMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 394: {
        ForeignMessageLiteBuilder* subBuilder = [ForeignMessageLite builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedForeignMessage:[subBuilder buildPartial]];
        break;
      }
      case 402: {
        ImportMessageLiteBuilder* subBuilder = [ImportMessageLite builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 408: {
        TestAllTypesLiteNestedEnum value = (TestAllTypesLiteNestedEnum)[input readEnum];
        if (TestAllTypesLiteNestedEnumIsValidValue(value)) {
          [self addRepeatedNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:51 value:value];
        }
        break;
      }
      case 416: {
        ForeignEnumLite value = (ForeignEnumLite)[input readEnum];
        if (ForeignEnumLiteIsValidValue(value)) {
          [self addRepeatedForeignEnum:value];
        } else {
          [unknownFields mergeVarintField:52 value:value];
        }
        break;
      }
      case 424: {
        ImportEnumLite value = (ImportEnumLite)[input readEnum];
        if (ImportEnumLiteIsValidValue(value)) {
          [self addRepeatedImportEnum:value];
        } else {
          [unknownFields mergeVarintField:53 value:value];
        }
        break;
      }
      case 434: {
        [self addRepeatedStringPiece:[input readString]];
        break;
      }
      case 442: {
        [self addRepeatedCord:[input readString]];
        break;
      }
      case 458: {
        TestAllTypesLiteNestedMessageBuilder* subBuilder = [TestAllTypesLiteNestedMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedLazyMessage:[subBuilder buildPartial]];
        break;
      }
      case 488: {
        [self setDefaultInt32:[input readInt32]];
        break;
      }
      case 496: {
        [self setDefaultInt64:[input readInt64]];
        break;
      }
      case 504: {
        [self setDefaultUint32:[input readUInt32]];
        break;
      }
      case 512: {
        [self setDefaultUint64:[input readUInt64]];
        break;
      }
      case 520: {
        [self setDefaultSint32:[input readSInt32]];
        break;
      }
      case 528: {
        [self setDefaultSint64:[input readSInt64]];
        break;
      }
      case 541: {
        [self setDefaultFixed32:[input readFixed32]];
        break;
      }
      case 545: {
        [self setDefaultFixed64:[input readFixed64]];
        break;
      }
      case 557: {
        [self setDefaultSfixed32:[input readSFixed32]];
        break;
      }
      case 561: {
        [self setDefaultSfixed64:[input readSFixed64]];
        break;
      }
      case 573: {
        [self setDefaultFloat:[input readFloat]];
        break;
      }
      case 577: {
        [self setDefaultDouble:[input readDouble]];
        break;
      }
      case 584: {
        [self setDefaultBool:[input readBool]];
        break;
      }
      case 594: {
        [self setDefaultString:[input readString]];
        break;
      }
      case 602: {
        [self setDefaultBytes:[input readData]];
        break;
      }
      case 648: {
        TestAllTypesLiteNestedEnum value = (TestAllTypesLiteNestedEnum)[input readEnum];
        if (TestAllTypesLiteNestedEnumIsValidValue(value)) {
          [self setDefaultNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:81 value:value];
        }
        break;
      }
      case 656: {
        ForeignEnumLite value = (ForeignEnumLite)[input readEnum];
        if (ForeignEnumLiteIsValidValue(value)) {
          [self setDefaultForeignEnum:value];
        } else {
          [unknownFields mergeVarintField:82 value:value];
        }
        break;
      }
      case 664: {
        ImportEnumLite value = (ImportEnumLite)[input readEnum];
        if (ImportEnumLiteIsValidValue(value)) {
          [self setDefaultImportEnum:value];
        } else {
          [unknownFields mergeVarintField:83 value:value];
        }
        break;
      }
      case 674: {
        [self setDefaultStringPiece:[input readString]];
        break;
      }
      case 682: {
        [self setDefaultCord:[input readString]];
        break;
      }
      case 888: {
        [self setOneofUint32:[input readUInt32]];
        break;
      }
      case 898: {
        TestAllTypesLiteNestedMessageBuilder* subBuilder = [TestAllTypesLiteNestedMessage builder];
        if (self.hasOneofNestedMessage) {
          [subBuilder mergeFrom:self.oneofNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOneofNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 906: {
        [self setOneofString:[input readString]];
        break;
      }
      case 914: {
        [self setOneofBytes:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasOptionalInt32 {
  return resultTestAllTypesLite.hasOptionalInt32;
}
- (SInt32) optionalInt32 {
  return resultTestAllTypesLite.optionalInt32;
}
- (TestAllTypesLiteBuilder*) setOptionalInt32:(SInt32) value {
  resultTestAllTypesLite.hasOptionalInt32 = YES;
  resultTestAllTypesLite.optionalInt32 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalInt32 {
  resultTestAllTypesLite.hasOptionalInt32 = NO;
  resultTestAllTypesLite.optionalInt32 = 0;
  return self;
}
- (BOOL) hasOptionalInt64 {
  return resultTestAllTypesLite.hasOptionalInt64;
}
- (SInt64) optionalInt64 {
  return resultTestAllTypesLite.optionalInt64;
}
- (TestAllTypesLiteBuilder*) setOptionalInt64:(SInt64) value {
  resultTestAllTypesLite.hasOptionalInt64 = YES;
  resultTestAllTypesLite.optionalInt64 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalInt64 {
  resultTestAllTypesLite.hasOptionalInt64 = NO;
  resultTestAllTypesLite.optionalInt64 = 0L;
  return self;
}
- (BOOL) hasOptionalUint32 {
  return resultTestAllTypesLite.hasOptionalUint32;
}
- (UInt32) optionalUint32 {
  return resultTestAllTypesLite.optionalUint32;
}
- (TestAllTypesLiteBuilder*) setOptionalUint32:(UInt32) value {
  resultTestAllTypesLite.hasOptionalUint32 = YES;
  resultTestAllTypesLite.optionalUint32 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalUint32 {
  resultTestAllTypesLite.hasOptionalUint32 = NO;
  resultTestAllTypesLite.optionalUint32 = 0;
  return self;
}
- (BOOL) hasOptionalUint64 {
  return resultTestAllTypesLite.hasOptionalUint64;
}
- (UInt64) optionalUint64 {
  return resultTestAllTypesLite.optionalUint64;
}
- (TestAllTypesLiteBuilder*) setOptionalUint64:(UInt64) value {
  resultTestAllTypesLite.hasOptionalUint64 = YES;
  resultTestAllTypesLite.optionalUint64 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalUint64 {
  resultTestAllTypesLite.hasOptionalUint64 = NO;
  resultTestAllTypesLite.optionalUint64 = 0L;
  return self;
}
- (BOOL) hasOptionalSint32 {
  return resultTestAllTypesLite.hasOptionalSint32;
}
- (SInt32) optionalSint32 {
  return resultTestAllTypesLite.optionalSint32;
}
- (TestAllTypesLiteBuilder*) setOptionalSint32:(SInt32) value {
  resultTestAllTypesLite.hasOptionalSint32 = YES;
  resultTestAllTypesLite.optionalSint32 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalSint32 {
  resultTestAllTypesLite.hasOptionalSint32 = NO;
  resultTestAllTypesLite.optionalSint32 = 0;
  return self;
}
- (BOOL) hasOptionalSint64 {
  return resultTestAllTypesLite.hasOptionalSint64;
}
- (SInt64) optionalSint64 {
  return resultTestAllTypesLite.optionalSint64;
}
- (TestAllTypesLiteBuilder*) setOptionalSint64:(SInt64) value {
  resultTestAllTypesLite.hasOptionalSint64 = YES;
  resultTestAllTypesLite.optionalSint64 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalSint64 {
  resultTestAllTypesLite.hasOptionalSint64 = NO;
  resultTestAllTypesLite.optionalSint64 = 0L;
  return self;
}
- (BOOL) hasOptionalFixed32 {
  return resultTestAllTypesLite.hasOptionalFixed32;
}
- (UInt32) optionalFixed32 {
  return resultTestAllTypesLite.optionalFixed32;
}
- (TestAllTypesLiteBuilder*) setOptionalFixed32:(UInt32) value {
  resultTestAllTypesLite.hasOptionalFixed32 = YES;
  resultTestAllTypesLite.optionalFixed32 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalFixed32 {
  resultTestAllTypesLite.hasOptionalFixed32 = NO;
  resultTestAllTypesLite.optionalFixed32 = 0;
  return self;
}
- (BOOL) hasOptionalFixed64 {
  return resultTestAllTypesLite.hasOptionalFixed64;
}
- (UInt64) optionalFixed64 {
  return resultTestAllTypesLite.optionalFixed64;
}
- (TestAllTypesLiteBuilder*) setOptionalFixed64:(UInt64) value {
  resultTestAllTypesLite.hasOptionalFixed64 = YES;
  resultTestAllTypesLite.optionalFixed64 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalFixed64 {
  resultTestAllTypesLite.hasOptionalFixed64 = NO;
  resultTestAllTypesLite.optionalFixed64 = 0L;
  return self;
}
- (BOOL) hasOptionalSfixed32 {
  return resultTestAllTypesLite.hasOptionalSfixed32;
}
- (SInt32) optionalSfixed32 {
  return resultTestAllTypesLite.optionalSfixed32;
}
- (TestAllTypesLiteBuilder*) setOptionalSfixed32:(SInt32) value {
  resultTestAllTypesLite.hasOptionalSfixed32 = YES;
  resultTestAllTypesLite.optionalSfixed32 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalSfixed32 {
  resultTestAllTypesLite.hasOptionalSfixed32 = NO;
  resultTestAllTypesLite.optionalSfixed32 = 0;
  return self;
}
- (BOOL) hasOptionalSfixed64 {
  return resultTestAllTypesLite.hasOptionalSfixed64;
}
- (SInt64) optionalSfixed64 {
  return resultTestAllTypesLite.optionalSfixed64;
}
- (TestAllTypesLiteBuilder*) setOptionalSfixed64:(SInt64) value {
  resultTestAllTypesLite.hasOptionalSfixed64 = YES;
  resultTestAllTypesLite.optionalSfixed64 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalSfixed64 {
  resultTestAllTypesLite.hasOptionalSfixed64 = NO;
  resultTestAllTypesLite.optionalSfixed64 = 0L;
  return self;
}
- (BOOL) hasOptionalFloat {
  return resultTestAllTypesLite.hasOptionalFloat;
}
- (Float32) optionalFloat {
  return resultTestAllTypesLite.optionalFloat;
}
- (TestAllTypesLiteBuilder*) setOptionalFloat:(Float32) value {
  resultTestAllTypesLite.hasOptionalFloat = YES;
  resultTestAllTypesLite.optionalFloat = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalFloat {
  resultTestAllTypesLite.hasOptionalFloat = NO;
  resultTestAllTypesLite.optionalFloat = 0;
  return self;
}
- (BOOL) hasOptionalDouble {
  return resultTestAllTypesLite.hasOptionalDouble;
}
- (Float64) optionalDouble {
  return resultTestAllTypesLite.optionalDouble;
}
- (TestAllTypesLiteBuilder*) setOptionalDouble:(Float64) value {
  resultTestAllTypesLite.hasOptionalDouble = YES;
  resultTestAllTypesLite.optionalDouble = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalDouble {
  resultTestAllTypesLite.hasOptionalDouble = NO;
  resultTestAllTypesLite.optionalDouble = 0;
  return self;
}
- (BOOL) hasOptionalBool {
  return resultTestAllTypesLite.hasOptionalBool;
}
- (BOOL) optionalBool {
  return resultTestAllTypesLite.optionalBool;
}
- (TestAllTypesLiteBuilder*) setOptionalBool:(BOOL) value {
  resultTestAllTypesLite.hasOptionalBool = YES;
  resultTestAllTypesLite.optionalBool = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalBool {
  resultTestAllTypesLite.hasOptionalBool = NO;
  resultTestAllTypesLite.optionalBool = NO;
  return self;
}
- (BOOL) hasOptionalString {
  return resultTestAllTypesLite.hasOptionalString;
}
- (NSString*) optionalString {
  return resultTestAllTypesLite.optionalString;
}
- (TestAllTypesLiteBuilder*) setOptionalString:(NSString*) value {
  resultTestAllTypesLite.hasOptionalString = YES;
  resultTestAllTypesLite.optionalString = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalString {
  resultTestAllTypesLite.hasOptionalString = NO;
  resultTestAllTypesLite.optionalString = @"";
  return self;
}
- (BOOL) hasOptionalBytes {
  return resultTestAllTypesLite.hasOptionalBytes;
}
- (NSData*) optionalBytes {
  return resultTestAllTypesLite.optionalBytes;
}
- (TestAllTypesLiteBuilder*) setOptionalBytes:(NSData*) value {
  resultTestAllTypesLite.hasOptionalBytes = YES;
  resultTestAllTypesLite.optionalBytes = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalBytes {
  resultTestAllTypesLite.hasOptionalBytes = NO;
  resultTestAllTypesLite.optionalBytes = [NSData data];
  return self;
}
- (BOOL) hasOptionalGroup {
  return resultTestAllTypesLite.hasOptionalGroup;
}
- (TestAllTypesLiteOptionalGroup*) optionalGroup {
  return resultTestAllTypesLite.optionalGroup;
}
- (TestAllTypesLiteBuilder*) setOptionalGroup:(TestAllTypesLiteOptionalGroup*) value {
  resultTestAllTypesLite.hasOptionalGroup = YES;
  resultTestAllTypesLite.optionalGroup = value;
  return self;
}
- (TestAllTypesLiteBuilder*) setOptionalGroupBuilder:(TestAllTypesLiteOptionalGroupBuilder*) builderForValue {
  return [self setOptionalGroup:[builderForValue build]];
}
- (TestAllTypesLiteBuilder*) mergeOptionalGroup:(TestAllTypesLiteOptionalGroup*) value {
  if (resultTestAllTypesLite.hasOptionalGroup &&
      resultTestAllTypesLite.optionalGroup != [TestAllTypesLiteOptionalGroup defaultInstance]) {
    resultTestAllTypesLite.optionalGroup =
      [[[TestAllTypesLiteOptionalGroup builderWithPrototype:resultTestAllTypesLite.optionalGroup] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypesLite.optionalGroup = value;
  }
  resultTestAllTypesLite.hasOptionalGroup = YES;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalGroup {
  resultTestAllTypesLite.hasOptionalGroup = NO;
  resultTestAllTypesLite.optionalGroup = [TestAllTypesLiteOptionalGroup defaultInstance];
  return self;
}
- (BOOL) hasOptionalNestedMessage {
  return resultTestAllTypesLite.hasOptionalNestedMessage;
}
- (TestAllTypesLiteNestedMessage*) optionalNestedMessage {
  return resultTestAllTypesLite.optionalNestedMessage;
}
- (TestAllTypesLiteBuilder*) setOptionalNestedMessage:(TestAllTypesLiteNestedMessage*) value {
  resultTestAllTypesLite.hasOptionalNestedMessage = YES;
  resultTestAllTypesLite.optionalNestedMessage = value;
  return self;
}
- (TestAllTypesLiteBuilder*) setOptionalNestedMessageBuilder:(TestAllTypesLiteNestedMessageBuilder*) builderForValue {
  return [self setOptionalNestedMessage:[builderForValue build]];
}
- (TestAllTypesLiteBuilder*) mergeOptionalNestedMessage:(TestAllTypesLiteNestedMessage*) value {
  if (resultTestAllTypesLite.hasOptionalNestedMessage &&
      resultTestAllTypesLite.optionalNestedMessage != [TestAllTypesLiteNestedMessage defaultInstance]) {
    resultTestAllTypesLite.optionalNestedMessage =
      [[[TestAllTypesLiteNestedMessage builderWithPrototype:resultTestAllTypesLite.optionalNestedMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypesLite.optionalNestedMessage = value;
  }
  resultTestAllTypesLite.hasOptionalNestedMessage = YES;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalNestedMessage {
  resultTestAllTypesLite.hasOptionalNestedMessage = NO;
  resultTestAllTypesLite.optionalNestedMessage = [TestAllTypesLiteNestedMessage defaultInstance];
  return self;
}
- (BOOL) hasOptionalForeignMessage {
  return resultTestAllTypesLite.hasOptionalForeignMessage;
}
- (ForeignMessageLite*) optionalForeignMessage {
  return resultTestAllTypesLite.optionalForeignMessage;
}
- (TestAllTypesLiteBuilder*) setOptionalForeignMessage:(ForeignMessageLite*) value {
  resultTestAllTypesLite.hasOptionalForeignMessage = YES;
  resultTestAllTypesLite.optionalForeignMessage = value;
  return self;
}
- (TestAllTypesLiteBuilder*) setOptionalForeignMessageBuilder:(ForeignMessageLiteBuilder*) builderForValue {
  return [self setOptionalForeignMessage:[builderForValue build]];
}
- (TestAllTypesLiteBuilder*) mergeOptionalForeignMessage:(ForeignMessageLite*) value {
  if (resultTestAllTypesLite.hasOptionalForeignMessage &&
      resultTestAllTypesLite.optionalForeignMessage != [ForeignMessageLite defaultInstance]) {
    resultTestAllTypesLite.optionalForeignMessage =
      [[[ForeignMessageLite builderWithPrototype:resultTestAllTypesLite.optionalForeignMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypesLite.optionalForeignMessage = value;
  }
  resultTestAllTypesLite.hasOptionalForeignMessage = YES;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalForeignMessage {
  resultTestAllTypesLite.hasOptionalForeignMessage = NO;
  resultTestAllTypesLite.optionalForeignMessage = [ForeignMessageLite defaultInstance];
  return self;
}
- (BOOL) hasOptionalImportMessage {
  return resultTestAllTypesLite.hasOptionalImportMessage;
}
- (ImportMessageLite*) optionalImportMessage {
  return resultTestAllTypesLite.optionalImportMessage;
}
- (TestAllTypesLiteBuilder*) setOptionalImportMessage:(ImportMessageLite*) value {
  resultTestAllTypesLite.hasOptionalImportMessage = YES;
  resultTestAllTypesLite.optionalImportMessage = value;
  return self;
}
- (TestAllTypesLiteBuilder*) setOptionalImportMessageBuilder:(ImportMessageLiteBuilder*) builderForValue {
  return [self setOptionalImportMessage:[builderForValue build]];
}
- (TestAllTypesLiteBuilder*) mergeOptionalImportMessage:(ImportMessageLite*) value {
  if (resultTestAllTypesLite.hasOptionalImportMessage &&
      resultTestAllTypesLite.optionalImportMessage != [ImportMessageLite defaultInstance]) {
    resultTestAllTypesLite.optionalImportMessage =
      [[[ImportMessageLite builderWithPrototype:resultTestAllTypesLite.optionalImportMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypesLite.optionalImportMessage = value;
  }
  resultTestAllTypesLite.hasOptionalImportMessage = YES;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalImportMessage {
  resultTestAllTypesLite.hasOptionalImportMessage = NO;
  resultTestAllTypesLite.optionalImportMessage = [ImportMessageLite defaultInstance];
  return self;
}
- (BOOL) hasOptionalNestedEnum {
  return resultTestAllTypesLite.hasOptionalNestedEnum;
}
- (TestAllTypesLiteNestedEnum) optionalNestedEnum {
  return resultTestAllTypesLite.optionalNestedEnum;
}
- (TestAllTypesLiteBuilder*) setOptionalNestedEnum:(TestAllTypesLiteNestedEnum) value {
  resultTestAllTypesLite.hasOptionalNestedEnum = YES;
  resultTestAllTypesLite.optionalNestedEnum = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalNestedEnum {
  resultTestAllTypesLite.hasOptionalNestedEnum = NO;
  resultTestAllTypesLite.optionalNestedEnum = TestAllTypesLiteNestedEnumFoo;
  return self;
}
- (BOOL) hasOptionalForeignEnum {
  return resultTestAllTypesLite.hasOptionalForeignEnum;
}
- (ForeignEnumLite) optionalForeignEnum {
  return resultTestAllTypesLite.optionalForeignEnum;
}
- (TestAllTypesLiteBuilder*) setOptionalForeignEnum:(ForeignEnumLite) value {
  resultTestAllTypesLite.hasOptionalForeignEnum = YES;
  resultTestAllTypesLite.optionalForeignEnum = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalForeignEnum {
  resultTestAllTypesLite.hasOptionalForeignEnum = NO;
  resultTestAllTypesLite.optionalForeignEnum = ForeignEnumLiteForeignLiteFoo;
  return self;
}
- (BOOL) hasOptionalImportEnum {
  return resultTestAllTypesLite.hasOptionalImportEnum;
}
- (ImportEnumLite) optionalImportEnum {
  return resultTestAllTypesLite.optionalImportEnum;
}
- (TestAllTypesLiteBuilder*) setOptionalImportEnum:(ImportEnumLite) value {
  resultTestAllTypesLite.hasOptionalImportEnum = YES;
  resultTestAllTypesLite.optionalImportEnum = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalImportEnum {
  resultTestAllTypesLite.hasOptionalImportEnum = NO;
  resultTestAllTypesLite.optionalImportEnum = ImportEnumLiteImportLiteFoo;
  return self;
}
- (BOOL) hasOptionalStringPiece {
  return resultTestAllTypesLite.hasOptionalStringPiece;
}
- (NSString*) optionalStringPiece {
  return resultTestAllTypesLite.optionalStringPiece;
}
- (TestAllTypesLiteBuilder*) setOptionalStringPiece:(NSString*) value {
  resultTestAllTypesLite.hasOptionalStringPiece = YES;
  resultTestAllTypesLite.optionalStringPiece = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalStringPiece {
  resultTestAllTypesLite.hasOptionalStringPiece = NO;
  resultTestAllTypesLite.optionalStringPiece = @"";
  return self;
}
- (BOOL) hasOptionalCord {
  return resultTestAllTypesLite.hasOptionalCord;
}
- (NSString*) optionalCord {
  return resultTestAllTypesLite.optionalCord;
}
- (TestAllTypesLiteBuilder*) setOptionalCord:(NSString*) value {
  resultTestAllTypesLite.hasOptionalCord = YES;
  resultTestAllTypesLite.optionalCord = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalCord {
  resultTestAllTypesLite.hasOptionalCord = NO;
  resultTestAllTypesLite.optionalCord = @"";
  return self;
}
- (BOOL) hasOptionalPublicImportMessage {
  return resultTestAllTypesLite.hasOptionalPublicImportMessage;
}
- (PublicImportMessageLite*) optionalPublicImportMessage {
  return resultTestAllTypesLite.optionalPublicImportMessage;
}
- (TestAllTypesLiteBuilder*) setOptionalPublicImportMessage:(PublicImportMessageLite*) value {
  resultTestAllTypesLite.hasOptionalPublicImportMessage = YES;
  resultTestAllTypesLite.optionalPublicImportMessage = value;
  return self;
}
- (TestAllTypesLiteBuilder*) setOptionalPublicImportMessageBuilder:(PublicImportMessageLiteBuilder*) builderForValue {
  return [self setOptionalPublicImportMessage:[builderForValue build]];
}
- (TestAllTypesLiteBuilder*) mergeOptionalPublicImportMessage:(PublicImportMessageLite*) value {
  if (resultTestAllTypesLite.hasOptionalPublicImportMessage &&
      resultTestAllTypesLite.optionalPublicImportMessage != [PublicImportMessageLite defaultInstance]) {
    resultTestAllTypesLite.optionalPublicImportMessage =
      [[[PublicImportMessageLite builderWithPrototype:resultTestAllTypesLite.optionalPublicImportMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypesLite.optionalPublicImportMessage = value;
  }
  resultTestAllTypesLite.hasOptionalPublicImportMessage = YES;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalPublicImportMessage {
  resultTestAllTypesLite.hasOptionalPublicImportMessage = NO;
  resultTestAllTypesLite.optionalPublicImportMessage = [PublicImportMessageLite defaultInstance];
  return self;
}
- (BOOL) hasOptionalLazyMessage {
  return resultTestAllTypesLite.hasOptionalLazyMessage;
}
- (TestAllTypesLiteNestedMessage*) optionalLazyMessage {
  return resultTestAllTypesLite.optionalLazyMessage;
}
- (TestAllTypesLiteBuilder*) setOptionalLazyMessage:(TestAllTypesLiteNestedMessage*) value {
  resultTestAllTypesLite.hasOptionalLazyMessage = YES;
  resultTestAllTypesLite.optionalLazyMessage = value;
  return self;
}
- (TestAllTypesLiteBuilder*) setOptionalLazyMessageBuilder:(TestAllTypesLiteNestedMessageBuilder*) builderForValue {
  return [self setOptionalLazyMessage:[builderForValue build]];
}
- (TestAllTypesLiteBuilder*) mergeOptionalLazyMessage:(TestAllTypesLiteNestedMessage*) value {
  if (resultTestAllTypesLite.hasOptionalLazyMessage &&
      resultTestAllTypesLite.optionalLazyMessage != [TestAllTypesLiteNestedMessage defaultInstance]) {
    resultTestAllTypesLite.optionalLazyMessage =
      [[[TestAllTypesLiteNestedMessage builderWithPrototype:resultTestAllTypesLite.optionalLazyMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypesLite.optionalLazyMessage = value;
  }
  resultTestAllTypesLite.hasOptionalLazyMessage = YES;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOptionalLazyMessage {
  resultTestAllTypesLite.hasOptionalLazyMessage = NO;
  resultTestAllTypesLite.optionalLazyMessage = [TestAllTypesLiteNestedMessage defaultInstance];
  return self;
}
- (PBAppendableArray *)repeatedInt32 {
  return resultTestAllTypesLite.repeatedInt32Array;
}
- (SInt32)repeatedInt32AtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedInt32AtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedInt32:(SInt32)value {
  if (resultTestAllTypesLite.repeatedInt32Array == nil) {
    resultTestAllTypesLite.repeatedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypesLite.repeatedInt32Array addInt32:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedInt32Array:(NSArray *)array {
  resultTestAllTypesLite.repeatedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedInt32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedInt32 {
  resultTestAllTypesLite.repeatedInt32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedInt64 {
  return resultTestAllTypesLite.repeatedInt64Array;
}
- (SInt64)repeatedInt64AtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedInt64AtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedInt64:(SInt64)value {
  if (resultTestAllTypesLite.repeatedInt64Array == nil) {
    resultTestAllTypesLite.repeatedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestAllTypesLite.repeatedInt64Array addInt64:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedInt64Array:(NSArray *)array {
  resultTestAllTypesLite.repeatedInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedInt64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedInt64 {
  resultTestAllTypesLite.repeatedInt64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedUint32 {
  return resultTestAllTypesLite.repeatedUint32Array;
}
- (UInt32)repeatedUint32AtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedUint32AtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedUint32:(UInt32)value {
  if (resultTestAllTypesLite.repeatedUint32Array == nil) {
    resultTestAllTypesLite.repeatedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestAllTypesLite.repeatedUint32Array addUint32:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedUint32Array:(NSArray *)array {
  resultTestAllTypesLite.repeatedUint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedUint32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedUint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedUint32 {
  resultTestAllTypesLite.repeatedUint32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedUint64 {
  return resultTestAllTypesLite.repeatedUint64Array;
}
- (UInt64)repeatedUint64AtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedUint64AtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedUint64:(UInt64)value {
  if (resultTestAllTypesLite.repeatedUint64Array == nil) {
    resultTestAllTypesLite.repeatedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestAllTypesLite.repeatedUint64Array addUint64:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedUint64Array:(NSArray *)array {
  resultTestAllTypesLite.repeatedUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedUint64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedUint64 {
  resultTestAllTypesLite.repeatedUint64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSint32 {
  return resultTestAllTypesLite.repeatedSint32Array;
}
- (SInt32)repeatedSint32AtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedSint32AtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedSint32:(SInt32)value {
  if (resultTestAllTypesLite.repeatedSint32Array == nil) {
    resultTestAllTypesLite.repeatedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypesLite.repeatedSint32Array addInt32:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedSint32Array:(NSArray *)array {
  resultTestAllTypesLite.repeatedSint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedSint32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedSint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedSint32 {
  resultTestAllTypesLite.repeatedSint32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSint64 {
  return resultTestAllTypesLite.repeatedSint64Array;
}
- (SInt64)repeatedSint64AtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedSint64AtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedSint64:(SInt64)value {
  if (resultTestAllTypesLite.repeatedSint64Array == nil) {
    resultTestAllTypesLite.repeatedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestAllTypesLite.repeatedSint64Array addInt64:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedSint64Array:(NSArray *)array {
  resultTestAllTypesLite.repeatedSint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedSint64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedSint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedSint64 {
  resultTestAllTypesLite.repeatedSint64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFixed32 {
  return resultTestAllTypesLite.repeatedFixed32Array;
}
- (UInt32)repeatedFixed32AtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedFixed32AtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedFixed32:(UInt32)value {
  if (resultTestAllTypesLite.repeatedFixed32Array == nil) {
    resultTestAllTypesLite.repeatedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestAllTypesLite.repeatedFixed32Array addUint32:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedFixed32Array:(NSArray *)array {
  resultTestAllTypesLite.repeatedFixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedFixed32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedFixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedFixed32 {
  resultTestAllTypesLite.repeatedFixed32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFixed64 {
  return resultTestAllTypesLite.repeatedFixed64Array;
}
- (UInt64)repeatedFixed64AtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedFixed64AtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedFixed64:(UInt64)value {
  if (resultTestAllTypesLite.repeatedFixed64Array == nil) {
    resultTestAllTypesLite.repeatedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestAllTypesLite.repeatedFixed64Array addUint64:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedFixed64Array:(NSArray *)array {
  resultTestAllTypesLite.repeatedFixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedFixed64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedFixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedFixed64 {
  resultTestAllTypesLite.repeatedFixed64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSfixed32 {
  return resultTestAllTypesLite.repeatedSfixed32Array;
}
- (SInt32)repeatedSfixed32AtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedSfixed32AtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedSfixed32:(SInt32)value {
  if (resultTestAllTypesLite.repeatedSfixed32Array == nil) {
    resultTestAllTypesLite.repeatedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypesLite.repeatedSfixed32Array addInt32:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedSfixed32Array:(NSArray *)array {
  resultTestAllTypesLite.repeatedSfixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedSfixed32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedSfixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedSfixed32 {
  resultTestAllTypesLite.repeatedSfixed32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSfixed64 {
  return resultTestAllTypesLite.repeatedSfixed64Array;
}
- (SInt64)repeatedSfixed64AtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedSfixed64AtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedSfixed64:(SInt64)value {
  if (resultTestAllTypesLite.repeatedSfixed64Array == nil) {
    resultTestAllTypesLite.repeatedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestAllTypesLite.repeatedSfixed64Array addInt64:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedSfixed64Array:(NSArray *)array {
  resultTestAllTypesLite.repeatedSfixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedSfixed64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedSfixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedSfixed64 {
  resultTestAllTypesLite.repeatedSfixed64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFloat {
  return resultTestAllTypesLite.repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedFloatAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedFloat:(Float32)value {
  if (resultTestAllTypesLite.repeatedFloatArray == nil) {
    resultTestAllTypesLite.repeatedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultTestAllTypesLite.repeatedFloatArray addFloat:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedFloatArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedFloat {
  resultTestAllTypesLite.repeatedFloatArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedDouble {
  return resultTestAllTypesLite.repeatedDoubleArray;
}
- (Float64)repeatedDoubleAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedDoubleAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedDouble:(Float64)value {
  if (resultTestAllTypesLite.repeatedDoubleArray == nil) {
    resultTestAllTypesLite.repeatedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [resultTestAllTypesLite.repeatedDoubleArray addDouble:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedDoubleArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedDoubleArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedDoubleValues:(const Float64 *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedDoubleArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedDouble {
  resultTestAllTypesLite.repeatedDoubleArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedBool {
  return resultTestAllTypesLite.repeatedBoolArray;
}
- (BOOL)repeatedBoolAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedBoolAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedBool:(BOOL)value {
  if (resultTestAllTypesLite.repeatedBoolArray == nil) {
    resultTestAllTypesLite.repeatedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [resultTestAllTypesLite.repeatedBoolArray addBool:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedBoolArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedBoolArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedBoolValues:(const BOOL *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedBoolArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedBool {
  resultTestAllTypesLite.repeatedBoolArray = nil;
  return self;
}
- (NSMutableArray *)repeatedString {
  return resultTestAllTypesLite.repeatedStringArray;
}
- (NSString*)repeatedStringAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedStringAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedString:(NSString*)value {
  if (resultTestAllTypesLite.repeatedStringArray == nil) {
    resultTestAllTypesLite.repeatedStringArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypesLite.repeatedStringArray addObject:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedStringArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedStringArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedString {
  resultTestAllTypesLite.repeatedStringArray = nil;
  return self;
}
- (NSMutableArray *)repeatedBytes {
  return resultTestAllTypesLite.repeatedBytesArray;
}
- (NSData*)repeatedBytesAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedBytesAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedBytes:(NSData*)value {
  if (resultTestAllTypesLite.repeatedBytesArray == nil) {
    resultTestAllTypesLite.repeatedBytesArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypesLite.repeatedBytesArray addObject:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedBytesArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedBytesArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedBytes {
  resultTestAllTypesLite.repeatedBytesArray = nil;
  return self;
}
- (NSMutableArray *)repeatedGroup {
  return resultTestAllTypesLite.repeatedGroupArray;
}
- (TestAllTypesLiteRepeatedGroup*)repeatedGroupAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedGroupAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedGroup:(TestAllTypesLiteRepeatedGroup*)value {
  if (resultTestAllTypesLite.repeatedGroupArray == nil) {
    resultTestAllTypesLite.repeatedGroupArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypesLite.repeatedGroupArray addObject:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedGroupArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedGroupArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedGroup {
  resultTestAllTypesLite.repeatedGroupArray = nil;
  return self;
}
- (NSMutableArray *)repeatedNestedMessage {
  return resultTestAllTypesLite.repeatedNestedMessageArray;
}
- (TestAllTypesLiteNestedMessage*)repeatedNestedMessageAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedNestedMessageAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedNestedMessage:(TestAllTypesLiteNestedMessage*)value {
  if (resultTestAllTypesLite.repeatedNestedMessageArray == nil) {
    resultTestAllTypesLite.repeatedNestedMessageArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypesLite.repeatedNestedMessageArray addObject:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedNestedMessageArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedNestedMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedNestedMessage {
  resultTestAllTypesLite.repeatedNestedMessageArray = nil;
  return self;
}
- (NSMutableArray *)repeatedForeignMessage {
  return resultTestAllTypesLite.repeatedForeignMessageArray;
}
- (ForeignMessageLite*)repeatedForeignMessageAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedForeignMessageAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedForeignMessage:(ForeignMessageLite*)value {
  if (resultTestAllTypesLite.repeatedForeignMessageArray == nil) {
    resultTestAllTypesLite.repeatedForeignMessageArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypesLite.repeatedForeignMessageArray addObject:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedForeignMessageArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedForeignMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedForeignMessage {
  resultTestAllTypesLite.repeatedForeignMessageArray = nil;
  return self;
}
- (NSMutableArray *)repeatedImportMessage {
  return resultTestAllTypesLite.repeatedImportMessageArray;
}
- (ImportMessageLite*)repeatedImportMessageAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedImportMessageAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedImportMessage:(ImportMessageLite*)value {
  if (resultTestAllTypesLite.repeatedImportMessageArray == nil) {
    resultTestAllTypesLite.repeatedImportMessageArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypesLite.repeatedImportMessageArray addObject:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedImportMessageArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedImportMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedImportMessage {
  resultTestAllTypesLite.repeatedImportMessageArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedNestedEnum {
  return resultTestAllTypesLite.repeatedNestedEnumArray;
}
- (TestAllTypesLiteNestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedNestedEnumAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedNestedEnum:(TestAllTypesLiteNestedEnum)value {
  if (resultTestAllTypesLite.repeatedNestedEnumArray == nil) {
    resultTestAllTypesLite.repeatedNestedEnumArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypesLite.repeatedNestedEnumArray addEnum:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedNestedEnumArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedNestedEnumArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedNestedEnumValues:(const TestAllTypesLiteNestedEnum *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedNestedEnumArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedNestedEnum {
  resultTestAllTypesLite.repeatedNestedEnumArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedForeignEnum {
  return resultTestAllTypesLite.repeatedForeignEnumArray;
}
- (ForeignEnumLite)repeatedForeignEnumAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedForeignEnumAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedForeignEnum:(ForeignEnumLite)value {
  if (resultTestAllTypesLite.repeatedForeignEnumArray == nil) {
    resultTestAllTypesLite.repeatedForeignEnumArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypesLite.repeatedForeignEnumArray addEnum:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedForeignEnumArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedForeignEnumArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedForeignEnumValues:(const ForeignEnumLite *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedForeignEnumArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedForeignEnum {
  resultTestAllTypesLite.repeatedForeignEnumArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedImportEnum {
  return resultTestAllTypesLite.repeatedImportEnumArray;
}
- (ImportEnumLite)repeatedImportEnumAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedImportEnumAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedImportEnum:(ImportEnumLite)value {
  if (resultTestAllTypesLite.repeatedImportEnumArray == nil) {
    resultTestAllTypesLite.repeatedImportEnumArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestAllTypesLite.repeatedImportEnumArray addEnum:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedImportEnumArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedImportEnumArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedImportEnumValues:(const ImportEnumLite *)values count:(NSUInteger)count {
  resultTestAllTypesLite.repeatedImportEnumArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedImportEnum {
  resultTestAllTypesLite.repeatedImportEnumArray = nil;
  return self;
}
- (NSMutableArray *)repeatedStringPiece {
  return resultTestAllTypesLite.repeatedStringPieceArray;
}
- (NSString*)repeatedStringPieceAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedStringPieceAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedStringPiece:(NSString*)value {
  if (resultTestAllTypesLite.repeatedStringPieceArray == nil) {
    resultTestAllTypesLite.repeatedStringPieceArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypesLite.repeatedStringPieceArray addObject:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedStringPieceArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedStringPieceArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedStringPiece {
  resultTestAllTypesLite.repeatedStringPieceArray = nil;
  return self;
}
- (NSMutableArray *)repeatedCord {
  return resultTestAllTypesLite.repeatedCordArray;
}
- (NSString*)repeatedCordAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedCordAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedCord:(NSString*)value {
  if (resultTestAllTypesLite.repeatedCordArray == nil) {
    resultTestAllTypesLite.repeatedCordArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypesLite.repeatedCordArray addObject:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedCordArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedCordArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedCord {
  resultTestAllTypesLite.repeatedCordArray = nil;
  return self;
}
- (NSMutableArray *)repeatedLazyMessage {
  return resultTestAllTypesLite.repeatedLazyMessageArray;
}
- (TestAllTypesLiteNestedMessage*)repeatedLazyMessageAtIndex:(NSUInteger)index {
  return [resultTestAllTypesLite repeatedLazyMessageAtIndex:index];
}
- (TestAllTypesLiteBuilder *)addRepeatedLazyMessage:(TestAllTypesLiteNestedMessage*)value {
  if (resultTestAllTypesLite.repeatedLazyMessageArray == nil) {
    resultTestAllTypesLite.repeatedLazyMessageArray = [[NSMutableArray alloc]init];
  }
  [resultTestAllTypesLite.repeatedLazyMessageArray addObject:value];
  return self;
}
- (TestAllTypesLiteBuilder *)setRepeatedLazyMessageArray:(NSArray *)array {
  resultTestAllTypesLite.repeatedLazyMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestAllTypesLiteBuilder *)clearRepeatedLazyMessage {
  resultTestAllTypesLite.repeatedLazyMessageArray = nil;
  return self;
}
- (BOOL) hasDefaultInt32 {
  return resultTestAllTypesLite.hasDefaultInt32;
}
- (SInt32) defaultInt32 {
  return resultTestAllTypesLite.defaultInt32;
}
- (TestAllTypesLiteBuilder*) setDefaultInt32:(SInt32) value {
  resultTestAllTypesLite.hasDefaultInt32 = YES;
  resultTestAllTypesLite.defaultInt32 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultInt32 {
  resultTestAllTypesLite.hasDefaultInt32 = NO;
  resultTestAllTypesLite.defaultInt32 = 41;
  return self;
}
- (BOOL) hasDefaultInt64 {
  return resultTestAllTypesLite.hasDefaultInt64;
}
- (SInt64) defaultInt64 {
  return resultTestAllTypesLite.defaultInt64;
}
- (TestAllTypesLiteBuilder*) setDefaultInt64:(SInt64) value {
  resultTestAllTypesLite.hasDefaultInt64 = YES;
  resultTestAllTypesLite.defaultInt64 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultInt64 {
  resultTestAllTypesLite.hasDefaultInt64 = NO;
  resultTestAllTypesLite.defaultInt64 = 42L;
  return self;
}
- (BOOL) hasDefaultUint32 {
  return resultTestAllTypesLite.hasDefaultUint32;
}
- (UInt32) defaultUint32 {
  return resultTestAllTypesLite.defaultUint32;
}
- (TestAllTypesLiteBuilder*) setDefaultUint32:(UInt32) value {
  resultTestAllTypesLite.hasDefaultUint32 = YES;
  resultTestAllTypesLite.defaultUint32 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultUint32 {
  resultTestAllTypesLite.hasDefaultUint32 = NO;
  resultTestAllTypesLite.defaultUint32 = 43;
  return self;
}
- (BOOL) hasDefaultUint64 {
  return resultTestAllTypesLite.hasDefaultUint64;
}
- (UInt64) defaultUint64 {
  return resultTestAllTypesLite.defaultUint64;
}
- (TestAllTypesLiteBuilder*) setDefaultUint64:(UInt64) value {
  resultTestAllTypesLite.hasDefaultUint64 = YES;
  resultTestAllTypesLite.defaultUint64 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultUint64 {
  resultTestAllTypesLite.hasDefaultUint64 = NO;
  resultTestAllTypesLite.defaultUint64 = 44L;
  return self;
}
- (BOOL) hasDefaultSint32 {
  return resultTestAllTypesLite.hasDefaultSint32;
}
- (SInt32) defaultSint32 {
  return resultTestAllTypesLite.defaultSint32;
}
- (TestAllTypesLiteBuilder*) setDefaultSint32:(SInt32) value {
  resultTestAllTypesLite.hasDefaultSint32 = YES;
  resultTestAllTypesLite.defaultSint32 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultSint32 {
  resultTestAllTypesLite.hasDefaultSint32 = NO;
  resultTestAllTypesLite.defaultSint32 = -45;
  return self;
}
- (BOOL) hasDefaultSint64 {
  return resultTestAllTypesLite.hasDefaultSint64;
}
- (SInt64) defaultSint64 {
  return resultTestAllTypesLite.defaultSint64;
}
- (TestAllTypesLiteBuilder*) setDefaultSint64:(SInt64) value {
  resultTestAllTypesLite.hasDefaultSint64 = YES;
  resultTestAllTypesLite.defaultSint64 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultSint64 {
  resultTestAllTypesLite.hasDefaultSint64 = NO;
  resultTestAllTypesLite.defaultSint64 = 46L;
  return self;
}
- (BOOL) hasDefaultFixed32 {
  return resultTestAllTypesLite.hasDefaultFixed32;
}
- (UInt32) defaultFixed32 {
  return resultTestAllTypesLite.defaultFixed32;
}
- (TestAllTypesLiteBuilder*) setDefaultFixed32:(UInt32) value {
  resultTestAllTypesLite.hasDefaultFixed32 = YES;
  resultTestAllTypesLite.defaultFixed32 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultFixed32 {
  resultTestAllTypesLite.hasDefaultFixed32 = NO;
  resultTestAllTypesLite.defaultFixed32 = 47;
  return self;
}
- (BOOL) hasDefaultFixed64 {
  return resultTestAllTypesLite.hasDefaultFixed64;
}
- (UInt64) defaultFixed64 {
  return resultTestAllTypesLite.defaultFixed64;
}
- (TestAllTypesLiteBuilder*) setDefaultFixed64:(UInt64) value {
  resultTestAllTypesLite.hasDefaultFixed64 = YES;
  resultTestAllTypesLite.defaultFixed64 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultFixed64 {
  resultTestAllTypesLite.hasDefaultFixed64 = NO;
  resultTestAllTypesLite.defaultFixed64 = 48L;
  return self;
}
- (BOOL) hasDefaultSfixed32 {
  return resultTestAllTypesLite.hasDefaultSfixed32;
}
- (SInt32) defaultSfixed32 {
  return resultTestAllTypesLite.defaultSfixed32;
}
- (TestAllTypesLiteBuilder*) setDefaultSfixed32:(SInt32) value {
  resultTestAllTypesLite.hasDefaultSfixed32 = YES;
  resultTestAllTypesLite.defaultSfixed32 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultSfixed32 {
  resultTestAllTypesLite.hasDefaultSfixed32 = NO;
  resultTestAllTypesLite.defaultSfixed32 = 49;
  return self;
}
- (BOOL) hasDefaultSfixed64 {
  return resultTestAllTypesLite.hasDefaultSfixed64;
}
- (SInt64) defaultSfixed64 {
  return resultTestAllTypesLite.defaultSfixed64;
}
- (TestAllTypesLiteBuilder*) setDefaultSfixed64:(SInt64) value {
  resultTestAllTypesLite.hasDefaultSfixed64 = YES;
  resultTestAllTypesLite.defaultSfixed64 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultSfixed64 {
  resultTestAllTypesLite.hasDefaultSfixed64 = NO;
  resultTestAllTypesLite.defaultSfixed64 = -50L;
  return self;
}
- (BOOL) hasDefaultFloat {
  return resultTestAllTypesLite.hasDefaultFloat;
}
- (Float32) defaultFloat {
  return resultTestAllTypesLite.defaultFloat;
}
- (TestAllTypesLiteBuilder*) setDefaultFloat:(Float32) value {
  resultTestAllTypesLite.hasDefaultFloat = YES;
  resultTestAllTypesLite.defaultFloat = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultFloat {
  resultTestAllTypesLite.hasDefaultFloat = NO;
  resultTestAllTypesLite.defaultFloat = 51.5;
  return self;
}
- (BOOL) hasDefaultDouble {
  return resultTestAllTypesLite.hasDefaultDouble;
}
- (Float64) defaultDouble {
  return resultTestAllTypesLite.defaultDouble;
}
- (TestAllTypesLiteBuilder*) setDefaultDouble:(Float64) value {
  resultTestAllTypesLite.hasDefaultDouble = YES;
  resultTestAllTypesLite.defaultDouble = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultDouble {
  resultTestAllTypesLite.hasDefaultDouble = NO;
  resultTestAllTypesLite.defaultDouble = 52000;
  return self;
}
- (BOOL) hasDefaultBool {
  return resultTestAllTypesLite.hasDefaultBool;
}
- (BOOL) defaultBool {
  return resultTestAllTypesLite.defaultBool;
}
- (TestAllTypesLiteBuilder*) setDefaultBool:(BOOL) value {
  resultTestAllTypesLite.hasDefaultBool = YES;
  resultTestAllTypesLite.defaultBool = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultBool {
  resultTestAllTypesLite.hasDefaultBool = NO;
  resultTestAllTypesLite.defaultBool = YES;
  return self;
}
- (BOOL) hasDefaultString {
  return resultTestAllTypesLite.hasDefaultString;
}
- (NSString*) defaultString {
  return resultTestAllTypesLite.defaultString;
}
- (TestAllTypesLiteBuilder*) setDefaultString:(NSString*) value {
  resultTestAllTypesLite.hasDefaultString = YES;
  resultTestAllTypesLite.defaultString = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultString {
  resultTestAllTypesLite.hasDefaultString = NO;
  resultTestAllTypesLite.defaultString = @"hello";
  return self;
}
- (BOOL) hasDefaultBytes {
  return resultTestAllTypesLite.hasDefaultBytes;
}
- (NSData*) defaultBytes {
  return resultTestAllTypesLite.defaultBytes;
}
- (TestAllTypesLiteBuilder*) setDefaultBytes:(NSData*) value {
  resultTestAllTypesLite.hasDefaultBytes = YES;
  resultTestAllTypesLite.defaultBytes = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultBytes {
  resultTestAllTypesLite.hasDefaultBytes = NO;
  resultTestAllTypesLite.defaultBytes = [NSData dataWithBytes:"world" length:5];
  return self;
}
- (BOOL) hasDefaultNestedEnum {
  return resultTestAllTypesLite.hasDefaultNestedEnum;
}
- (TestAllTypesLiteNestedEnum) defaultNestedEnum {
  return resultTestAllTypesLite.defaultNestedEnum;
}
- (TestAllTypesLiteBuilder*) setDefaultNestedEnum:(TestAllTypesLiteNestedEnum) value {
  resultTestAllTypesLite.hasDefaultNestedEnum = YES;
  resultTestAllTypesLite.defaultNestedEnum = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultNestedEnum {
  resultTestAllTypesLite.hasDefaultNestedEnum = NO;
  resultTestAllTypesLite.defaultNestedEnum = TestAllTypesLiteNestedEnumBar;
  return self;
}
- (BOOL) hasDefaultForeignEnum {
  return resultTestAllTypesLite.hasDefaultForeignEnum;
}
- (ForeignEnumLite) defaultForeignEnum {
  return resultTestAllTypesLite.defaultForeignEnum;
}
- (TestAllTypesLiteBuilder*) setDefaultForeignEnum:(ForeignEnumLite) value {
  resultTestAllTypesLite.hasDefaultForeignEnum = YES;
  resultTestAllTypesLite.defaultForeignEnum = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultForeignEnum {
  resultTestAllTypesLite.hasDefaultForeignEnum = NO;
  resultTestAllTypesLite.defaultForeignEnum = ForeignEnumLiteForeignLiteBar;
  return self;
}
- (BOOL) hasDefaultImportEnum {
  return resultTestAllTypesLite.hasDefaultImportEnum;
}
- (ImportEnumLite) defaultImportEnum {
  return resultTestAllTypesLite.defaultImportEnum;
}
- (TestAllTypesLiteBuilder*) setDefaultImportEnum:(ImportEnumLite) value {
  resultTestAllTypesLite.hasDefaultImportEnum = YES;
  resultTestAllTypesLite.defaultImportEnum = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultImportEnum {
  resultTestAllTypesLite.hasDefaultImportEnum = NO;
  resultTestAllTypesLite.defaultImportEnum = ImportEnumLiteImportLiteBar;
  return self;
}
- (BOOL) hasDefaultStringPiece {
  return resultTestAllTypesLite.hasDefaultStringPiece;
}
- (NSString*) defaultStringPiece {
  return resultTestAllTypesLite.defaultStringPiece;
}
- (TestAllTypesLiteBuilder*) setDefaultStringPiece:(NSString*) value {
  resultTestAllTypesLite.hasDefaultStringPiece = YES;
  resultTestAllTypesLite.defaultStringPiece = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultStringPiece {
  resultTestAllTypesLite.hasDefaultStringPiece = NO;
  resultTestAllTypesLite.defaultStringPiece = @"abc";
  return self;
}
- (BOOL) hasDefaultCord {
  return resultTestAllTypesLite.hasDefaultCord;
}
- (NSString*) defaultCord {
  return resultTestAllTypesLite.defaultCord;
}
- (TestAllTypesLiteBuilder*) setDefaultCord:(NSString*) value {
  resultTestAllTypesLite.hasDefaultCord = YES;
  resultTestAllTypesLite.defaultCord = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearDefaultCord {
  resultTestAllTypesLite.hasDefaultCord = NO;
  resultTestAllTypesLite.defaultCord = @"123";
  return self;
}
- (BOOL) hasOneofUint32 {
  return resultTestAllTypesLite.hasOneofUint32;
}
- (UInt32) oneofUint32 {
  return resultTestAllTypesLite.oneofUint32;
}
- (TestAllTypesLiteBuilder*) setOneofUint32:(UInt32) value {
  resultTestAllTypesLite.hasOneofUint32 = YES;
  resultTestAllTypesLite.oneofUint32 = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOneofUint32 {
  resultTestAllTypesLite.hasOneofUint32 = NO;
  resultTestAllTypesLite.oneofUint32 = 0;
  return self;
}
- (BOOL) hasOneofNestedMessage {
  return resultTestAllTypesLite.hasOneofNestedMessage;
}
- (TestAllTypesLiteNestedMessage*) oneofNestedMessage {
  return resultTestAllTypesLite.oneofNestedMessage;
}
- (TestAllTypesLiteBuilder*) setOneofNestedMessage:(TestAllTypesLiteNestedMessage*) value {
  resultTestAllTypesLite.hasOneofNestedMessage = YES;
  resultTestAllTypesLite.oneofNestedMessage = value;
  return self;
}
- (TestAllTypesLiteBuilder*) setOneofNestedMessageBuilder:(TestAllTypesLiteNestedMessageBuilder*) builderForValue {
  return [self setOneofNestedMessage:[builderForValue build]];
}
- (TestAllTypesLiteBuilder*) mergeOneofNestedMessage:(TestAllTypesLiteNestedMessage*) value {
  if (resultTestAllTypesLite.hasOneofNestedMessage &&
      resultTestAllTypesLite.oneofNestedMessage != [TestAllTypesLiteNestedMessage defaultInstance]) {
    resultTestAllTypesLite.oneofNestedMessage =
      [[[TestAllTypesLiteNestedMessage builderWithPrototype:resultTestAllTypesLite.oneofNestedMessage] mergeFrom:value] buildPartial];
  } else {
    resultTestAllTypesLite.oneofNestedMessage = value;
  }
  resultTestAllTypesLite.hasOneofNestedMessage = YES;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOneofNestedMessage {
  resultTestAllTypesLite.hasOneofNestedMessage = NO;
  resultTestAllTypesLite.oneofNestedMessage = [TestAllTypesLiteNestedMessage defaultInstance];
  return self;
}
- (BOOL) hasOneofString {
  return resultTestAllTypesLite.hasOneofString;
}
- (NSString*) oneofString {
  return resultTestAllTypesLite.oneofString;
}
- (TestAllTypesLiteBuilder*) setOneofString:(NSString*) value {
  resultTestAllTypesLite.hasOneofString = YES;
  resultTestAllTypesLite.oneofString = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOneofString {
  resultTestAllTypesLite.hasOneofString = NO;
  resultTestAllTypesLite.oneofString = @"";
  return self;
}
- (BOOL) hasOneofBytes {
  return resultTestAllTypesLite.hasOneofBytes;
}
- (NSData*) oneofBytes {
  return resultTestAllTypesLite.oneofBytes;
}
- (TestAllTypesLiteBuilder*) setOneofBytes:(NSData*) value {
  resultTestAllTypesLite.hasOneofBytes = YES;
  resultTestAllTypesLite.oneofBytes = value;
  return self;
}
- (TestAllTypesLiteBuilder*) clearOneofBytes {
  resultTestAllTypesLite.hasOneofBytes = NO;
  resultTestAllTypesLite.oneofBytes = [NSData data];
  return self;
}
@end

@interface ForeignMessageLite ()
@property SInt32 c;
@end

@implementation ForeignMessageLite

- (BOOL) hasC {
  return !!hasC_;
}
- (void) setHasC:(BOOL) _value_ {
  hasC_ = !!_value_;
}
@synthesize c;
- (instancetype) init {
  if ((self = [super init])) {
    self.c = 0;
  }
  return self;
}
static ForeignMessageLite* defaultForeignMessageLiteInstance = nil;
+ (void) initialize {
  if (self == [ForeignMessageLite class]) {
    defaultForeignMessageLiteInstance = [[ForeignMessageLite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultForeignMessageLiteInstance;
}
- (instancetype) defaultInstance {
  return defaultForeignMessageLiteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasC) {
    [output writeInt32:1 value:self.c];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasC) {
    size_ += computeInt32Size(1, self.c);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ForeignMessageLite*) parseFromData:(NSData*) data {
  return (ForeignMessageLite*)[[[ForeignMessageLite builder] mergeFromData:data] build];
}
+ (ForeignMessageLite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignMessageLite*)[[[ForeignMessageLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ForeignMessageLite*) parseFromInputStream:(NSInputStream*) input {
  return (ForeignMessageLite*)[[[ForeignMessageLite builder] mergeFromInputStream:input] build];
}
+ (ForeignMessageLite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignMessageLite*)[[[ForeignMessageLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ForeignMessageLite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ForeignMessageLite*)[[[ForeignMessageLite builder] mergeFromCodedInputStream:input] build];
}
+ (ForeignMessageLite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ForeignMessageLite*)[[[ForeignMessageLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ForeignMessageLiteBuilder*) builder {
  return [[ForeignMessageLiteBuilder alloc] init];
}
+ (ForeignMessageLiteBuilder*) builderWithPrototype:(ForeignMessageLite*) prototype {
  return [[ForeignMessageLite builder] mergeFrom:prototype];
}
- (ForeignMessageLiteBuilder*) builder {
  return [ForeignMessageLite builder];
}
- (ForeignMessageLiteBuilder*) toBuilder {
  return [ForeignMessageLite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasC) {
    [output appendFormat:@"%@%@: %@\n", indent, @"c", [NSNumber numberWithInteger:self.c]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasC) {
    [dictionary setObject: [NSNumber numberWithInteger:self.c] forKey: @"c"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ForeignMessageLite class]]) {
    return NO;
  }
  ForeignMessageLite *otherMessage = other;
  return
      self.hasC == otherMessage.hasC &&
      (!self.hasC || self.c == otherMessage.c) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasC) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.c] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ForeignMessageLiteBuilder()
@property (strong) ForeignMessageLite* resultForeignMessageLite;
@end

@implementation ForeignMessageLiteBuilder
@synthesize resultForeignMessageLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultForeignMessageLite = [[ForeignMessageLite alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultForeignMessageLite;
}
- (ForeignMessageLiteBuilder*) clear {
  self.resultForeignMessageLite = [[ForeignMessageLite alloc] init];
  return self;
}
- (ForeignMessageLiteBuilder*) clone {
  return [ForeignMessageLite builderWithPrototype:resultForeignMessageLite];
}
- (ForeignMessageLite*) defaultInstance {
  return [ForeignMessageLite defaultInstance];
}
- (ForeignMessageLite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ForeignMessageLite*) buildPartial {
  ForeignMessageLite* returnMe = resultForeignMessageLite;
  self.resultForeignMessageLite = nil;
  return returnMe;
}
- (ForeignMessageLiteBuilder*) mergeFrom:(ForeignMessageLite*) other {
  if (other == [ForeignMessageLite defaultInstance]) {
    return self;
  }
  if (other.hasC) {
    [self setC:other.c];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ForeignMessageLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ForeignMessageLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setC:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasC {
  return resultForeignMessageLite.hasC;
}
- (SInt32) c {
  return resultForeignMessageLite.c;
}
- (ForeignMessageLiteBuilder*) setC:(SInt32) value {
  resultForeignMessageLite.hasC = YES;
  resultForeignMessageLite.c = value;
  return self;
}
- (ForeignMessageLiteBuilder*) clearC {
  resultForeignMessageLite.hasC = NO;
  resultForeignMessageLite.c = 0;
  return self;
}
@end

@interface TestPackedTypesLite ()
@property (strong) PBAppendableArray * packedInt32Array;
@property (strong) PBAppendableArray * packedInt64Array;
@property (strong) PBAppendableArray * packedUint32Array;
@property (strong) PBAppendableArray * packedUint64Array;
@property (strong) PBAppendableArray * packedSint32Array;
@property (strong) PBAppendableArray * packedSint64Array;
@property (strong) PBAppendableArray * packedFixed32Array;
@property (strong) PBAppendableArray * packedFixed64Array;
@property (strong) PBAppendableArray * packedSfixed32Array;
@property (strong) PBAppendableArray * packedSfixed64Array;
@property (strong) PBAppendableArray * packedFloatArray;
@property (strong) PBAppendableArray * packedDoubleArray;
@property (strong) PBAppendableArray * packedBoolArray;
@property (strong) PBAppendableArray * packedEnumArray;
@end

@implementation TestPackedTypesLite

@synthesize packedInt32Array;
@dynamic packedInt32;
@synthesize packedInt64Array;
@dynamic packedInt64;
@synthesize packedUint32Array;
@dynamic packedUint32;
@synthesize packedUint64Array;
@dynamic packedUint64;
@synthesize packedSint32Array;
@dynamic packedSint32;
@synthesize packedSint64Array;
@dynamic packedSint64;
@synthesize packedFixed32Array;
@dynamic packedFixed32;
@synthesize packedFixed64Array;
@dynamic packedFixed64;
@synthesize packedSfixed32Array;
@dynamic packedSfixed32;
@synthesize packedSfixed64Array;
@dynamic packedSfixed64;
@synthesize packedFloatArray;
@dynamic packedFloat;
@synthesize packedDoubleArray;
@dynamic packedDouble;
@synthesize packedBoolArray;
@dynamic packedBool;
@synthesize packedEnumArray;
@dynamic packedEnum;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestPackedTypesLite* defaultTestPackedTypesLiteInstance = nil;
+ (void) initialize {
  if (self == [TestPackedTypesLite class]) {
    defaultTestPackedTypesLiteInstance = [[TestPackedTypesLite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestPackedTypesLiteInstance;
}
- (instancetype) defaultInstance {
  return defaultTestPackedTypesLiteInstance;
}
- (PBArray *)packedInt32 {
  return packedInt32Array;
}
- (SInt32)packedInt32AtIndex:(NSUInteger)index {
  return [packedInt32Array int32AtIndex:index];
}
- (PBArray *)packedInt64 {
  return packedInt64Array;
}
- (SInt64)packedInt64AtIndex:(NSUInteger)index {
  return [packedInt64Array int64AtIndex:index];
}
- (PBArray *)packedUint32 {
  return packedUint32Array;
}
- (UInt32)packedUint32AtIndex:(NSUInteger)index {
  return [packedUint32Array uint32AtIndex:index];
}
- (PBArray *)packedUint64 {
  return packedUint64Array;
}
- (UInt64)packedUint64AtIndex:(NSUInteger)index {
  return [packedUint64Array uint64AtIndex:index];
}
- (PBArray *)packedSint32 {
  return packedSint32Array;
}
- (SInt32)packedSint32AtIndex:(NSUInteger)index {
  return [packedSint32Array int32AtIndex:index];
}
- (PBArray *)packedSint64 {
  return packedSint64Array;
}
- (SInt64)packedSint64AtIndex:(NSUInteger)index {
  return [packedSint64Array int64AtIndex:index];
}
- (PBArray *)packedFixed32 {
  return packedFixed32Array;
}
- (UInt32)packedFixed32AtIndex:(NSUInteger)index {
  return [packedFixed32Array uint32AtIndex:index];
}
- (PBArray *)packedFixed64 {
  return packedFixed64Array;
}
- (UInt64)packedFixed64AtIndex:(NSUInteger)index {
  return [packedFixed64Array uint64AtIndex:index];
}
- (PBArray *)packedSfixed32 {
  return packedSfixed32Array;
}
- (SInt32)packedSfixed32AtIndex:(NSUInteger)index {
  return [packedSfixed32Array int32AtIndex:index];
}
- (PBArray *)packedSfixed64 {
  return packedSfixed64Array;
}
- (SInt64)packedSfixed64AtIndex:(NSUInteger)index {
  return [packedSfixed64Array int64AtIndex:index];
}
- (PBArray *)packedFloat {
  return packedFloatArray;
}
- (Float32)packedFloatAtIndex:(NSUInteger)index {
  return [packedFloatArray floatAtIndex:index];
}
- (PBArray *)packedDouble {
  return packedDoubleArray;
}
- (Float64)packedDoubleAtIndex:(NSUInteger)index {
  return [packedDoubleArray doubleAtIndex:index];
}
- (PBArray *)packedBool {
  return packedBoolArray;
}
- (BOOL)packedBoolAtIndex:(NSUInteger)index {
  return [packedBoolArray boolAtIndex:index];
}
- (PBArray *)packedEnum {
  return packedEnumArray;
}
- (ForeignEnumLite)packedEnumAtIndex:(NSUInteger)index {
  return (ForeignEnumLite)[packedEnumArray enumAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger packedInt32ArrayCount = self.packedInt32Array.count;
  if (packedInt32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.packedInt32Array.data;
    [output writeRawVarint32:722];
    [output writeRawVarint32:packedInt32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedInt32ArrayCount; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedInt64ArrayCount = self.packedInt64Array.count;
  if (packedInt64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.packedInt64Array.data;
    [output writeRawVarint32:730];
    [output writeRawVarint32:packedInt64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedInt64ArrayCount; ++i) {
      [output writeInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedUint32ArrayCount = self.packedUint32Array.count;
  if (packedUint32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.packedUint32Array.data;
    [output writeRawVarint32:738];
    [output writeRawVarint32:packedUint32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedUint32ArrayCount; ++i) {
      [output writeUInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedUint64ArrayCount = self.packedUint64Array.count;
  if (packedUint64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.packedUint64Array.data;
    [output writeRawVarint32:746];
    [output writeRawVarint32:packedUint64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedUint64ArrayCount; ++i) {
      [output writeUInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedSint32ArrayCount = self.packedSint32Array.count;
  if (packedSint32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.packedSint32Array.data;
    [output writeRawVarint32:754];
    [output writeRawVarint32:packedSint32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSint32ArrayCount; ++i) {
      [output writeSInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedSint64ArrayCount = self.packedSint64Array.count;
  if (packedSint64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.packedSint64Array.data;
    [output writeRawVarint32:762];
    [output writeRawVarint32:packedSint64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSint64ArrayCount; ++i) {
      [output writeSInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedFixed32ArrayCount = self.packedFixed32Array.count;
  if (packedFixed32ArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.packedFixed32Array.data;
    [output writeRawVarint32:770];
    [output writeRawVarint32:packedFixed32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFixed32ArrayCount; ++i) {
      [output writeFixed32NoTag:values[i]];
    }
  }
  const NSUInteger packedFixed64ArrayCount = self.packedFixed64Array.count;
  if (packedFixed64ArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.packedFixed64Array.data;
    [output writeRawVarint32:778];
    [output writeRawVarint32:packedFixed64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFixed64ArrayCount; ++i) {
      [output writeFixed64NoTag:values[i]];
    }
  }
  const NSUInteger packedSfixed32ArrayCount = self.packedSfixed32Array.count;
  if (packedSfixed32ArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.packedSfixed32Array.data;
    [output writeRawVarint32:786];
    [output writeRawVarint32:packedSfixed32MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSfixed32ArrayCount; ++i) {
      [output writeSFixed32NoTag:values[i]];
    }
  }
  const NSUInteger packedSfixed64ArrayCount = self.packedSfixed64Array.count;
  if (packedSfixed64ArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.packedSfixed64Array.data;
    [output writeRawVarint32:794];
    [output writeRawVarint32:packedSfixed64MemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedSfixed64ArrayCount; ++i) {
      [output writeSFixed64NoTag:values[i]];
    }
  }
  const NSUInteger packedFloatArrayCount = self.packedFloatArray.count;
  if (packedFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.packedFloatArray.data;
    [output writeRawVarint32:802];
    [output writeRawVarint32:packedFloatMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedFloatArrayCount; ++i) {
      [output writeFloatNoTag:values[i]];
    }
  }
  const NSUInteger packedDoubleArrayCount = self.packedDoubleArray.count;
  if (packedDoubleArrayCount > 0) {
    const Float64 *values = (const Float64 *)self.packedDoubleArray.data;
    [output writeRawVarint32:810];
    [output writeRawVarint32:packedDoubleMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedDoubleArrayCount; ++i) {
      [output writeDoubleNoTag:values[i]];
    }
  }
  const NSUInteger packedBoolArrayCount = self.packedBoolArray.count;
  if (packedBoolArrayCount > 0) {
    const BOOL *values = (const BOOL *)self.packedBoolArray.data;
    [output writeRawVarint32:818];
    [output writeRawVarint32:packedBoolMemoizedSerializedSize];
    for (NSUInteger i = 0; i < packedBoolArrayCount; ++i) {
      [output writeBoolNoTag:values[i]];
    }
  }
  const NSUInteger packedEnumArrayCount = self.packedEnumArray.count;
  const ForeignEnumLite *packedEnumArrayValues = (const ForeignEnumLite *)self.packedEnumArray.data;
  if (self.packedEnumArray.count > 0) {
    [output writeRawVarint32:826];
    [output writeRawVarint32:packedEnumMemoizedSerializedSize];
  }
  for (NSUInteger i = 0; i < packedEnumArrayCount; ++i) {
    [output writeEnumNoTag:packedEnumArrayValues[i]];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedInt32Array.count;
    const SInt32 *values = (const SInt32 *)self.packedInt32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedInt32MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedInt64Array.count;
    const SInt64 *values = (const SInt64 *)self.packedInt64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedInt64MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedUint32Array.count;
    const UInt32 *values = (const UInt32 *)self.packedUint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedUint32MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedUint64Array.count;
    const UInt64 *values = (const UInt64 *)self.packedUint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedUint64MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedSint32Array.count;
    const SInt32 *values = (const SInt32 *)self.packedSint32Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedSint32MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedSint64Array.count;
    const SInt64 *values = (const SInt64 *)self.packedSint64Array.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedSint64MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedFixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedFixed32MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedFixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedFixed64MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedSfixed32Array.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedSfixed32MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedSfixed64Array.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedSfixed64MemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedFloatArray.count;
    dataSize = (SInt32)(4 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedFloatMemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedDoubleArray.count;
    dataSize = (SInt32)(8 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedDoubleMemoizedSerializedSize = dataSize;
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packedBoolArray.count;
    dataSize = (SInt32)(1 * count);
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    packedBoolMemoizedSerializedSize = dataSize;
  }
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.packedEnumArray.count;
    const ForeignEnumLite *values = (const ForeignEnumLite *)self.packedEnumArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count > 0) {
      size_ += 2;
      size_ += computeRawVarint32Size(dataSize);
    }
    packedEnumMemoizedSerializedSize = dataSize;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestPackedTypesLite*) parseFromData:(NSData*) data {
  return (TestPackedTypesLite*)[[[TestPackedTypesLite builder] mergeFromData:data] build];
}
+ (TestPackedTypesLite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedTypesLite*)[[[TestPackedTypesLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestPackedTypesLite*) parseFromInputStream:(NSInputStream*) input {
  return (TestPackedTypesLite*)[[[TestPackedTypesLite builder] mergeFromInputStream:input] build];
}
+ (TestPackedTypesLite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedTypesLite*)[[[TestPackedTypesLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestPackedTypesLite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestPackedTypesLite*)[[[TestPackedTypesLite builder] mergeFromCodedInputStream:input] build];
}
+ (TestPackedTypesLite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedTypesLite*)[[[TestPackedTypesLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestPackedTypesLiteBuilder*) builder {
  return [[TestPackedTypesLiteBuilder alloc] init];
}
+ (TestPackedTypesLiteBuilder*) builderWithPrototype:(TestPackedTypesLite*) prototype {
  return [[TestPackedTypesLite builder] mergeFrom:prototype];
}
- (TestPackedTypesLiteBuilder*) builder {
  return [TestPackedTypesLite builder];
}
- (TestPackedTypesLiteBuilder*) toBuilder {
  return [TestPackedTypesLite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.packedInt32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedInt32", obj];
  }];
  [self.packedInt64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedInt64", obj];
  }];
  [self.packedUint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedUint32", obj];
  }];
  [self.packedUint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedUint64", obj];
  }];
  [self.packedSint32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSint32", obj];
  }];
  [self.packedSint64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSint64", obj];
  }];
  [self.packedFixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFixed32", obj];
  }];
  [self.packedFixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFixed64", obj];
  }];
  [self.packedSfixed32Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSfixed32", obj];
  }];
  [self.packedSfixed64Array enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSfixed64", obj];
  }];
  [self.packedFloatArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFloat", obj];
  }];
  [self.packedDoubleArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedDouble", obj];
  }];
  [self.packedBoolArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedBool", obj];
  }];
  [self.packedEnumArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedEnum", NSStringFromForeignEnumLite([(NSNumber *)element intValue])];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * packedInt32ArrayArray = [NSMutableArray new];
  NSUInteger packedInt32ArrayCount=self.packedInt32Array.count;
  for(int i=0;i<packedInt32ArrayCount;i++){
    [packedInt32ArrayArray addObject: @([self.packedInt32Array int32AtIndex:i])];
  }
  [dictionary setObject: packedInt32ArrayArray forKey: @"packedInt32"];
  NSMutableArray * packedInt64ArrayArray = [NSMutableArray new];
  NSUInteger packedInt64ArrayCount=self.packedInt64Array.count;
  for(int i=0;i<packedInt64ArrayCount;i++){
    [packedInt64ArrayArray addObject: @([self.packedInt64Array int64AtIndex:i])];
  }
  [dictionary setObject: packedInt64ArrayArray forKey: @"packedInt64"];
  NSMutableArray * packedUint32ArrayArray = [NSMutableArray new];
  NSUInteger packedUint32ArrayCount=self.packedUint32Array.count;
  for(int i=0;i<packedUint32ArrayCount;i++){
    [packedUint32ArrayArray addObject: @([self.packedUint32Array uint32AtIndex:i])];
  }
  [dictionary setObject: packedUint32ArrayArray forKey: @"packedUint32"];
  NSMutableArray * packedUint64ArrayArray = [NSMutableArray new];
  NSUInteger packedUint64ArrayCount=self.packedUint64Array.count;
  for(int i=0;i<packedUint64ArrayCount;i++){
    [packedUint64ArrayArray addObject: @([self.packedUint64Array uint64AtIndex:i])];
  }
  [dictionary setObject: packedUint64ArrayArray forKey: @"packedUint64"];
  NSMutableArray * packedSint32ArrayArray = [NSMutableArray new];
  NSUInteger packedSint32ArrayCount=self.packedSint32Array.count;
  for(int i=0;i<packedSint32ArrayCount;i++){
    [packedSint32ArrayArray addObject: @([self.packedSint32Array int32AtIndex:i])];
  }
  [dictionary setObject: packedSint32ArrayArray forKey: @"packedSint32"];
  NSMutableArray * packedSint64ArrayArray = [NSMutableArray new];
  NSUInteger packedSint64ArrayCount=self.packedSint64Array.count;
  for(int i=0;i<packedSint64ArrayCount;i++){
    [packedSint64ArrayArray addObject: @([self.packedSint64Array int64AtIndex:i])];
  }
  [dictionary setObject: packedSint64ArrayArray forKey: @"packedSint64"];
  NSMutableArray * packedFixed32ArrayArray = [NSMutableArray new];
  NSUInteger packedFixed32ArrayCount=self.packedFixed32Array.count;
  for(int i=0;i<packedFixed32ArrayCount;i++){
    [packedFixed32ArrayArray addObject: @([self.packedFixed32Array uint32AtIndex:i])];
  }
  [dictionary setObject: packedFixed32ArrayArray forKey: @"packedFixed32"];
  NSMutableArray * packedFixed64ArrayArray = [NSMutableArray new];
  NSUInteger packedFixed64ArrayCount=self.packedFixed64Array.count;
  for(int i=0;i<packedFixed64ArrayCount;i++){
    [packedFixed64ArrayArray addObject: @([self.packedFixed64Array uint64AtIndex:i])];
  }
  [dictionary setObject: packedFixed64ArrayArray forKey: @"packedFixed64"];
  NSMutableArray * packedSfixed32ArrayArray = [NSMutableArray new];
  NSUInteger packedSfixed32ArrayCount=self.packedSfixed32Array.count;
  for(int i=0;i<packedSfixed32ArrayCount;i++){
    [packedSfixed32ArrayArray addObject: @([self.packedSfixed32Array int32AtIndex:i])];
  }
  [dictionary setObject: packedSfixed32ArrayArray forKey: @"packedSfixed32"];
  NSMutableArray * packedSfixed64ArrayArray = [NSMutableArray new];
  NSUInteger packedSfixed64ArrayCount=self.packedSfixed64Array.count;
  for(int i=0;i<packedSfixed64ArrayCount;i++){
    [packedSfixed64ArrayArray addObject: @([self.packedSfixed64Array int64AtIndex:i])];
  }
  [dictionary setObject: packedSfixed64ArrayArray forKey: @"packedSfixed64"];
  NSMutableArray * packedFloatArrayArray = [NSMutableArray new];
  NSUInteger packedFloatArrayCount=self.packedFloatArray.count;
  for(int i=0;i<packedFloatArrayCount;i++){
    [packedFloatArrayArray addObject: @([self.packedFloatArray floatAtIndex:i])];
  }
  [dictionary setObject: packedFloatArrayArray forKey: @"packedFloat"];
  NSMutableArray * packedDoubleArrayArray = [NSMutableArray new];
  NSUInteger packedDoubleArrayCount=self.packedDoubleArray.count;
  for(int i=0;i<packedDoubleArrayCount;i++){
    [packedDoubleArrayArray addObject: @([self.packedDoubleArray doubleAtIndex:i])];
  }
  [dictionary setObject: packedDoubleArrayArray forKey: @"packedDouble"];
  NSMutableArray * packedBoolArrayArray = [NSMutableArray new];
  NSUInteger packedBoolArrayCount=self.packedBoolArray.count;
  for(int i=0;i<packedBoolArrayCount;i++){
    [packedBoolArrayArray addObject: @([self.packedBoolArray boolAtIndex:i])];
  }
  [dictionary setObject: packedBoolArrayArray forKey: @"packedBool"];
  const NSUInteger packedEnumArrayCount = self.packedEnumArray.count;
  if (packedEnumArrayCount > 0) {
    const ForeignEnumLite *packedEnumArrayValues = (const ForeignEnumLite *)self.packedEnumArray.data;
    NSMutableArray * packedEnumArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < packedEnumArrayCount; ++i) {
      [packedEnumArrayArray addObject: @(packedEnumArrayValues[i])];
    }
    [dictionary setObject: packedEnumArrayArray forKey: @"packedEnum"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestPackedTypesLite class]]) {
    return NO;
  }
  TestPackedTypesLite *otherMessage = other;
  return
      [self.packedInt32Array isEqualToArray:otherMessage.packedInt32Array] &&
      [self.packedInt64Array isEqualToArray:otherMessage.packedInt64Array] &&
      [self.packedUint32Array isEqualToArray:otherMessage.packedUint32Array] &&
      [self.packedUint64Array isEqualToArray:otherMessage.packedUint64Array] &&
      [self.packedSint32Array isEqualToArray:otherMessage.packedSint32Array] &&
      [self.packedSint64Array isEqualToArray:otherMessage.packedSint64Array] &&
      [self.packedFixed32Array isEqualToArray:otherMessage.packedFixed32Array] &&
      [self.packedFixed64Array isEqualToArray:otherMessage.packedFixed64Array] &&
      [self.packedSfixed32Array isEqualToArray:otherMessage.packedSfixed32Array] &&
      [self.packedSfixed64Array isEqualToArray:otherMessage.packedSfixed64Array] &&
      [self.packedFloatArray isEqualToArray:otherMessage.packedFloatArray] &&
      [self.packedDoubleArray isEqualToArray:otherMessage.packedDoubleArray] &&
      [self.packedBoolArray isEqualToArray:otherMessage.packedBoolArray] &&
      [self.packedEnumArray isEqualToArray:otherMessage.packedEnumArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.packedInt32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedInt64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedUint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedUint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedSint32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedSint64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedFixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedFixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedSfixed32Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedSfixed64Array enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedFloatArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedDoubleArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedBoolArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.packedEnumArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestPackedTypesLiteBuilder()
@property (strong) TestPackedTypesLite* resultTestPackedTypesLite;
@end

@implementation TestPackedTypesLiteBuilder
@synthesize resultTestPackedTypesLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestPackedTypesLite = [[TestPackedTypesLite alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestPackedTypesLite;
}
- (TestPackedTypesLiteBuilder*) clear {
  self.resultTestPackedTypesLite = [[TestPackedTypesLite alloc] init];
  return self;
}
- (TestPackedTypesLiteBuilder*) clone {
  return [TestPackedTypesLite builderWithPrototype:resultTestPackedTypesLite];
}
- (TestPackedTypesLite*) defaultInstance {
  return [TestPackedTypesLite defaultInstance];
}
- (TestPackedTypesLite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestPackedTypesLite*) buildPartial {
  TestPackedTypesLite* returnMe = resultTestPackedTypesLite;
  self.resultTestPackedTypesLite = nil;
  return returnMe;
}
- (TestPackedTypesLiteBuilder*) mergeFrom:(TestPackedTypesLite*) other {
  if (other == [TestPackedTypesLite defaultInstance]) {
    return self;
  }
  if (other.packedInt32Array.count > 0) {
    if (resultTestPackedTypesLite.packedInt32Array == nil) {
      resultTestPackedTypesLite.packedInt32Array = [other.packedInt32Array copy];
    } else {
      [resultTestPackedTypesLite.packedInt32Array appendArray:other.packedInt32Array];
    }
  }
  if (other.packedInt64Array.count > 0) {
    if (resultTestPackedTypesLite.packedInt64Array == nil) {
      resultTestPackedTypesLite.packedInt64Array = [other.packedInt64Array copy];
    } else {
      [resultTestPackedTypesLite.packedInt64Array appendArray:other.packedInt64Array];
    }
  }
  if (other.packedUint32Array.count > 0) {
    if (resultTestPackedTypesLite.packedUint32Array == nil) {
      resultTestPackedTypesLite.packedUint32Array = [other.packedUint32Array copy];
    } else {
      [resultTestPackedTypesLite.packedUint32Array appendArray:other.packedUint32Array];
    }
  }
  if (other.packedUint64Array.count > 0) {
    if (resultTestPackedTypesLite.packedUint64Array == nil) {
      resultTestPackedTypesLite.packedUint64Array = [other.packedUint64Array copy];
    } else {
      [resultTestPackedTypesLite.packedUint64Array appendArray:other.packedUint64Array];
    }
  }
  if (other.packedSint32Array.count > 0) {
    if (resultTestPackedTypesLite.packedSint32Array == nil) {
      resultTestPackedTypesLite.packedSint32Array = [other.packedSint32Array copy];
    } else {
      [resultTestPackedTypesLite.packedSint32Array appendArray:other.packedSint32Array];
    }
  }
  if (other.packedSint64Array.count > 0) {
    if (resultTestPackedTypesLite.packedSint64Array == nil) {
      resultTestPackedTypesLite.packedSint64Array = [other.packedSint64Array copy];
    } else {
      [resultTestPackedTypesLite.packedSint64Array appendArray:other.packedSint64Array];
    }
  }
  if (other.packedFixed32Array.count > 0) {
    if (resultTestPackedTypesLite.packedFixed32Array == nil) {
      resultTestPackedTypesLite.packedFixed32Array = [other.packedFixed32Array copy];
    } else {
      [resultTestPackedTypesLite.packedFixed32Array appendArray:other.packedFixed32Array];
    }
  }
  if (other.packedFixed64Array.count > 0) {
    if (resultTestPackedTypesLite.packedFixed64Array == nil) {
      resultTestPackedTypesLite.packedFixed64Array = [other.packedFixed64Array copy];
    } else {
      [resultTestPackedTypesLite.packedFixed64Array appendArray:other.packedFixed64Array];
    }
  }
  if (other.packedSfixed32Array.count > 0) {
    if (resultTestPackedTypesLite.packedSfixed32Array == nil) {
      resultTestPackedTypesLite.packedSfixed32Array = [other.packedSfixed32Array copy];
    } else {
      [resultTestPackedTypesLite.packedSfixed32Array appendArray:other.packedSfixed32Array];
    }
  }
  if (other.packedSfixed64Array.count > 0) {
    if (resultTestPackedTypesLite.packedSfixed64Array == nil) {
      resultTestPackedTypesLite.packedSfixed64Array = [other.packedSfixed64Array copy];
    } else {
      [resultTestPackedTypesLite.packedSfixed64Array appendArray:other.packedSfixed64Array];
    }
  }
  if (other.packedFloatArray.count > 0) {
    if (resultTestPackedTypesLite.packedFloatArray == nil) {
      resultTestPackedTypesLite.packedFloatArray = [other.packedFloatArray copy];
    } else {
      [resultTestPackedTypesLite.packedFloatArray appendArray:other.packedFloatArray];
    }
  }
  if (other.packedDoubleArray.count > 0) {
    if (resultTestPackedTypesLite.packedDoubleArray == nil) {
      resultTestPackedTypesLite.packedDoubleArray = [other.packedDoubleArray copy];
    } else {
      [resultTestPackedTypesLite.packedDoubleArray appendArray:other.packedDoubleArray];
    }
  }
  if (other.packedBoolArray.count > 0) {
    if (resultTestPackedTypesLite.packedBoolArray == nil) {
      resultTestPackedTypesLite.packedBoolArray = [other.packedBoolArray copy];
    } else {
      [resultTestPackedTypesLite.packedBoolArray appendArray:other.packedBoolArray];
    }
  }
  if (other.packedEnumArray.count > 0) {
    if (resultTestPackedTypesLite.packedEnumArray == nil) {
      resultTestPackedTypesLite.packedEnumArray = [other.packedEnumArray copy];
    } else {
      [resultTestPackedTypesLite.packedEnumArray appendArray:other.packedEnumArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestPackedTypesLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestPackedTypesLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 722: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedInt32Array == nil) {
          resultTestPackedTypesLite.packedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedInt32Array addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 730: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedInt64Array == nil) {
          resultTestPackedTypesLite.packedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedInt64Array addInt64:[input readInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 738: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedUint32Array == nil) {
          resultTestPackedTypesLite.packedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedUint32Array addUint32:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 746: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedUint64Array == nil) {
          resultTestPackedTypesLite.packedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedUint64Array addUint64:[input readUInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 754: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedSint32Array == nil) {
          resultTestPackedTypesLite.packedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedSint32Array addInt32:[input readSInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 762: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedSint64Array == nil) {
          resultTestPackedTypesLite.packedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedSint64Array addInt64:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 770: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedFixed32Array == nil) {
          resultTestPackedTypesLite.packedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedFixed32Array addUint32:[input readFixed32]];
        }
        [input popLimit:limit];
        break;
      }
      case 778: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedFixed64Array == nil) {
          resultTestPackedTypesLite.packedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedFixed64Array addUint64:[input readFixed64]];
        }
        [input popLimit:limit];
        break;
      }
      case 786: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedSfixed32Array == nil) {
          resultTestPackedTypesLite.packedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedSfixed32Array addInt32:[input readSFixed32]];
        }
        [input popLimit:limit];
        break;
      }
      case 794: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedSfixed64Array == nil) {
          resultTestPackedTypesLite.packedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedSfixed64Array addInt64:[input readSFixed64]];
        }
        [input popLimit:limit];
        break;
      }
      case 802: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedFloatArray == nil) {
          resultTestPackedTypesLite.packedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedFloatArray addFloat:[input readFloat]];
        }
        [input popLimit:limit];
        break;
      }
      case 810: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedDoubleArray == nil) {
          resultTestPackedTypesLite.packedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedDoubleArray addDouble:[input readDouble]];
        }
        [input popLimit:limit];
        break;
      }
      case 818: {
        SInt32 length = [input readRawVarint32];
        SInt32 limit = [input pushLimit:length];
        if (resultTestPackedTypesLite.packedBoolArray == nil) {
          resultTestPackedTypesLite.packedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
        }
        while (input.bytesUntilLimit > 0) {
          [resultTestPackedTypesLite.packedBoolArray addBool:[input readBool]];
        }
        [input popLimit:limit];
        break;
      }
      case 826: {
        SInt32 length = [input readRawVarint32];
        SInt32 oldLimit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          ForeignEnumLite value = (ForeignEnumLite)[input readEnum];
          if (ForeignEnumLiteIsValidValue(value)) {
            [self addPackedEnum:value];
          } else {
            [unknownFields mergeVarintField:103 value:value];
          }
        }
        [input popLimit:oldLimit];
        break;
      }
    }
  }
}
- (PBAppendableArray *)packedInt32 {
  return resultTestPackedTypesLite.packedInt32Array;
}
- (SInt32)packedInt32AtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedInt32AtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedInt32:(SInt32)value {
  if (resultTestPackedTypesLite.packedInt32Array == nil) {
    resultTestPackedTypesLite.packedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestPackedTypesLite.packedInt32Array addInt32:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedInt32Array:(NSArray *)array {
  resultTestPackedTypesLite.packedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedInt32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedInt32 {
  resultTestPackedTypesLite.packedInt32Array = nil;
  return self;
}
- (PBAppendableArray *)packedInt64 {
  return resultTestPackedTypesLite.packedInt64Array;
}
- (SInt64)packedInt64AtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedInt64AtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedInt64:(SInt64)value {
  if (resultTestPackedTypesLite.packedInt64Array == nil) {
    resultTestPackedTypesLite.packedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestPackedTypesLite.packedInt64Array addInt64:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedInt64Array:(NSArray *)array {
  resultTestPackedTypesLite.packedInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedInt64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedInt64 {
  resultTestPackedTypesLite.packedInt64Array = nil;
  return self;
}
- (PBAppendableArray *)packedUint32 {
  return resultTestPackedTypesLite.packedUint32Array;
}
- (UInt32)packedUint32AtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedUint32AtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedUint32:(UInt32)value {
  if (resultTestPackedTypesLite.packedUint32Array == nil) {
    resultTestPackedTypesLite.packedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestPackedTypesLite.packedUint32Array addUint32:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedUint32Array:(NSArray *)array {
  resultTestPackedTypesLite.packedUint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedUint32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedUint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedUint32 {
  resultTestPackedTypesLite.packedUint32Array = nil;
  return self;
}
- (PBAppendableArray *)packedUint64 {
  return resultTestPackedTypesLite.packedUint64Array;
}
- (UInt64)packedUint64AtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedUint64AtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedUint64:(UInt64)value {
  if (resultTestPackedTypesLite.packedUint64Array == nil) {
    resultTestPackedTypesLite.packedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestPackedTypesLite.packedUint64Array addUint64:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedUint64Array:(NSArray *)array {
  resultTestPackedTypesLite.packedUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedUint64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedUint64 {
  resultTestPackedTypesLite.packedUint64Array = nil;
  return self;
}
- (PBAppendableArray *)packedSint32 {
  return resultTestPackedTypesLite.packedSint32Array;
}
- (SInt32)packedSint32AtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedSint32AtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedSint32:(SInt32)value {
  if (resultTestPackedTypesLite.packedSint32Array == nil) {
    resultTestPackedTypesLite.packedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestPackedTypesLite.packedSint32Array addInt32:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedSint32Array:(NSArray *)array {
  resultTestPackedTypesLite.packedSint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedSint32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedSint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedSint32 {
  resultTestPackedTypesLite.packedSint32Array = nil;
  return self;
}
- (PBAppendableArray *)packedSint64 {
  return resultTestPackedTypesLite.packedSint64Array;
}
- (SInt64)packedSint64AtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedSint64AtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedSint64:(SInt64)value {
  if (resultTestPackedTypesLite.packedSint64Array == nil) {
    resultTestPackedTypesLite.packedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestPackedTypesLite.packedSint64Array addInt64:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedSint64Array:(NSArray *)array {
  resultTestPackedTypesLite.packedSint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedSint64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedSint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedSint64 {
  resultTestPackedTypesLite.packedSint64Array = nil;
  return self;
}
- (PBAppendableArray *)packedFixed32 {
  return resultTestPackedTypesLite.packedFixed32Array;
}
- (UInt32)packedFixed32AtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedFixed32AtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedFixed32:(UInt32)value {
  if (resultTestPackedTypesLite.packedFixed32Array == nil) {
    resultTestPackedTypesLite.packedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultTestPackedTypesLite.packedFixed32Array addUint32:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedFixed32Array:(NSArray *)array {
  resultTestPackedTypesLite.packedFixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedFixed32Values:(const UInt32 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedFixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedFixed32 {
  resultTestPackedTypesLite.packedFixed32Array = nil;
  return self;
}
- (PBAppendableArray *)packedFixed64 {
  return resultTestPackedTypesLite.packedFixed64Array;
}
- (UInt64)packedFixed64AtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedFixed64AtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedFixed64:(UInt64)value {
  if (resultTestPackedTypesLite.packedFixed64Array == nil) {
    resultTestPackedTypesLite.packedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultTestPackedTypesLite.packedFixed64Array addUint64:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedFixed64Array:(NSArray *)array {
  resultTestPackedTypesLite.packedFixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedFixed64Values:(const UInt64 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedFixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedFixed64 {
  resultTestPackedTypesLite.packedFixed64Array = nil;
  return self;
}
- (PBAppendableArray *)packedSfixed32 {
  return resultTestPackedTypesLite.packedSfixed32Array;
}
- (SInt32)packedSfixed32AtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedSfixed32AtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedSfixed32:(SInt32)value {
  if (resultTestPackedTypesLite.packedSfixed32Array == nil) {
    resultTestPackedTypesLite.packedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestPackedTypesLite.packedSfixed32Array addInt32:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedSfixed32Array:(NSArray *)array {
  resultTestPackedTypesLite.packedSfixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedSfixed32Values:(const SInt32 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedSfixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedSfixed32 {
  resultTestPackedTypesLite.packedSfixed32Array = nil;
  return self;
}
- (PBAppendableArray *)packedSfixed64 {
  return resultTestPackedTypesLite.packedSfixed64Array;
}
- (SInt64)packedSfixed64AtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedSfixed64AtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedSfixed64:(SInt64)value {
  if (resultTestPackedTypesLite.packedSfixed64Array == nil) {
    resultTestPackedTypesLite.packedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [resultTestPackedTypesLite.packedSfixed64Array addInt64:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedSfixed64Array:(NSArray *)array {
  resultTestPackedTypesLite.packedSfixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedSfixed64Values:(const SInt64 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedSfixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedSfixed64 {
  resultTestPackedTypesLite.packedSfixed64Array = nil;
  return self;
}
- (PBAppendableArray *)packedFloat {
  return resultTestPackedTypesLite.packedFloatArray;
}
- (Float32)packedFloatAtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedFloatAtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedFloat:(Float32)value {
  if (resultTestPackedTypesLite.packedFloatArray == nil) {
    resultTestPackedTypesLite.packedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [resultTestPackedTypesLite.packedFloatArray addFloat:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedFloatArray:(NSArray *)array {
  resultTestPackedTypesLite.packedFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedFloatValues:(const Float32 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedFloat {
  resultTestPackedTypesLite.packedFloatArray = nil;
  return self;
}
- (PBAppendableArray *)packedDouble {
  return resultTestPackedTypesLite.packedDoubleArray;
}
- (Float64)packedDoubleAtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedDoubleAtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedDouble:(Float64)value {
  if (resultTestPackedTypesLite.packedDoubleArray == nil) {
    resultTestPackedTypesLite.packedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [resultTestPackedTypesLite.packedDoubleArray addDouble:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedDoubleArray:(NSArray *)array {
  resultTestPackedTypesLite.packedDoubleArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedDoubleValues:(const Float64 *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedDoubleArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedDouble {
  resultTestPackedTypesLite.packedDoubleArray = nil;
  return self;
}
- (PBAppendableArray *)packedBool {
  return resultTestPackedTypesLite.packedBoolArray;
}
- (BOOL)packedBoolAtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedBoolAtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedBool:(BOOL)value {
  if (resultTestPackedTypesLite.packedBoolArray == nil) {
    resultTestPackedTypesLite.packedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [resultTestPackedTypesLite.packedBoolArray addBool:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedBoolArray:(NSArray *)array {
  resultTestPackedTypesLite.packedBoolArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedBoolValues:(const BOOL *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedBoolArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedBool {
  resultTestPackedTypesLite.packedBoolArray = nil;
  return self;
}
- (PBAppendableArray *)packedEnum {
  return resultTestPackedTypesLite.packedEnumArray;
}
- (ForeignEnumLite)packedEnumAtIndex:(NSUInteger)index {
  return [resultTestPackedTypesLite packedEnumAtIndex:index];
}
- (TestPackedTypesLiteBuilder *)addPackedEnum:(ForeignEnumLite)value {
  if (resultTestPackedTypesLite.packedEnumArray == nil) {
    resultTestPackedTypesLite.packedEnumArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultTestPackedTypesLite.packedEnumArray addEnum:value];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedEnumArray:(NSArray *)array {
  resultTestPackedTypesLite.packedEnumArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)setPackedEnumValues:(const ForeignEnumLite *)values count:(NSUInteger)count {
  resultTestPackedTypesLite.packedEnumArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (TestPackedTypesLiteBuilder *)clearPackedEnum {
  resultTestPackedTypesLite.packedEnumArray = nil;
  return self;
}
@end

@interface TestAllExtensionsLite ()
@end

@implementation TestAllExtensionsLite

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestAllExtensionsLite* defaultTestAllExtensionsLiteInstance = nil;
+ (void) initialize {
  if (self == [TestAllExtensionsLite class]) {
    defaultTestAllExtensionsLiteInstance = [[TestAllExtensionsLite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestAllExtensionsLiteInstance;
}
- (instancetype) defaultInstance {
  return defaultTestAllExtensionsLiteInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:1
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestAllExtensionsLite*) parseFromData:(NSData*) data {
  return (TestAllExtensionsLite*)[[[TestAllExtensionsLite builder] mergeFromData:data] build];
}
+ (TestAllExtensionsLite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllExtensionsLite*)[[[TestAllExtensionsLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestAllExtensionsLite*) parseFromInputStream:(NSInputStream*) input {
  return (TestAllExtensionsLite*)[[[TestAllExtensionsLite builder] mergeFromInputStream:input] build];
}
+ (TestAllExtensionsLite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllExtensionsLite*)[[[TestAllExtensionsLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllExtensionsLite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestAllExtensionsLite*)[[[TestAllExtensionsLite builder] mergeFromCodedInputStream:input] build];
}
+ (TestAllExtensionsLite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestAllExtensionsLite*)[[[TestAllExtensionsLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestAllExtensionsLiteBuilder*) builder {
  return [[TestAllExtensionsLiteBuilder alloc] init];
}
+ (TestAllExtensionsLiteBuilder*) builderWithPrototype:(TestAllExtensionsLite*) prototype {
  return [[TestAllExtensionsLite builder] mergeFrom:prototype];
}
- (TestAllExtensionsLiteBuilder*) builder {
  return [TestAllExtensionsLite builder];
}
- (TestAllExtensionsLiteBuilder*) toBuilder {
  return [TestAllExtensionsLite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllExtensionsLite class]]) {
    return NO;
  }
  TestAllExtensionsLite *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestAllExtensionsLiteBuilder()
@property (strong) TestAllExtensionsLite* resultTestAllExtensionsLite;
@end

@implementation TestAllExtensionsLiteBuilder
@synthesize resultTestAllExtensionsLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestAllExtensionsLite = [[TestAllExtensionsLite alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return resultTestAllExtensionsLite;
}
- (TestAllExtensionsLiteBuilder*) clear {
  self.resultTestAllExtensionsLite = [[TestAllExtensionsLite alloc] init];
  return self;
}
- (TestAllExtensionsLiteBuilder*) clone {
  return [TestAllExtensionsLite builderWithPrototype:resultTestAllExtensionsLite];
}
- (TestAllExtensionsLite*) defaultInstance {
  return [TestAllExtensionsLite defaultInstance];
}
- (TestAllExtensionsLite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllExtensionsLite*) buildPartial {
  TestAllExtensionsLite* returnMe = resultTestAllExtensionsLite;
  self.resultTestAllExtensionsLite = nil;
  return returnMe;
}
- (TestAllExtensionsLiteBuilder*) mergeFrom:(TestAllExtensionsLite*) other {
  if (other == [TestAllExtensionsLite defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestAllExtensionsLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestAllExtensionsLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface OptionalGroup_extension_lite ()
@property SInt32 a;
@end

@implementation OptionalGroup_extension_lite

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static OptionalGroup_extension_lite* defaultOptionalGroup_extension_liteInstance = nil;
+ (void) initialize {
  if (self == [OptionalGroup_extension_lite class]) {
    defaultOptionalGroup_extension_liteInstance = [[OptionalGroup_extension_lite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOptionalGroup_extension_liteInstance;
}
- (instancetype) defaultInstance {
  return defaultOptionalGroup_extension_liteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:17 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(17, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OptionalGroup_extension_lite*) parseFromData:(NSData*) data {
  return (OptionalGroup_extension_lite*)[[[OptionalGroup_extension_lite builder] mergeFromData:data] build];
}
+ (OptionalGroup_extension_lite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OptionalGroup_extension_lite*)[[[OptionalGroup_extension_lite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (OptionalGroup_extension_lite*) parseFromInputStream:(NSInputStream*) input {
  return (OptionalGroup_extension_lite*)[[[OptionalGroup_extension_lite builder] mergeFromInputStream:input] build];
}
+ (OptionalGroup_extension_lite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OptionalGroup_extension_lite*)[[[OptionalGroup_extension_lite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OptionalGroup_extension_lite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (OptionalGroup_extension_lite*)[[[OptionalGroup_extension_lite builder] mergeFromCodedInputStream:input] build];
}
+ (OptionalGroup_extension_lite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (OptionalGroup_extension_lite*)[[[OptionalGroup_extension_lite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OptionalGroup_extension_liteBuilder*) builder {
  return [[OptionalGroup_extension_liteBuilder alloc] init];
}
+ (OptionalGroup_extension_liteBuilder*) builderWithPrototype:(OptionalGroup_extension_lite*) prototype {
  return [[OptionalGroup_extension_lite builder] mergeFrom:prototype];
}
- (OptionalGroup_extension_liteBuilder*) builder {
  return [OptionalGroup_extension_lite builder];
}
- (OptionalGroup_extension_liteBuilder*) toBuilder {
  return [OptionalGroup_extension_lite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OptionalGroup_extension_lite class]]) {
    return NO;
  }
  OptionalGroup_extension_lite *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OptionalGroup_extension_liteBuilder()
@property (strong) OptionalGroup_extension_lite* resultOptionalGroupExtensionLite;
@end

@implementation OptionalGroup_extension_liteBuilder
@synthesize resultOptionalGroupExtensionLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOptionalGroupExtensionLite = [[OptionalGroup_extension_lite alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOptionalGroupExtensionLite;
}
- (OptionalGroup_extension_liteBuilder*) clear {
  self.resultOptionalGroupExtensionLite = [[OptionalGroup_extension_lite alloc] init];
  return self;
}
- (OptionalGroup_extension_liteBuilder*) clone {
  return [OptionalGroup_extension_lite builderWithPrototype:resultOptionalGroupExtensionLite];
}
- (OptionalGroup_extension_lite*) defaultInstance {
  return [OptionalGroup_extension_lite defaultInstance];
}
- (OptionalGroup_extension_lite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OptionalGroup_extension_lite*) buildPartial {
  OptionalGroup_extension_lite* returnMe = resultOptionalGroupExtensionLite;
  self.resultOptionalGroupExtensionLite = nil;
  return returnMe;
}
- (OptionalGroup_extension_liteBuilder*) mergeFrom:(OptionalGroup_extension_lite*) other {
  if (other == [OptionalGroup_extension_lite defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OptionalGroup_extension_liteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OptionalGroup_extension_liteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 136: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultOptionalGroupExtensionLite.hasA;
}
- (SInt32) a {
  return resultOptionalGroupExtensionLite.a;
}
- (OptionalGroup_extension_liteBuilder*) setA:(SInt32) value {
  resultOptionalGroupExtensionLite.hasA = YES;
  resultOptionalGroupExtensionLite.a = value;
  return self;
}
- (OptionalGroup_extension_liteBuilder*) clearA {
  resultOptionalGroupExtensionLite.hasA = NO;
  resultOptionalGroupExtensionLite.a = 0;
  return self;
}
@end

@interface RepeatedGroup_extension_lite ()
@property SInt32 a;
@end

@implementation RepeatedGroup_extension_lite

- (BOOL) hasA {
  return !!hasA_;
}
- (void) setHasA:(BOOL) _value_ {
  hasA_ = !!_value_;
}
@synthesize a;
- (instancetype) init {
  if ((self = [super init])) {
    self.a = 0;
  }
  return self;
}
static RepeatedGroup_extension_lite* defaultRepeatedGroup_extension_liteInstance = nil;
+ (void) initialize {
  if (self == [RepeatedGroup_extension_lite class]) {
    defaultRepeatedGroup_extension_liteInstance = [[RepeatedGroup_extension_lite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRepeatedGroup_extension_liteInstance;
}
- (instancetype) defaultInstance {
  return defaultRepeatedGroup_extension_liteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasA) {
    [output writeInt32:47 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(47, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RepeatedGroup_extension_lite*) parseFromData:(NSData*) data {
  return (RepeatedGroup_extension_lite*)[[[RepeatedGroup_extension_lite builder] mergeFromData:data] build];
}
+ (RepeatedGroup_extension_lite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RepeatedGroup_extension_lite*)[[[RepeatedGroup_extension_lite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RepeatedGroup_extension_lite*) parseFromInputStream:(NSInputStream*) input {
  return (RepeatedGroup_extension_lite*)[[[RepeatedGroup_extension_lite builder] mergeFromInputStream:input] build];
}
+ (RepeatedGroup_extension_lite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RepeatedGroup_extension_lite*)[[[RepeatedGroup_extension_lite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RepeatedGroup_extension_lite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RepeatedGroup_extension_lite*)[[[RepeatedGroup_extension_lite builder] mergeFromCodedInputStream:input] build];
}
+ (RepeatedGroup_extension_lite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RepeatedGroup_extension_lite*)[[[RepeatedGroup_extension_lite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RepeatedGroup_extension_liteBuilder*) builder {
  return [[RepeatedGroup_extension_liteBuilder alloc] init];
}
+ (RepeatedGroup_extension_liteBuilder*) builderWithPrototype:(RepeatedGroup_extension_lite*) prototype {
  return [[RepeatedGroup_extension_lite builder] mergeFrom:prototype];
}
- (RepeatedGroup_extension_liteBuilder*) builder {
  return [RepeatedGroup_extension_lite builder];
}
- (RepeatedGroup_extension_liteBuilder*) toBuilder {
  return [RepeatedGroup_extension_lite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", [NSNumber numberWithInteger:self.a]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasA) {
    [dictionary setObject: [NSNumber numberWithInteger:self.a] forKey: @"a"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RepeatedGroup_extension_lite class]]) {
    return NO;
  }
  RepeatedGroup_extension_lite *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasA) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.a] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RepeatedGroup_extension_liteBuilder()
@property (strong) RepeatedGroup_extension_lite* resultRepeatedGroupExtensionLite;
@end

@implementation RepeatedGroup_extension_liteBuilder
@synthesize resultRepeatedGroupExtensionLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepeatedGroupExtensionLite = [[RepeatedGroup_extension_lite alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepeatedGroupExtensionLite;
}
- (RepeatedGroup_extension_liteBuilder*) clear {
  self.resultRepeatedGroupExtensionLite = [[RepeatedGroup_extension_lite alloc] init];
  return self;
}
- (RepeatedGroup_extension_liteBuilder*) clone {
  return [RepeatedGroup_extension_lite builderWithPrototype:resultRepeatedGroupExtensionLite];
}
- (RepeatedGroup_extension_lite*) defaultInstance {
  return [RepeatedGroup_extension_lite defaultInstance];
}
- (RepeatedGroup_extension_lite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RepeatedGroup_extension_lite*) buildPartial {
  RepeatedGroup_extension_lite* returnMe = resultRepeatedGroupExtensionLite;
  self.resultRepeatedGroupExtensionLite = nil;
  return returnMe;
}
- (RepeatedGroup_extension_liteBuilder*) mergeFrom:(RepeatedGroup_extension_lite*) other {
  if (other == [RepeatedGroup_extension_lite defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RepeatedGroup_extension_liteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RepeatedGroup_extension_liteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 376: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasA {
  return resultRepeatedGroupExtensionLite.hasA;
}
- (SInt32) a {
  return resultRepeatedGroupExtensionLite.a;
}
- (RepeatedGroup_extension_liteBuilder*) setA:(SInt32) value {
  resultRepeatedGroupExtensionLite.hasA = YES;
  resultRepeatedGroupExtensionLite.a = value;
  return self;
}
- (RepeatedGroup_extension_liteBuilder*) clearA {
  resultRepeatedGroupExtensionLite.hasA = NO;
  resultRepeatedGroupExtensionLite.a = 0;
  return self;
}
@end

@interface TestPackedExtensionsLite ()
@end

@implementation TestPackedExtensionsLite

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestPackedExtensionsLite* defaultTestPackedExtensionsLiteInstance = nil;
+ (void) initialize {
  if (self == [TestPackedExtensionsLite class]) {
    defaultTestPackedExtensionsLiteInstance = [[TestPackedExtensionsLite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestPackedExtensionsLiteInstance;
}
- (instancetype) defaultInstance {
  return defaultTestPackedExtensionsLiteInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:1
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestPackedExtensionsLite*) parseFromData:(NSData*) data {
  return (TestPackedExtensionsLite*)[[[TestPackedExtensionsLite builder] mergeFromData:data] build];
}
+ (TestPackedExtensionsLite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedExtensionsLite*)[[[TestPackedExtensionsLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestPackedExtensionsLite*) parseFromInputStream:(NSInputStream*) input {
  return (TestPackedExtensionsLite*)[[[TestPackedExtensionsLite builder] mergeFromInputStream:input] build];
}
+ (TestPackedExtensionsLite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedExtensionsLite*)[[[TestPackedExtensionsLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestPackedExtensionsLite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestPackedExtensionsLite*)[[[TestPackedExtensionsLite builder] mergeFromCodedInputStream:input] build];
}
+ (TestPackedExtensionsLite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestPackedExtensionsLite*)[[[TestPackedExtensionsLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestPackedExtensionsLiteBuilder*) builder {
  return [[TestPackedExtensionsLiteBuilder alloc] init];
}
+ (TestPackedExtensionsLiteBuilder*) builderWithPrototype:(TestPackedExtensionsLite*) prototype {
  return [[TestPackedExtensionsLite builder] mergeFrom:prototype];
}
- (TestPackedExtensionsLiteBuilder*) builder {
  return [TestPackedExtensionsLite builder];
}
- (TestPackedExtensionsLiteBuilder*) toBuilder {
  return [TestPackedExtensionsLite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestPackedExtensionsLite class]]) {
    return NO;
  }
  TestPackedExtensionsLite *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestPackedExtensionsLiteBuilder()
@property (strong) TestPackedExtensionsLite* resultTestPackedExtensionsLite;
@end

@implementation TestPackedExtensionsLiteBuilder
@synthesize resultTestPackedExtensionsLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestPackedExtensionsLite = [[TestPackedExtensionsLite alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return resultTestPackedExtensionsLite;
}
- (TestPackedExtensionsLiteBuilder*) clear {
  self.resultTestPackedExtensionsLite = [[TestPackedExtensionsLite alloc] init];
  return self;
}
- (TestPackedExtensionsLiteBuilder*) clone {
  return [TestPackedExtensionsLite builderWithPrototype:resultTestPackedExtensionsLite];
}
- (TestPackedExtensionsLite*) defaultInstance {
  return [TestPackedExtensionsLite defaultInstance];
}
- (TestPackedExtensionsLite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestPackedExtensionsLite*) buildPartial {
  TestPackedExtensionsLite* returnMe = resultTestPackedExtensionsLite;
  self.resultTestPackedExtensionsLite = nil;
  return returnMe;
}
- (TestPackedExtensionsLiteBuilder*) mergeFrom:(TestPackedExtensionsLite*) other {
  if (other == [TestPackedExtensionsLite defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestPackedExtensionsLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestPackedExtensionsLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface TestNestedExtensionLite ()
@end

@implementation TestNestedExtensionLite

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
+ (id<PBExtensionField>) nestedExtension {
  return TestNestedExtensionLite_nestedExtension;
}
static TestNestedExtensionLite* defaultTestNestedExtensionLiteInstance = nil;
+ (void) initialize {
  if (self == [TestNestedExtensionLite class]) {
    defaultTestNestedExtensionLiteInstance = [[TestNestedExtensionLite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestNestedExtensionLiteInstance;
}
- (instancetype) defaultInstance {
  return defaultTestNestedExtensionLiteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestNestedExtensionLite*) parseFromData:(NSData*) data {
  return (TestNestedExtensionLite*)[[[TestNestedExtensionLite builder] mergeFromData:data] build];
}
+ (TestNestedExtensionLite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedExtensionLite*)[[[TestNestedExtensionLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestNestedExtensionLite*) parseFromInputStream:(NSInputStream*) input {
  return (TestNestedExtensionLite*)[[[TestNestedExtensionLite builder] mergeFromInputStream:input] build];
}
+ (TestNestedExtensionLite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedExtensionLite*)[[[TestNestedExtensionLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestNestedExtensionLite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestNestedExtensionLite*)[[[TestNestedExtensionLite builder] mergeFromCodedInputStream:input] build];
}
+ (TestNestedExtensionLite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestNestedExtensionLite*)[[[TestNestedExtensionLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestNestedExtensionLiteBuilder*) builder {
  return [[TestNestedExtensionLiteBuilder alloc] init];
}
+ (TestNestedExtensionLiteBuilder*) builderWithPrototype:(TestNestedExtensionLite*) prototype {
  return [[TestNestedExtensionLite builder] mergeFrom:prototype];
}
- (TestNestedExtensionLiteBuilder*) builder {
  return [TestNestedExtensionLite builder];
}
- (TestNestedExtensionLiteBuilder*) toBuilder {
  return [TestNestedExtensionLite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestNestedExtensionLite class]]) {
    return NO;
  }
  TestNestedExtensionLite *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestNestedExtensionLiteBuilder()
@property (strong) TestNestedExtensionLite* resultTestNestedExtensionLite;
@end

@implementation TestNestedExtensionLiteBuilder
@synthesize resultTestNestedExtensionLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestNestedExtensionLite = [[TestNestedExtensionLite alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestNestedExtensionLite;
}
- (TestNestedExtensionLiteBuilder*) clear {
  self.resultTestNestedExtensionLite = [[TestNestedExtensionLite alloc] init];
  return self;
}
- (TestNestedExtensionLiteBuilder*) clone {
  return [TestNestedExtensionLite builderWithPrototype:resultTestNestedExtensionLite];
}
- (TestNestedExtensionLite*) defaultInstance {
  return [TestNestedExtensionLite defaultInstance];
}
- (TestNestedExtensionLite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestNestedExtensionLite*) buildPartial {
  TestNestedExtensionLite* returnMe = resultTestNestedExtensionLite;
  self.resultTestNestedExtensionLite = nil;
  return returnMe;
}
- (TestNestedExtensionLiteBuilder*) mergeFrom:(TestNestedExtensionLite*) other {
  if (other == [TestNestedExtensionLite defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestNestedExtensionLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestNestedExtensionLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface TestDeprecatedLite ()
@property SInt32 deprecatedField;
@end

@implementation TestDeprecatedLite

- (BOOL) hasDeprecatedField {
  return !!hasDeprecatedField_;
}
- (void) setHasDeprecatedField:(BOOL) _value_ {
  hasDeprecatedField_ = !!_value_;
}
@synthesize deprecatedField;
- (instancetype) init {
  if ((self = [super init])) {
    self.deprecatedField = 0;
  }
  return self;
}
static TestDeprecatedLite* defaultTestDeprecatedLiteInstance = nil;
+ (void) initialize {
  if (self == [TestDeprecatedLite class]) {
    defaultTestDeprecatedLiteInstance = [[TestDeprecatedLite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestDeprecatedLiteInstance;
}
- (instancetype) defaultInstance {
  return defaultTestDeprecatedLiteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDeprecatedField) {
    [output writeInt32:1 value:self.deprecatedField];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDeprecatedField) {
    size_ += computeInt32Size(1, self.deprecatedField);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestDeprecatedLite*) parseFromData:(NSData*) data {
  return (TestDeprecatedLite*)[[[TestDeprecatedLite builder] mergeFromData:data] build];
}
+ (TestDeprecatedLite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDeprecatedLite*)[[[TestDeprecatedLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestDeprecatedLite*) parseFromInputStream:(NSInputStream*) input {
  return (TestDeprecatedLite*)[[[TestDeprecatedLite builder] mergeFromInputStream:input] build];
}
+ (TestDeprecatedLite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDeprecatedLite*)[[[TestDeprecatedLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDeprecatedLite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestDeprecatedLite*)[[[TestDeprecatedLite builder] mergeFromCodedInputStream:input] build];
}
+ (TestDeprecatedLite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestDeprecatedLite*)[[[TestDeprecatedLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestDeprecatedLiteBuilder*) builder {
  return [[TestDeprecatedLiteBuilder alloc] init];
}
+ (TestDeprecatedLiteBuilder*) builderWithPrototype:(TestDeprecatedLite*) prototype {
  return [[TestDeprecatedLite builder] mergeFrom:prototype];
}
- (TestDeprecatedLiteBuilder*) builder {
  return [TestDeprecatedLite builder];
}
- (TestDeprecatedLiteBuilder*) toBuilder {
  return [TestDeprecatedLite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDeprecatedField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deprecatedField", [NSNumber numberWithInteger:self.deprecatedField]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDeprecatedField) {
    [dictionary setObject: [NSNumber numberWithInteger:self.deprecatedField] forKey: @"deprecatedField"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDeprecatedLite class]]) {
    return NO;
  }
  TestDeprecatedLite *otherMessage = other;
  return
      self.hasDeprecatedField == otherMessage.hasDeprecatedField &&
      (!self.hasDeprecatedField || self.deprecatedField == otherMessage.deprecatedField) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDeprecatedField) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.deprecatedField] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestDeprecatedLiteBuilder()
@property (strong) TestDeprecatedLite* resultTestDeprecatedLite;
@end

@implementation TestDeprecatedLiteBuilder
@synthesize resultTestDeprecatedLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestDeprecatedLite = [[TestDeprecatedLite alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestDeprecatedLite;
}
- (TestDeprecatedLiteBuilder*) clear {
  self.resultTestDeprecatedLite = [[TestDeprecatedLite alloc] init];
  return self;
}
- (TestDeprecatedLiteBuilder*) clone {
  return [TestDeprecatedLite builderWithPrototype:resultTestDeprecatedLite];
}
- (TestDeprecatedLite*) defaultInstance {
  return [TestDeprecatedLite defaultInstance];
}
- (TestDeprecatedLite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDeprecatedLite*) buildPartial {
  TestDeprecatedLite* returnMe = resultTestDeprecatedLite;
  self.resultTestDeprecatedLite = nil;
  return returnMe;
}
- (TestDeprecatedLiteBuilder*) mergeFrom:(TestDeprecatedLite*) other {
  if (other == [TestDeprecatedLite defaultInstance]) {
    return self;
  }
  if (other.hasDeprecatedField) {
    [self setDeprecatedField:other.deprecatedField];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestDeprecatedLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestDeprecatedLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDeprecatedField:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDeprecatedField {
  return resultTestDeprecatedLite.hasDeprecatedField;
}
- (SInt32) deprecatedField {
  return resultTestDeprecatedLite.deprecatedField;
}
- (TestDeprecatedLiteBuilder*) setDeprecatedField:(SInt32) value {
  resultTestDeprecatedLite.hasDeprecatedField = YES;
  resultTestDeprecatedLite.deprecatedField = value;
  return self;
}
- (TestDeprecatedLiteBuilder*) clearDeprecatedField {
  resultTestDeprecatedLite.hasDeprecatedField = NO;
  resultTestDeprecatedLite.deprecatedField = 0;
  return self;
}
@end

@interface TestParsingMergeLite ()
@property (strong) TestAllTypesLite* requiredAllTypes;
@property (strong) TestAllTypesLite* optionalAllTypes;
@property (strong) NSMutableArray * repeatedAllTypesArray;
@property (strong) TestParsingMergeLiteOptionalGroup* optionalGroup;
@property (strong) NSMutableArray * repeatedGroupArray;
@end

@implementation TestParsingMergeLite

- (BOOL) hasRequiredAllTypes {
  return !!hasRequiredAllTypes_;
}
- (void) setHasRequiredAllTypes:(BOOL) _value_ {
  hasRequiredAllTypes_ = !!_value_;
}
@synthesize requiredAllTypes;
- (BOOL) hasOptionalAllTypes {
  return !!hasOptionalAllTypes_;
}
- (void) setHasOptionalAllTypes:(BOOL) _value_ {
  hasOptionalAllTypes_ = !!_value_;
}
@synthesize optionalAllTypes;
@synthesize repeatedAllTypesArray;
@dynamic repeatedAllTypes;
- (BOOL) hasOptionalGroup {
  return !!hasOptionalGroup_;
}
- (void) setHasOptionalGroup:(BOOL) _value_ {
  hasOptionalGroup_ = !!_value_;
}
@synthesize optionalGroup;
@synthesize repeatedGroupArray;
@dynamic repeatedGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.requiredAllTypes = [TestAllTypesLite defaultInstance];
    self.optionalAllTypes = [TestAllTypesLite defaultInstance];
    self.optionalGroup = [TestParsingMergeLiteOptionalGroup defaultInstance];
  }
  return self;
}
+ (id<PBExtensionField>) optionalExt {
  return TestParsingMergeLite_optionalExt;
}
+ (id<PBExtensionField>) repeatedExt {
  return TestParsingMergeLite_repeatedExt;
}
static TestParsingMergeLite* defaultTestParsingMergeLiteInstance = nil;
+ (void) initialize {
  if (self == [TestParsingMergeLite class]) {
    defaultTestParsingMergeLiteInstance = [[TestParsingMergeLite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteInstance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteInstance;
}
- (NSArray *)repeatedAllTypes {
  return repeatedAllTypesArray;
}
- (TestAllTypesLite*)repeatedAllTypesAtIndex:(NSUInteger)index {
  return [repeatedAllTypesArray objectAtIndex:index];
}
- (NSArray *)repeatedGroup {
  return repeatedGroupArray;
}
- (TestParsingMergeLiteRepeatedGroup*)repeatedGroupAtIndex:(NSUInteger)index {
  return [repeatedGroupArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasRequiredAllTypes) {
    return NO;
  }
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRequiredAllTypes) {
    [output writeMessage:1 value:self.requiredAllTypes];
  }
  if (self.hasOptionalAllTypes) {
    [output writeMessage:2 value:self.optionalAllTypes];
  }
  [self.repeatedAllTypesArray enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasOptionalGroup) {
    [output writeGroup:10 value:self.optionalGroup];
  }
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    [output writeGroup:20 value:element];
  }];
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequiredAllTypes) {
    size_ += computeMessageSize(1, self.requiredAllTypes);
  }
  if (self.hasOptionalAllTypes) {
    size_ += computeMessageSize(2, self.optionalAllTypes);
  }
  [self.repeatedAllTypesArray enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasOptionalGroup) {
    size_ += computeGroupSize(10, self.optionalGroup);
  }
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    size_ += computeGroupSize(20, element);
  }];
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMergeLite*) parseFromData:(NSData*) data {
  return (TestParsingMergeLite*)[[[TestParsingMergeLite builder] mergeFromData:data] build];
}
+ (TestParsingMergeLite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLite*)[[[TestParsingMergeLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLite*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMergeLite*)[[[TestParsingMergeLite builder] mergeFromInputStream:input] build];
}
+ (TestParsingMergeLite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLite*)[[[TestParsingMergeLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMergeLite*)[[[TestParsingMergeLite builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMergeLite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLite*)[[[TestParsingMergeLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteBuilder*) builder {
  return [[TestParsingMergeLiteBuilder alloc] init];
}
+ (TestParsingMergeLiteBuilder*) builderWithPrototype:(TestParsingMergeLite*) prototype {
  return [[TestParsingMergeLite builder] mergeFrom:prototype];
}
- (TestParsingMergeLiteBuilder*) builder {
  return [TestParsingMergeLite builder];
}
- (TestParsingMergeLiteBuilder*) toBuilder {
  return [TestParsingMergeLite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRequiredAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"requiredAllTypes"];
    [self.requiredAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalAllTypes"];
    [self.optionalAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.repeatedAllTypesArray enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedAllTypes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasOptionalGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalGroup"];
    [self.optionalGroup writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedGroup"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRequiredAllTypes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.requiredAllTypes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"requiredAllTypes"];
  }
  if (self.hasOptionalAllTypes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalAllTypes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalAllTypes"];
  }
  for (TestAllTypesLite* element in self.repeatedAllTypesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedAllTypes"];
  }
  if (self.hasOptionalGroup) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalGroup storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalGroup"];
  }
  for (TestParsingMergeLiteRepeatedGroup* element in self.repeatedGroupArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"repeatedGroup"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMergeLite class]]) {
    return NO;
  }
  TestParsingMergeLite *otherMessage = other;
  return
      self.hasRequiredAllTypes == otherMessage.hasRequiredAllTypes &&
      (!self.hasRequiredAllTypes || [self.requiredAllTypes isEqual:otherMessage.requiredAllTypes]) &&
      self.hasOptionalAllTypes == otherMessage.hasOptionalAllTypes &&
      (!self.hasOptionalAllTypes || [self.optionalAllTypes isEqual:otherMessage.optionalAllTypes]) &&
      [self.repeatedAllTypesArray isEqualToArray:otherMessage.repeatedAllTypesArray] &&
      self.hasOptionalGroup == otherMessage.hasOptionalGroup &&
      (!self.hasOptionalGroup || [self.optionalGroup isEqual:otherMessage.optionalGroup]) &&
      [self.repeatedGroupArray isEqualToArray:otherMessage.repeatedGroupArray] &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRequiredAllTypes) {
    hashCode = hashCode * 31 + [self.requiredAllTypes hash];
  }
  if (self.hasOptionalAllTypes) {
    hashCode = hashCode * 31 + [self.optionalAllTypes hash];
  }
  [self.repeatedAllTypesArray enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOptionalGroup) {
    hashCode = hashCode * 31 + [self.optionalGroup hash];
  }
  [self.repeatedGroupArray enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedGroup *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeLiteRepeatedFieldsGenerator ()
@property (strong) NSMutableArray * field1Array;
@property (strong) NSMutableArray * field2Array;
@property (strong) NSMutableArray * field3Array;
@property (strong) NSMutableArray * group1Array;
@property (strong) NSMutableArray * group2Array;
@property (strong) NSMutableArray * ext1Array;
@property (strong) NSMutableArray * ext2Array;
@end

@implementation TestParsingMergeLiteRepeatedFieldsGenerator

@synthesize field1Array;
@dynamic field1;
@synthesize field2Array;
@dynamic field2;
@synthesize field3Array;
@dynamic field3;
@synthesize group1Array;
@dynamic group1;
@synthesize group2Array;
@dynamic group2;
@synthesize ext1Array;
@dynamic ext1;
@synthesize ext2Array;
@dynamic ext2;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestParsingMergeLiteRepeatedFieldsGenerator* defaultTestParsingMergeLiteRepeatedFieldsGeneratorInstance = nil;
+ (void) initialize {
  if (self == [TestParsingMergeLiteRepeatedFieldsGenerator class]) {
    defaultTestParsingMergeLiteRepeatedFieldsGeneratorInstance = [[TestParsingMergeLiteRepeatedFieldsGenerator alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteRepeatedFieldsGeneratorInstance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteRepeatedFieldsGeneratorInstance;
}
- (NSArray *)field1 {
  return field1Array;
}
- (TestAllTypesLite*)field1AtIndex:(NSUInteger)index {
  return [field1Array objectAtIndex:index];
}
- (NSArray *)field2 {
  return field2Array;
}
- (TestAllTypesLite*)field2AtIndex:(NSUInteger)index {
  return [field2Array objectAtIndex:index];
}
- (NSArray *)field3 {
  return field3Array;
}
- (TestAllTypesLite*)field3AtIndex:(NSUInteger)index {
  return [field3Array objectAtIndex:index];
}
- (NSArray *)group1 {
  return group1Array;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*)group1AtIndex:(NSUInteger)index {
  return [group1Array objectAtIndex:index];
}
- (NSArray *)group2 {
  return group2Array;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*)group2AtIndex:(NSUInteger)index {
  return [group2Array objectAtIndex:index];
}
- (NSArray *)ext1 {
  return ext1Array;
}
- (TestAllTypesLite*)ext1AtIndex:(NSUInteger)index {
  return [ext1Array objectAtIndex:index];
}
- (NSArray *)ext2 {
  return ext2Array;
}
- (TestAllTypesLite*)ext2AtIndex:(NSUInteger)index {
  return [ext2Array objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.field1Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.field2Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.field3Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.group1Array enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 *element, NSUInteger idx, BOOL *stop) {
    [output writeGroup:10 value:element];
  }];
  [self.group2Array enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 *element, NSUInteger idx, BOOL *stop) {
    [output writeGroup:20 value:element];
  }];
  [self.ext1Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1000 value:element];
  }];
  [self.ext2Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1001 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.field1Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  [self.field2Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.field3Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  [self.group1Array enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 *element, NSUInteger idx, BOOL *stop) {
    size_ += computeGroupSize(10, element);
  }];
  [self.group2Array enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 *element, NSUInteger idx, BOOL *stop) {
    size_ += computeGroupSize(20, element);
  }];
  [self.ext1Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1000, element);
  }];
  [self.ext2Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1001, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMergeLiteRepeatedFieldsGenerator*) parseFromData:(NSData*) data {
  return (TestParsingMergeLiteRepeatedFieldsGenerator*)[[[TestParsingMergeLiteRepeatedFieldsGenerator builder] mergeFromData:data] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGenerator*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedFieldsGenerator*)[[[TestParsingMergeLiteRepeatedFieldsGenerator builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGenerator*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMergeLiteRepeatedFieldsGenerator*)[[[TestParsingMergeLiteRepeatedFieldsGenerator builder] mergeFromInputStream:input] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGenerator*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedFieldsGenerator*)[[[TestParsingMergeLiteRepeatedFieldsGenerator builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGenerator*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMergeLiteRepeatedFieldsGenerator*)[[[TestParsingMergeLiteRepeatedFieldsGenerator builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGenerator*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedFieldsGenerator*)[[[TestParsingMergeLiteRepeatedFieldsGenerator builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder*) builder {
  return [[TestParsingMergeLiteRepeatedFieldsGeneratorBuilder alloc] init];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder*) builderWithPrototype:(TestParsingMergeLiteRepeatedFieldsGenerator*) prototype {
  return [[TestParsingMergeLiteRepeatedFieldsGenerator builder] mergeFrom:prototype];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder*) builder {
  return [TestParsingMergeLiteRepeatedFieldsGenerator builder];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder*) toBuilder {
  return [TestParsingMergeLiteRepeatedFieldsGenerator builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.field1Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"field1"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.field2Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"field2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.field3Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"field3"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.group1Array enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"group1"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.group2Array enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"group2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.ext1Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"ext1"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.ext2Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"ext2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (TestAllTypesLite* element in self.field1Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"field1"];
  }
  for (TestAllTypesLite* element in self.field2Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"field2"];
  }
  for (TestAllTypesLite* element in self.field3Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"field3"];
  }
  for (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1* element in self.group1Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"group1"];
  }
  for (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2* element in self.group2Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"group2"];
  }
  for (TestAllTypesLite* element in self.ext1Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"ext1"];
  }
  for (TestAllTypesLite* element in self.ext2Array) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"ext2"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMergeLiteRepeatedFieldsGenerator class]]) {
    return NO;
  }
  TestParsingMergeLiteRepeatedFieldsGenerator *otherMessage = other;
  return
      [self.field1Array isEqualToArray:otherMessage.field1Array] &&
      [self.field2Array isEqualToArray:otherMessage.field2Array] &&
      [self.field3Array isEqualToArray:otherMessage.field3Array] &&
      [self.group1Array isEqualToArray:otherMessage.group1Array] &&
      [self.group2Array isEqualToArray:otherMessage.group2Array] &&
      [self.ext1Array isEqualToArray:otherMessage.ext1Array] &&
      [self.ext2Array isEqualToArray:otherMessage.ext2Array] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.field1Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.field2Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.field3Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.group1Array enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.group2Array enumerateObjectsUsingBlock:^(TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.ext1Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.ext2Array enumerateObjectsUsingBlock:^(TestAllTypesLite *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 ()
@property (strong) TestAllTypesLite* field1;
@end

@implementation TestParsingMergeLiteRepeatedFieldsGeneratorGroup1

- (BOOL) hasField1 {
  return !!hasField1_;
}
- (void) setHasField1:(BOOL) _value_ {
  hasField1_ = !!_value_;
}
@synthesize field1;
- (instancetype) init {
  if ((self = [super init])) {
    self.field1 = [TestAllTypesLite defaultInstance];
  }
  return self;
}
static TestParsingMergeLiteRepeatedFieldsGeneratorGroup1* defaultTestParsingMergeLiteRepeatedFieldsGeneratorGroup1Instance = nil;
+ (void) initialize {
  if (self == [TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 class]) {
    defaultTestParsingMergeLiteRepeatedFieldsGeneratorGroup1Instance = [[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteRepeatedFieldsGeneratorGroup1Instance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteRepeatedFieldsGeneratorGroup1Instance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasField1) {
    [output writeMessage:11 value:self.field1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasField1) {
    size_ += computeMessageSize(11, self.field1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*) parseFromData:(NSData*) data {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 builder] mergeFromData:data] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 builder] mergeFromInputStream:input] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) builder {
  return [[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder alloc] init];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) builderWithPrototype:(TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*) prototype {
  return [[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 builder] mergeFrom:prototype];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) builder {
  return [TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 builder];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) toBuilder {
  return [TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasField1) {
    [output appendFormat:@"%@%@ {\n", indent, @"field1"];
    [self.field1 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasField1) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.field1 storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"field1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 class]]) {
    return NO;
  }
  TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 *otherMessage = other;
  return
      self.hasField1 == otherMessage.hasField1 &&
      (!self.hasField1 || [self.field1 isEqual:otherMessage.field1]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasField1) {
    hashCode = hashCode * 31 + [self.field1 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder()
@property (strong) TestParsingMergeLiteRepeatedFieldsGeneratorGroup1* resultGroup1;
@end

@implementation TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder
@synthesize resultGroup1;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGroup1 = [[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGroup1;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) clear {
  self.resultGroup1 = [[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 alloc] init];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) clone {
  return [TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 builderWithPrototype:resultGroup1];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*) defaultInstance {
  return [TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 defaultInstance];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*) buildPartial {
  TestParsingMergeLiteRepeatedFieldsGeneratorGroup1* returnMe = resultGroup1;
  self.resultGroup1 = nil;
  return returnMe;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) mergeFrom:(TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*) other {
  if (other == [TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 defaultInstance]) {
    return self;
  }
  if (other.hasField1) {
    [self mergeField1:other.field1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 90: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        if (self.hasField1) {
          [subBuilder mergeFrom:self.field1];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setField1:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasField1 {
  return resultGroup1.hasField1;
}
- (TestAllTypesLite*) field1 {
  return resultGroup1.field1;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) setField1:(TestAllTypesLite*) value {
  resultGroup1.hasField1 = YES;
  resultGroup1.field1 = value;
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) setField1Builder:(TestAllTypesLiteBuilder*) builderForValue {
  return [self setField1:[builderForValue build]];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) mergeField1:(TestAllTypesLite*) value {
  if (resultGroup1.hasField1 &&
      resultGroup1.field1 != [TestAllTypesLite defaultInstance]) {
    resultGroup1.field1 =
      [[[TestAllTypesLite builderWithPrototype:resultGroup1.field1] mergeFrom:value] buildPartial];
  } else {
    resultGroup1.field1 = value;
  }
  resultGroup1.hasField1 = YES;
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder*) clearField1 {
  resultGroup1.hasField1 = NO;
  resultGroup1.field1 = [TestAllTypesLite defaultInstance];
  return self;
}
@end

@interface TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 ()
@property (strong) TestAllTypesLite* field1;
@end

@implementation TestParsingMergeLiteRepeatedFieldsGeneratorGroup2

- (BOOL) hasField1 {
  return !!hasField1_;
}
- (void) setHasField1:(BOOL) _value_ {
  hasField1_ = !!_value_;
}
@synthesize field1;
- (instancetype) init {
  if ((self = [super init])) {
    self.field1 = [TestAllTypesLite defaultInstance];
  }
  return self;
}
static TestParsingMergeLiteRepeatedFieldsGeneratorGroup2* defaultTestParsingMergeLiteRepeatedFieldsGeneratorGroup2Instance = nil;
+ (void) initialize {
  if (self == [TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 class]) {
    defaultTestParsingMergeLiteRepeatedFieldsGeneratorGroup2Instance = [[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteRepeatedFieldsGeneratorGroup2Instance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteRepeatedFieldsGeneratorGroup2Instance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasField1) {
    [output writeMessage:21 value:self.field1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasField1) {
    size_ += computeMessageSize(21, self.field1);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*) parseFromData:(NSData*) data {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 builder] mergeFromData:data] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 builder] mergeFromInputStream:input] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*)[[[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) builder {
  return [[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder alloc] init];
}
+ (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) builderWithPrototype:(TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*) prototype {
  return [[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 builder] mergeFrom:prototype];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) builder {
  return [TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 builder];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) toBuilder {
  return [TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasField1) {
    [output appendFormat:@"%@%@ {\n", indent, @"field1"];
    [self.field1 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasField1) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.field1 storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"field1"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 class]]) {
    return NO;
  }
  TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 *otherMessage = other;
  return
      self.hasField1 == otherMessage.hasField1 &&
      (!self.hasField1 || [self.field1 isEqual:otherMessage.field1]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasField1) {
    hashCode = hashCode * 31 + [self.field1 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder()
@property (strong) TestParsingMergeLiteRepeatedFieldsGeneratorGroup2* resultGroup2;
@end

@implementation TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder
@synthesize resultGroup2;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGroup2 = [[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGroup2;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) clear {
  self.resultGroup2 = [[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 alloc] init];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) clone {
  return [TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 builderWithPrototype:resultGroup2];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*) defaultInstance {
  return [TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 defaultInstance];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*) buildPartial {
  TestParsingMergeLiteRepeatedFieldsGeneratorGroup2* returnMe = resultGroup2;
  self.resultGroup2 = nil;
  return returnMe;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) mergeFrom:(TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*) other {
  if (other == [TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 defaultInstance]) {
    return self;
  }
  if (other.hasField1) {
    [self mergeField1:other.field1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 170: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        if (self.hasField1) {
          [subBuilder mergeFrom:self.field1];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setField1:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasField1 {
  return resultGroup2.hasField1;
}
- (TestAllTypesLite*) field1 {
  return resultGroup2.field1;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) setField1:(TestAllTypesLite*) value {
  resultGroup2.hasField1 = YES;
  resultGroup2.field1 = value;
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) setField1Builder:(TestAllTypesLiteBuilder*) builderForValue {
  return [self setField1:[builderForValue build]];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) mergeField1:(TestAllTypesLite*) value {
  if (resultGroup2.hasField1 &&
      resultGroup2.field1 != [TestAllTypesLite defaultInstance]) {
    resultGroup2.field1 =
      [[[TestAllTypesLite builderWithPrototype:resultGroup2.field1] mergeFrom:value] buildPartial];
  } else {
    resultGroup2.field1 = value;
  }
  resultGroup2.hasField1 = YES;
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder*) clearField1 {
  resultGroup2.hasField1 = NO;
  resultGroup2.field1 = [TestAllTypesLite defaultInstance];
  return self;
}
@end

@interface TestParsingMergeLiteRepeatedFieldsGeneratorBuilder()
@property (strong) TestParsingMergeLiteRepeatedFieldsGenerator* resultRepeatedFieldsGenerator;
@end

@implementation TestParsingMergeLiteRepeatedFieldsGeneratorBuilder
@synthesize resultRepeatedFieldsGenerator;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepeatedFieldsGenerator = [[TestParsingMergeLiteRepeatedFieldsGenerator alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepeatedFieldsGenerator;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder*) clear {
  self.resultRepeatedFieldsGenerator = [[TestParsingMergeLiteRepeatedFieldsGenerator alloc] init];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder*) clone {
  return [TestParsingMergeLiteRepeatedFieldsGenerator builderWithPrototype:resultRepeatedFieldsGenerator];
}
- (TestParsingMergeLiteRepeatedFieldsGenerator*) defaultInstance {
  return [TestParsingMergeLiteRepeatedFieldsGenerator defaultInstance];
}
- (TestParsingMergeLiteRepeatedFieldsGenerator*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMergeLiteRepeatedFieldsGenerator*) buildPartial {
  TestParsingMergeLiteRepeatedFieldsGenerator* returnMe = resultRepeatedFieldsGenerator;
  self.resultRepeatedFieldsGenerator = nil;
  return returnMe;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder*) mergeFrom:(TestParsingMergeLiteRepeatedFieldsGenerator*) other {
  if (other == [TestParsingMergeLiteRepeatedFieldsGenerator defaultInstance]) {
    return self;
  }
  if (other.field1Array.count > 0) {
    if (resultRepeatedFieldsGenerator.field1Array == nil) {
      resultRepeatedFieldsGenerator.field1Array = [[NSMutableArray alloc] initWithArray:other.field1Array];
    } else {
      [resultRepeatedFieldsGenerator.field1Array addObjectsFromArray:other.field1Array];
    }
  }
  if (other.field2Array.count > 0) {
    if (resultRepeatedFieldsGenerator.field2Array == nil) {
      resultRepeatedFieldsGenerator.field2Array = [[NSMutableArray alloc] initWithArray:other.field2Array];
    } else {
      [resultRepeatedFieldsGenerator.field2Array addObjectsFromArray:other.field2Array];
    }
  }
  if (other.field3Array.count > 0) {
    if (resultRepeatedFieldsGenerator.field3Array == nil) {
      resultRepeatedFieldsGenerator.field3Array = [[NSMutableArray alloc] initWithArray:other.field3Array];
    } else {
      [resultRepeatedFieldsGenerator.field3Array addObjectsFromArray:other.field3Array];
    }
  }
  if (other.group1Array.count > 0) {
    if (resultRepeatedFieldsGenerator.group1Array == nil) {
      resultRepeatedFieldsGenerator.group1Array = [[NSMutableArray alloc] initWithArray:other.group1Array];
    } else {
      [resultRepeatedFieldsGenerator.group1Array addObjectsFromArray:other.group1Array];
    }
  }
  if (other.group2Array.count > 0) {
    if (resultRepeatedFieldsGenerator.group2Array == nil) {
      resultRepeatedFieldsGenerator.group2Array = [[NSMutableArray alloc] initWithArray:other.group2Array];
    } else {
      [resultRepeatedFieldsGenerator.group2Array addObjectsFromArray:other.group2Array];
    }
  }
  if (other.ext1Array.count > 0) {
    if (resultRepeatedFieldsGenerator.ext1Array == nil) {
      resultRepeatedFieldsGenerator.ext1Array = [[NSMutableArray alloc] initWithArray:other.ext1Array];
    } else {
      [resultRepeatedFieldsGenerator.ext1Array addObjectsFromArray:other.ext1Array];
    }
  }
  if (other.ext2Array.count > 0) {
    if (resultRepeatedFieldsGenerator.ext2Array == nil) {
      resultRepeatedFieldsGenerator.ext2Array = [[NSMutableArray alloc] initWithArray:other.ext2Array];
    } else {
      [resultRepeatedFieldsGenerator.ext2Array addObjectsFromArray:other.ext2Array];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addField1:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addField2:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addField3:[subBuilder buildPartial]];
        break;
      }
      case 83: {
        TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder* subBuilder = [TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 builder];
        [input readGroup:10 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addGroup1:[subBuilder buildPartial]];
        break;
      }
      case 163: {
        TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder* subBuilder = [TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 builder];
        [input readGroup:20 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addGroup2:[subBuilder buildPartial]];
        break;
      }
      case 8002: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addExt1:[subBuilder buildPartial]];
        break;
      }
      case 8010: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addExt2:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)field1 {
  return resultRepeatedFieldsGenerator.field1Array;
}
- (TestAllTypesLite*)field1AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator field1AtIndex:index];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)addField1:(TestAllTypesLite*)value {
  if (resultRepeatedFieldsGenerator.field1Array == nil) {
    resultRepeatedFieldsGenerator.field1Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.field1Array addObject:value];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)setField1Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.field1Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)clearField1 {
  resultRepeatedFieldsGenerator.field1Array = nil;
  return self;
}
- (NSMutableArray *)field2 {
  return resultRepeatedFieldsGenerator.field2Array;
}
- (TestAllTypesLite*)field2AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator field2AtIndex:index];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)addField2:(TestAllTypesLite*)value {
  if (resultRepeatedFieldsGenerator.field2Array == nil) {
    resultRepeatedFieldsGenerator.field2Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.field2Array addObject:value];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)setField2Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.field2Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)clearField2 {
  resultRepeatedFieldsGenerator.field2Array = nil;
  return self;
}
- (NSMutableArray *)field3 {
  return resultRepeatedFieldsGenerator.field3Array;
}
- (TestAllTypesLite*)field3AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator field3AtIndex:index];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)addField3:(TestAllTypesLite*)value {
  if (resultRepeatedFieldsGenerator.field3Array == nil) {
    resultRepeatedFieldsGenerator.field3Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.field3Array addObject:value];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)setField3Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.field3Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)clearField3 {
  resultRepeatedFieldsGenerator.field3Array = nil;
  return self;
}
- (NSMutableArray *)group1 {
  return resultRepeatedFieldsGenerator.group1Array;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*)group1AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator group1AtIndex:index];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)addGroup1:(TestParsingMergeLiteRepeatedFieldsGeneratorGroup1*)value {
  if (resultRepeatedFieldsGenerator.group1Array == nil) {
    resultRepeatedFieldsGenerator.group1Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.group1Array addObject:value];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)setGroup1Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.group1Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)clearGroup1 {
  resultRepeatedFieldsGenerator.group1Array = nil;
  return self;
}
- (NSMutableArray *)group2 {
  return resultRepeatedFieldsGenerator.group2Array;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*)group2AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator group2AtIndex:index];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)addGroup2:(TestParsingMergeLiteRepeatedFieldsGeneratorGroup2*)value {
  if (resultRepeatedFieldsGenerator.group2Array == nil) {
    resultRepeatedFieldsGenerator.group2Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.group2Array addObject:value];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)setGroup2Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.group2Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)clearGroup2 {
  resultRepeatedFieldsGenerator.group2Array = nil;
  return self;
}
- (NSMutableArray *)ext1 {
  return resultRepeatedFieldsGenerator.ext1Array;
}
- (TestAllTypesLite*)ext1AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator ext1AtIndex:index];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)addExt1:(TestAllTypesLite*)value {
  if (resultRepeatedFieldsGenerator.ext1Array == nil) {
    resultRepeatedFieldsGenerator.ext1Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.ext1Array addObject:value];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)setExt1Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.ext1Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)clearExt1 {
  resultRepeatedFieldsGenerator.ext1Array = nil;
  return self;
}
- (NSMutableArray *)ext2 {
  return resultRepeatedFieldsGenerator.ext2Array;
}
- (TestAllTypesLite*)ext2AtIndex:(NSUInteger)index {
  return [resultRepeatedFieldsGenerator ext2AtIndex:index];
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)addExt2:(TestAllTypesLite*)value {
  if (resultRepeatedFieldsGenerator.ext2Array == nil) {
    resultRepeatedFieldsGenerator.ext2Array = [[NSMutableArray alloc]init];
  }
  [resultRepeatedFieldsGenerator.ext2Array addObject:value];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)setExt2Array:(NSArray *)array {
  resultRepeatedFieldsGenerator.ext2Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeLiteRepeatedFieldsGeneratorBuilder *)clearExt2 {
  resultRepeatedFieldsGenerator.ext2Array = nil;
  return self;
}
@end

@interface TestParsingMergeLiteOptionalGroup ()
@property (strong) TestAllTypesLite* optionalGroupAllTypes;
@end

@implementation TestParsingMergeLiteOptionalGroup

- (BOOL) hasOptionalGroupAllTypes {
  return !!hasOptionalGroupAllTypes_;
}
- (void) setHasOptionalGroupAllTypes:(BOOL) _value_ {
  hasOptionalGroupAllTypes_ = !!_value_;
}
@synthesize optionalGroupAllTypes;
- (instancetype) init {
  if ((self = [super init])) {
    self.optionalGroupAllTypes = [TestAllTypesLite defaultInstance];
  }
  return self;
}
static TestParsingMergeLiteOptionalGroup* defaultTestParsingMergeLiteOptionalGroupInstance = nil;
+ (void) initialize {
  if (self == [TestParsingMergeLiteOptionalGroup class]) {
    defaultTestParsingMergeLiteOptionalGroupInstance = [[TestParsingMergeLiteOptionalGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteOptionalGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteOptionalGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOptionalGroupAllTypes) {
    [output writeMessage:11 value:self.optionalGroupAllTypes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptionalGroupAllTypes) {
    size_ += computeMessageSize(11, self.optionalGroupAllTypes);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMergeLiteOptionalGroup*) parseFromData:(NSData*) data {
  return (TestParsingMergeLiteOptionalGroup*)[[[TestParsingMergeLiteOptionalGroup builder] mergeFromData:data] build];
}
+ (TestParsingMergeLiteOptionalGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteOptionalGroup*)[[[TestParsingMergeLiteOptionalGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteOptionalGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMergeLiteOptionalGroup*)[[[TestParsingMergeLiteOptionalGroup builder] mergeFromInputStream:input] build];
}
+ (TestParsingMergeLiteOptionalGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteOptionalGroup*)[[[TestParsingMergeLiteOptionalGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteOptionalGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMergeLiteOptionalGroup*)[[[TestParsingMergeLiteOptionalGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMergeLiteOptionalGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteOptionalGroup*)[[[TestParsingMergeLiteOptionalGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteOptionalGroupBuilder*) builder {
  return [[TestParsingMergeLiteOptionalGroupBuilder alloc] init];
}
+ (TestParsingMergeLiteOptionalGroupBuilder*) builderWithPrototype:(TestParsingMergeLiteOptionalGroup*) prototype {
  return [[TestParsingMergeLiteOptionalGroup builder] mergeFrom:prototype];
}
- (TestParsingMergeLiteOptionalGroupBuilder*) builder {
  return [TestParsingMergeLiteOptionalGroup builder];
}
- (TestParsingMergeLiteOptionalGroupBuilder*) toBuilder {
  return [TestParsingMergeLiteOptionalGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOptionalGroupAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalGroupAllTypes"];
    [self.optionalGroupAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOptionalGroupAllTypes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.optionalGroupAllTypes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"optionalGroupAllTypes"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMergeLiteOptionalGroup class]]) {
    return NO;
  }
  TestParsingMergeLiteOptionalGroup *otherMessage = other;
  return
      self.hasOptionalGroupAllTypes == otherMessage.hasOptionalGroupAllTypes &&
      (!self.hasOptionalGroupAllTypes || [self.optionalGroupAllTypes isEqual:otherMessage.optionalGroupAllTypes]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOptionalGroupAllTypes) {
    hashCode = hashCode * 31 + [self.optionalGroupAllTypes hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeLiteOptionalGroupBuilder()
@property (strong) TestParsingMergeLiteOptionalGroup* resultOptionalGroup;
@end

@implementation TestParsingMergeLiteOptionalGroupBuilder
@synthesize resultOptionalGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOptionalGroup = [[TestParsingMergeLiteOptionalGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOptionalGroup;
}
- (TestParsingMergeLiteOptionalGroupBuilder*) clear {
  self.resultOptionalGroup = [[TestParsingMergeLiteOptionalGroup alloc] init];
  return self;
}
- (TestParsingMergeLiteOptionalGroupBuilder*) clone {
  return [TestParsingMergeLiteOptionalGroup builderWithPrototype:resultOptionalGroup];
}
- (TestParsingMergeLiteOptionalGroup*) defaultInstance {
  return [TestParsingMergeLiteOptionalGroup defaultInstance];
}
- (TestParsingMergeLiteOptionalGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMergeLiteOptionalGroup*) buildPartial {
  TestParsingMergeLiteOptionalGroup* returnMe = resultOptionalGroup;
  self.resultOptionalGroup = nil;
  return returnMe;
}
- (TestParsingMergeLiteOptionalGroupBuilder*) mergeFrom:(TestParsingMergeLiteOptionalGroup*) other {
  if (other == [TestParsingMergeLiteOptionalGroup defaultInstance]) {
    return self;
  }
  if (other.hasOptionalGroupAllTypes) {
    [self mergeOptionalGroupAllTypes:other.optionalGroupAllTypes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeLiteOptionalGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeLiteOptionalGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 90: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        if (self.hasOptionalGroupAllTypes) {
          [subBuilder mergeFrom:self.optionalGroupAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroupAllTypes:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOptionalGroupAllTypes {
  return resultOptionalGroup.hasOptionalGroupAllTypes;
}
- (TestAllTypesLite*) optionalGroupAllTypes {
  return resultOptionalGroup.optionalGroupAllTypes;
}
- (TestParsingMergeLiteOptionalGroupBuilder*) setOptionalGroupAllTypes:(TestAllTypesLite*) value {
  resultOptionalGroup.hasOptionalGroupAllTypes = YES;
  resultOptionalGroup.optionalGroupAllTypes = value;
  return self;
}
- (TestParsingMergeLiteOptionalGroupBuilder*) setOptionalGroupAllTypesBuilder:(TestAllTypesLiteBuilder*) builderForValue {
  return [self setOptionalGroupAllTypes:[builderForValue build]];
}
- (TestParsingMergeLiteOptionalGroupBuilder*) mergeOptionalGroupAllTypes:(TestAllTypesLite*) value {
  if (resultOptionalGroup.hasOptionalGroupAllTypes &&
      resultOptionalGroup.optionalGroupAllTypes != [TestAllTypesLite defaultInstance]) {
    resultOptionalGroup.optionalGroupAllTypes =
      [[[TestAllTypesLite builderWithPrototype:resultOptionalGroup.optionalGroupAllTypes] mergeFrom:value] buildPartial];
  } else {
    resultOptionalGroup.optionalGroupAllTypes = value;
  }
  resultOptionalGroup.hasOptionalGroupAllTypes = YES;
  return self;
}
- (TestParsingMergeLiteOptionalGroupBuilder*) clearOptionalGroupAllTypes {
  resultOptionalGroup.hasOptionalGroupAllTypes = NO;
  resultOptionalGroup.optionalGroupAllTypes = [TestAllTypesLite defaultInstance];
  return self;
}
@end

@interface TestParsingMergeLiteRepeatedGroup ()
@property (strong) TestAllTypesLite* repeatedGroupAllTypes;
@end

@implementation TestParsingMergeLiteRepeatedGroup

- (BOOL) hasRepeatedGroupAllTypes {
  return !!hasRepeatedGroupAllTypes_;
}
- (void) setHasRepeatedGroupAllTypes:(BOOL) _value_ {
  hasRepeatedGroupAllTypes_ = !!_value_;
}
@synthesize repeatedGroupAllTypes;
- (instancetype) init {
  if ((self = [super init])) {
    self.repeatedGroupAllTypes = [TestAllTypesLite defaultInstance];
  }
  return self;
}
static TestParsingMergeLiteRepeatedGroup* defaultTestParsingMergeLiteRepeatedGroupInstance = nil;
+ (void) initialize {
  if (self == [TestParsingMergeLiteRepeatedGroup class]) {
    defaultTestParsingMergeLiteRepeatedGroupInstance = [[TestParsingMergeLiteRepeatedGroup alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteRepeatedGroupInstance;
}
- (instancetype) defaultInstance {
  return defaultTestParsingMergeLiteRepeatedGroupInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRepeatedGroupAllTypes) {
    [output writeMessage:21 value:self.repeatedGroupAllTypes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRepeatedGroupAllTypes) {
    size_ += computeMessageSize(21, self.repeatedGroupAllTypes);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestParsingMergeLiteRepeatedGroup*) parseFromData:(NSData*) data {
  return (TestParsingMergeLiteRepeatedGroup*)[[[TestParsingMergeLiteRepeatedGroup builder] mergeFromData:data] build];
}
+ (TestParsingMergeLiteRepeatedGroup*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedGroup*)[[[TestParsingMergeLiteRepeatedGroup builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedGroup*) parseFromInputStream:(NSInputStream*) input {
  return (TestParsingMergeLiteRepeatedGroup*)[[[TestParsingMergeLiteRepeatedGroup builder] mergeFromInputStream:input] build];
}
+ (TestParsingMergeLiteRepeatedGroup*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedGroup*)[[[TestParsingMergeLiteRepeatedGroup builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestParsingMergeLiteRepeatedGroup*)[[[TestParsingMergeLiteRepeatedGroup builder] mergeFromCodedInputStream:input] build];
}
+ (TestParsingMergeLiteRepeatedGroup*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestParsingMergeLiteRepeatedGroup*)[[[TestParsingMergeLiteRepeatedGroup builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestParsingMergeLiteRepeatedGroupBuilder*) builder {
  return [[TestParsingMergeLiteRepeatedGroupBuilder alloc] init];
}
+ (TestParsingMergeLiteRepeatedGroupBuilder*) builderWithPrototype:(TestParsingMergeLiteRepeatedGroup*) prototype {
  return [[TestParsingMergeLiteRepeatedGroup builder] mergeFrom:prototype];
}
- (TestParsingMergeLiteRepeatedGroupBuilder*) builder {
  return [TestParsingMergeLiteRepeatedGroup builder];
}
- (TestParsingMergeLiteRepeatedGroupBuilder*) toBuilder {
  return [TestParsingMergeLiteRepeatedGroup builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRepeatedGroupAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedGroupAllTypes"];
    [self.repeatedGroupAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRepeatedGroupAllTypes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.repeatedGroupAllTypes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"repeatedGroupAllTypes"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMergeLiteRepeatedGroup class]]) {
    return NO;
  }
  TestParsingMergeLiteRepeatedGroup *otherMessage = other;
  return
      self.hasRepeatedGroupAllTypes == otherMessage.hasRepeatedGroupAllTypes &&
      (!self.hasRepeatedGroupAllTypes || [self.repeatedGroupAllTypes isEqual:otherMessage.repeatedGroupAllTypes]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRepeatedGroupAllTypes) {
    hashCode = hashCode * 31 + [self.repeatedGroupAllTypes hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestParsingMergeLiteRepeatedGroupBuilder()
@property (strong) TestParsingMergeLiteRepeatedGroup* resultRepeatedGroup;
@end

@implementation TestParsingMergeLiteRepeatedGroupBuilder
@synthesize resultRepeatedGroup;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRepeatedGroup = [[TestParsingMergeLiteRepeatedGroup alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRepeatedGroup;
}
- (TestParsingMergeLiteRepeatedGroupBuilder*) clear {
  self.resultRepeatedGroup = [[TestParsingMergeLiteRepeatedGroup alloc] init];
  return self;
}
- (TestParsingMergeLiteRepeatedGroupBuilder*) clone {
  return [TestParsingMergeLiteRepeatedGroup builderWithPrototype:resultRepeatedGroup];
}
- (TestParsingMergeLiteRepeatedGroup*) defaultInstance {
  return [TestParsingMergeLiteRepeatedGroup defaultInstance];
}
- (TestParsingMergeLiteRepeatedGroup*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMergeLiteRepeatedGroup*) buildPartial {
  TestParsingMergeLiteRepeatedGroup* returnMe = resultRepeatedGroup;
  self.resultRepeatedGroup = nil;
  return returnMe;
}
- (TestParsingMergeLiteRepeatedGroupBuilder*) mergeFrom:(TestParsingMergeLiteRepeatedGroup*) other {
  if (other == [TestParsingMergeLiteRepeatedGroup defaultInstance]) {
    return self;
  }
  if (other.hasRepeatedGroupAllTypes) {
    [self mergeRepeatedGroupAllTypes:other.repeatedGroupAllTypes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeLiteRepeatedGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeLiteRepeatedGroupBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 170: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        if (self.hasRepeatedGroupAllTypes) {
          [subBuilder mergeFrom:self.repeatedGroupAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRepeatedGroupAllTypes:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRepeatedGroupAllTypes {
  return resultRepeatedGroup.hasRepeatedGroupAllTypes;
}
- (TestAllTypesLite*) repeatedGroupAllTypes {
  return resultRepeatedGroup.repeatedGroupAllTypes;
}
- (TestParsingMergeLiteRepeatedGroupBuilder*) setRepeatedGroupAllTypes:(TestAllTypesLite*) value {
  resultRepeatedGroup.hasRepeatedGroupAllTypes = YES;
  resultRepeatedGroup.repeatedGroupAllTypes = value;
  return self;
}
- (TestParsingMergeLiteRepeatedGroupBuilder*) setRepeatedGroupAllTypesBuilder:(TestAllTypesLiteBuilder*) builderForValue {
  return [self setRepeatedGroupAllTypes:[builderForValue build]];
}
- (TestParsingMergeLiteRepeatedGroupBuilder*) mergeRepeatedGroupAllTypes:(TestAllTypesLite*) value {
  if (resultRepeatedGroup.hasRepeatedGroupAllTypes &&
      resultRepeatedGroup.repeatedGroupAllTypes != [TestAllTypesLite defaultInstance]) {
    resultRepeatedGroup.repeatedGroupAllTypes =
      [[[TestAllTypesLite builderWithPrototype:resultRepeatedGroup.repeatedGroupAllTypes] mergeFrom:value] buildPartial];
  } else {
    resultRepeatedGroup.repeatedGroupAllTypes = value;
  }
  resultRepeatedGroup.hasRepeatedGroupAllTypes = YES;
  return self;
}
- (TestParsingMergeLiteRepeatedGroupBuilder*) clearRepeatedGroupAllTypes {
  resultRepeatedGroup.hasRepeatedGroupAllTypes = NO;
  resultRepeatedGroup.repeatedGroupAllTypes = [TestAllTypesLite defaultInstance];
  return self;
}
@end

@interface TestParsingMergeLiteBuilder()
@property (strong) TestParsingMergeLite* resultTestParsingMergeLite;
@end

@implementation TestParsingMergeLiteBuilder
@synthesize resultTestParsingMergeLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestParsingMergeLite = [[TestParsingMergeLite alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return resultTestParsingMergeLite;
}
- (TestParsingMergeLiteBuilder*) clear {
  self.resultTestParsingMergeLite = [[TestParsingMergeLite alloc] init];
  return self;
}
- (TestParsingMergeLiteBuilder*) clone {
  return [TestParsingMergeLite builderWithPrototype:resultTestParsingMergeLite];
}
- (TestParsingMergeLite*) defaultInstance {
  return [TestParsingMergeLite defaultInstance];
}
- (TestParsingMergeLite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMergeLite*) buildPartial {
  TestParsingMergeLite* returnMe = resultTestParsingMergeLite;
  self.resultTestParsingMergeLite = nil;
  return returnMe;
}
- (TestParsingMergeLiteBuilder*) mergeFrom:(TestParsingMergeLite*) other {
  if (other == [TestParsingMergeLite defaultInstance]) {
    return self;
  }
  if (other.hasRequiredAllTypes) {
    [self mergeRequiredAllTypes:other.requiredAllTypes];
  }
  if (other.hasOptionalAllTypes) {
    [self mergeOptionalAllTypes:other.optionalAllTypes];
  }
  if (other.repeatedAllTypesArray.count > 0) {
    if (resultTestParsingMergeLite.repeatedAllTypesArray == nil) {
      resultTestParsingMergeLite.repeatedAllTypesArray = [[NSMutableArray alloc] initWithArray:other.repeatedAllTypesArray];
    } else {
      [resultTestParsingMergeLite.repeatedAllTypesArray addObjectsFromArray:other.repeatedAllTypesArray];
    }
  }
  if (other.hasOptionalGroup) {
    [self mergeOptionalGroup:other.optionalGroup];
  }
  if (other.repeatedGroupArray.count > 0) {
    if (resultTestParsingMergeLite.repeatedGroupArray == nil) {
      resultTestParsingMergeLite.repeatedGroupArray = [[NSMutableArray alloc] initWithArray:other.repeatedGroupArray];
    } else {
      [resultTestParsingMergeLite.repeatedGroupArray addObjectsFromArray:other.repeatedGroupArray];
    }
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestParsingMergeLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestParsingMergeLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        if (self.hasRequiredAllTypes) {
          [subBuilder mergeFrom:self.requiredAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequiredAllTypes:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        if (self.hasOptionalAllTypes) {
          [subBuilder mergeFrom:self.optionalAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalAllTypes:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        TestAllTypesLiteBuilder* subBuilder = [TestAllTypesLite builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedAllTypes:[subBuilder buildPartial]];
        break;
      }
      case 83: {
        TestParsingMergeLiteOptionalGroupBuilder* subBuilder = [TestParsingMergeLiteOptionalGroup builder];
        if (self.hasOptionalGroup) {
          [subBuilder mergeFrom:self.optionalGroup];
        }
        [input readGroup:10 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroup:[subBuilder buildPartial]];
        break;
      }
      case 163: {
        TestParsingMergeLiteRepeatedGroupBuilder* subBuilder = [TestParsingMergeLiteRepeatedGroup builder];
        [input readGroup:20 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedGroup:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRequiredAllTypes {
  return resultTestParsingMergeLite.hasRequiredAllTypes;
}
- (TestAllTypesLite*) requiredAllTypes {
  return resultTestParsingMergeLite.requiredAllTypes;
}
- (TestParsingMergeLiteBuilder*) setRequiredAllTypes:(TestAllTypesLite*) value {
  resultTestParsingMergeLite.hasRequiredAllTypes = YES;
  resultTestParsingMergeLite.requiredAllTypes = value;
  return self;
}
- (TestParsingMergeLiteBuilder*) setRequiredAllTypesBuilder:(TestAllTypesLiteBuilder*) builderForValue {
  return [self setRequiredAllTypes:[builderForValue build]];
}
- (TestParsingMergeLiteBuilder*) mergeRequiredAllTypes:(TestAllTypesLite*) value {
  if (resultTestParsingMergeLite.hasRequiredAllTypes &&
      resultTestParsingMergeLite.requiredAllTypes != [TestAllTypesLite defaultInstance]) {
    resultTestParsingMergeLite.requiredAllTypes =
      [[[TestAllTypesLite builderWithPrototype:resultTestParsingMergeLite.requiredAllTypes] mergeFrom:value] buildPartial];
  } else {
    resultTestParsingMergeLite.requiredAllTypes = value;
  }
  resultTestParsingMergeLite.hasRequiredAllTypes = YES;
  return self;
}
- (TestParsingMergeLiteBuilder*) clearRequiredAllTypes {
  resultTestParsingMergeLite.hasRequiredAllTypes = NO;
  resultTestParsingMergeLite.requiredAllTypes = [TestAllTypesLite defaultInstance];
  return self;
}
- (BOOL) hasOptionalAllTypes {
  return resultTestParsingMergeLite.hasOptionalAllTypes;
}
- (TestAllTypesLite*) optionalAllTypes {
  return resultTestParsingMergeLite.optionalAllTypes;
}
- (TestParsingMergeLiteBuilder*) setOptionalAllTypes:(TestAllTypesLite*) value {
  resultTestParsingMergeLite.hasOptionalAllTypes = YES;
  resultTestParsingMergeLite.optionalAllTypes = value;
  return self;
}
- (TestParsingMergeLiteBuilder*) setOptionalAllTypesBuilder:(TestAllTypesLiteBuilder*) builderForValue {
  return [self setOptionalAllTypes:[builderForValue build]];
}
- (TestParsingMergeLiteBuilder*) mergeOptionalAllTypes:(TestAllTypesLite*) value {
  if (resultTestParsingMergeLite.hasOptionalAllTypes &&
      resultTestParsingMergeLite.optionalAllTypes != [TestAllTypesLite defaultInstance]) {
    resultTestParsingMergeLite.optionalAllTypes =
      [[[TestAllTypesLite builderWithPrototype:resultTestParsingMergeLite.optionalAllTypes] mergeFrom:value] buildPartial];
  } else {
    resultTestParsingMergeLite.optionalAllTypes = value;
  }
  resultTestParsingMergeLite.hasOptionalAllTypes = YES;
  return self;
}
- (TestParsingMergeLiteBuilder*) clearOptionalAllTypes {
  resultTestParsingMergeLite.hasOptionalAllTypes = NO;
  resultTestParsingMergeLite.optionalAllTypes = [TestAllTypesLite defaultInstance];
  return self;
}
- (NSMutableArray *)repeatedAllTypes {
  return resultTestParsingMergeLite.repeatedAllTypesArray;
}
- (TestAllTypesLite*)repeatedAllTypesAtIndex:(NSUInteger)index {
  return [resultTestParsingMergeLite repeatedAllTypesAtIndex:index];
}
- (TestParsingMergeLiteBuilder *)addRepeatedAllTypes:(TestAllTypesLite*)value {
  if (resultTestParsingMergeLite.repeatedAllTypesArray == nil) {
    resultTestParsingMergeLite.repeatedAllTypesArray = [[NSMutableArray alloc]init];
  }
  [resultTestParsingMergeLite.repeatedAllTypesArray addObject:value];
  return self;
}
- (TestParsingMergeLiteBuilder *)setRepeatedAllTypesArray:(NSArray *)array {
  resultTestParsingMergeLite.repeatedAllTypesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeLiteBuilder *)clearRepeatedAllTypes {
  resultTestParsingMergeLite.repeatedAllTypesArray = nil;
  return self;
}
- (BOOL) hasOptionalGroup {
  return resultTestParsingMergeLite.hasOptionalGroup;
}
- (TestParsingMergeLiteOptionalGroup*) optionalGroup {
  return resultTestParsingMergeLite.optionalGroup;
}
- (TestParsingMergeLiteBuilder*) setOptionalGroup:(TestParsingMergeLiteOptionalGroup*) value {
  resultTestParsingMergeLite.hasOptionalGroup = YES;
  resultTestParsingMergeLite.optionalGroup = value;
  return self;
}
- (TestParsingMergeLiteBuilder*) setOptionalGroupBuilder:(TestParsingMergeLiteOptionalGroupBuilder*) builderForValue {
  return [self setOptionalGroup:[builderForValue build]];
}
- (TestParsingMergeLiteBuilder*) mergeOptionalGroup:(TestParsingMergeLiteOptionalGroup*) value {
  if (resultTestParsingMergeLite.hasOptionalGroup &&
      resultTestParsingMergeLite.optionalGroup != [TestParsingMergeLiteOptionalGroup defaultInstance]) {
    resultTestParsingMergeLite.optionalGroup =
      [[[TestParsingMergeLiteOptionalGroup builderWithPrototype:resultTestParsingMergeLite.optionalGroup] mergeFrom:value] buildPartial];
  } else {
    resultTestParsingMergeLite.optionalGroup = value;
  }
  resultTestParsingMergeLite.hasOptionalGroup = YES;
  return self;
}
- (TestParsingMergeLiteBuilder*) clearOptionalGroup {
  resultTestParsingMergeLite.hasOptionalGroup = NO;
  resultTestParsingMergeLite.optionalGroup = [TestParsingMergeLiteOptionalGroup defaultInstance];
  return self;
}
- (NSMutableArray *)repeatedGroup {
  return resultTestParsingMergeLite.repeatedGroupArray;
}
- (TestParsingMergeLiteRepeatedGroup*)repeatedGroupAtIndex:(NSUInteger)index {
  return [resultTestParsingMergeLite repeatedGroupAtIndex:index];
}
- (TestParsingMergeLiteBuilder *)addRepeatedGroup:(TestParsingMergeLiteRepeatedGroup*)value {
  if (resultTestParsingMergeLite.repeatedGroupArray == nil) {
    resultTestParsingMergeLite.repeatedGroupArray = [[NSMutableArray alloc]init];
  }
  [resultTestParsingMergeLite.repeatedGroupArray addObject:value];
  return self;
}
- (TestParsingMergeLiteBuilder *)setRepeatedGroupArray:(NSArray *)array {
  resultTestParsingMergeLite.repeatedGroupArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestParsingMergeLiteBuilder *)clearRepeatedGroup {
  resultTestParsingMergeLite.repeatedGroupArray = nil;
  return self;
}
@end

@interface TestEmptyMessageLite ()
@end

@implementation TestEmptyMessageLite

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestEmptyMessageLite* defaultTestEmptyMessageLiteInstance = nil;
+ (void) initialize {
  if (self == [TestEmptyMessageLite class]) {
    defaultTestEmptyMessageLiteInstance = [[TestEmptyMessageLite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestEmptyMessageLiteInstance;
}
- (instancetype) defaultInstance {
  return defaultTestEmptyMessageLiteInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestEmptyMessageLite*) parseFromData:(NSData*) data {
  return (TestEmptyMessageLite*)[[[TestEmptyMessageLite builder] mergeFromData:data] build];
}
+ (TestEmptyMessageLite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessageLite*)[[[TestEmptyMessageLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessageLite*) parseFromInputStream:(NSInputStream*) input {
  return (TestEmptyMessageLite*)[[[TestEmptyMessageLite builder] mergeFromInputStream:input] build];
}
+ (TestEmptyMessageLite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessageLite*)[[[TestEmptyMessageLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessageLite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestEmptyMessageLite*)[[[TestEmptyMessageLite builder] mergeFromCodedInputStream:input] build];
}
+ (TestEmptyMessageLite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessageLite*)[[[TestEmptyMessageLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessageLiteBuilder*) builder {
  return [[TestEmptyMessageLiteBuilder alloc] init];
}
+ (TestEmptyMessageLiteBuilder*) builderWithPrototype:(TestEmptyMessageLite*) prototype {
  return [[TestEmptyMessageLite builder] mergeFrom:prototype];
}
- (TestEmptyMessageLiteBuilder*) builder {
  return [TestEmptyMessageLite builder];
}
- (TestEmptyMessageLiteBuilder*) toBuilder {
  return [TestEmptyMessageLite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestEmptyMessageLite class]]) {
    return NO;
  }
  TestEmptyMessageLite *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestEmptyMessageLiteBuilder()
@property (strong) TestEmptyMessageLite* resultTestEmptyMessageLite;
@end

@implementation TestEmptyMessageLiteBuilder
@synthesize resultTestEmptyMessageLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestEmptyMessageLite = [[TestEmptyMessageLite alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestEmptyMessageLite;
}
- (TestEmptyMessageLiteBuilder*) clear {
  self.resultTestEmptyMessageLite = [[TestEmptyMessageLite alloc] init];
  return self;
}
- (TestEmptyMessageLiteBuilder*) clone {
  return [TestEmptyMessageLite builderWithPrototype:resultTestEmptyMessageLite];
}
- (TestEmptyMessageLite*) defaultInstance {
  return [TestEmptyMessageLite defaultInstance];
}
- (TestEmptyMessageLite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestEmptyMessageLite*) buildPartial {
  TestEmptyMessageLite* returnMe = resultTestEmptyMessageLite;
  self.resultTestEmptyMessageLite = nil;
  return returnMe;
}
- (TestEmptyMessageLiteBuilder*) mergeFrom:(TestEmptyMessageLite*) other {
  if (other == [TestEmptyMessageLite defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestEmptyMessageLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestEmptyMessageLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface TestEmptyMessageWithExtensionsLite ()
@end

@implementation TestEmptyMessageWithExtensionsLite

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static TestEmptyMessageWithExtensionsLite* defaultTestEmptyMessageWithExtensionsLiteInstance = nil;
+ (void) initialize {
  if (self == [TestEmptyMessageWithExtensionsLite class]) {
    defaultTestEmptyMessageWithExtensionsLiteInstance = [[TestEmptyMessageWithExtensionsLite alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestEmptyMessageWithExtensionsLiteInstance;
}
- (instancetype) defaultInstance {
  return defaultTestEmptyMessageWithExtensionsLiteInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:1
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestEmptyMessageWithExtensionsLite*) parseFromData:(NSData*) data {
  return (TestEmptyMessageWithExtensionsLite*)[[[TestEmptyMessageWithExtensionsLite builder] mergeFromData:data] build];
}
+ (TestEmptyMessageWithExtensionsLite*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessageWithExtensionsLite*)[[[TestEmptyMessageWithExtensionsLite builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessageWithExtensionsLite*) parseFromInputStream:(NSInputStream*) input {
  return (TestEmptyMessageWithExtensionsLite*)[[[TestEmptyMessageWithExtensionsLite builder] mergeFromInputStream:input] build];
}
+ (TestEmptyMessageWithExtensionsLite*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessageWithExtensionsLite*)[[[TestEmptyMessageWithExtensionsLite builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessageWithExtensionsLite*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestEmptyMessageWithExtensionsLite*)[[[TestEmptyMessageWithExtensionsLite builder] mergeFromCodedInputStream:input] build];
}
+ (TestEmptyMessageWithExtensionsLite*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestEmptyMessageWithExtensionsLite*)[[[TestEmptyMessageWithExtensionsLite builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestEmptyMessageWithExtensionsLiteBuilder*) builder {
  return [[TestEmptyMessageWithExtensionsLiteBuilder alloc] init];
}
+ (TestEmptyMessageWithExtensionsLiteBuilder*) builderWithPrototype:(TestEmptyMessageWithExtensionsLite*) prototype {
  return [[TestEmptyMessageWithExtensionsLite builder] mergeFrom:prototype];
}
- (TestEmptyMessageWithExtensionsLiteBuilder*) builder {
  return [TestEmptyMessageWithExtensionsLite builder];
}
- (TestEmptyMessageWithExtensionsLiteBuilder*) toBuilder {
  return [TestEmptyMessageWithExtensionsLite builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestEmptyMessageWithExtensionsLite class]]) {
    return NO;
  }
  TestEmptyMessageWithExtensionsLite *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestEmptyMessageWithExtensionsLiteBuilder()
@property (strong) TestEmptyMessageWithExtensionsLite* resultTestEmptyMessageWithExtensionsLite;
@end

@implementation TestEmptyMessageWithExtensionsLiteBuilder
@synthesize resultTestEmptyMessageWithExtensionsLite;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestEmptyMessageWithExtensionsLite = [[TestEmptyMessageWithExtensionsLite alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return resultTestEmptyMessageWithExtensionsLite;
}
- (TestEmptyMessageWithExtensionsLiteBuilder*) clear {
  self.resultTestEmptyMessageWithExtensionsLite = [[TestEmptyMessageWithExtensionsLite alloc] init];
  return self;
}
- (TestEmptyMessageWithExtensionsLiteBuilder*) clone {
  return [TestEmptyMessageWithExtensionsLite builderWithPrototype:resultTestEmptyMessageWithExtensionsLite];
}
- (TestEmptyMessageWithExtensionsLite*) defaultInstance {
  return [TestEmptyMessageWithExtensionsLite defaultInstance];
}
- (TestEmptyMessageWithExtensionsLite*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestEmptyMessageWithExtensionsLite*) buildPartial {
  TestEmptyMessageWithExtensionsLite* returnMe = resultTestEmptyMessageWithExtensionsLite;
  self.resultTestEmptyMessageWithExtensionsLite = nil;
  return returnMe;
}
- (TestEmptyMessageWithExtensionsLiteBuilder*) mergeFrom:(TestEmptyMessageWithExtensionsLite*) other {
  if (other == [TestEmptyMessageWithExtensionsLite defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestEmptyMessageWithExtensionsLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestEmptyMessageWithExtensionsLiteBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end


// @@protoc_insertion_point(global_scope)
