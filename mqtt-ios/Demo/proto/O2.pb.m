// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "O2.pb.h"
// @@protoc_insertion_point(imports)

@implementation O2Root
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [O2Root class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Header ()
@property UInt32 type;
@property UInt32 length;
@end

@implementation Header

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasLength {
  return !!hasLength_;
}
- (void) setHasLength:(BOOL) _value_ {
  hasLength_ = !!_value_;
}
@synthesize length;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.length = 0;
  }
  return self;
}
static Header* defaultHeaderInstance = nil;
+ (void) initialize {
  if (self == [Header class]) {
    defaultHeaderInstance = [[Header alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultHeaderInstance;
}
- (instancetype) defaultInstance {
  return defaultHeaderInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasLength) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeUInt32:1 value:self.type];
  }
  if (self.hasLength) {
    [output writeUInt32:2 value:self.length];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeUInt32Size(1, self.type);
  }
  if (self.hasLength) {
    size_ += computeUInt32Size(2, self.length);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Header*) parseFromData:(NSData*) data {
  return (Header*)[[[Header builder] mergeFromData:data] build];
}
+ (Header*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Header*)[[[Header builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Header*) parseFromInputStream:(NSInputStream*) input {
  return (Header*)[[[Header builder] mergeFromInputStream:input] build];
}
+ (Header*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Header*)[[[Header builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Header*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Header*)[[[Header builder] mergeFromCodedInputStream:input] build];
}
+ (Header*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Header*)[[[Header builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeaderBuilder*) builder {
  return [[HeaderBuilder alloc] init];
}
+ (HeaderBuilder*) builderWithPrototype:(Header*) prototype {
  return [[Header builder] mergeFrom:prototype];
}
- (HeaderBuilder*) builder {
  return [Header builder];
}
- (HeaderBuilder*) toBuilder {
  return [Header builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasLength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"length", [NSNumber numberWithInteger:self.length]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasLength) {
    [dictionary setObject: [NSNumber numberWithInteger:self.length] forKey: @"length"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Header class]]) {
    return NO;
  }
  Header *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasLength == otherMessage.hasLength &&
      (!self.hasLength || self.length == otherMessage.length) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasLength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.length] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HeaderBuilder()
@property (strong) Header* resultHeader;
@end

@implementation HeaderBuilder
@synthesize resultHeader;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHeader = [[Header alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHeader;
}
- (HeaderBuilder*) clear {
  self.resultHeader = [[Header alloc] init];
  return self;
}
- (HeaderBuilder*) clone {
  return [Header builderWithPrototype:resultHeader];
}
- (Header*) defaultInstance {
  return [Header defaultInstance];
}
- (Header*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Header*) buildPartial {
  Header* returnMe = resultHeader;
  self.resultHeader = nil;
  return returnMe;
}
- (HeaderBuilder*) mergeFrom:(Header*) other {
  if (other == [Header defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasLength) {
    [self setLength:other.length];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readUInt32]];
        break;
      }
      case 16: {
        [self setLength:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultHeader.hasType;
}
- (UInt32) type {
  return resultHeader.type;
}
- (HeaderBuilder*) setType:(UInt32) value {
  resultHeader.hasType = YES;
  resultHeader.type = value;
  return self;
}
- (HeaderBuilder*) clearType {
  resultHeader.hasType = NO;
  resultHeader.type = 0;
  return self;
}
- (BOOL) hasLength {
  return resultHeader.hasLength;
}
- (UInt32) length {
  return resultHeader.length;
}
- (HeaderBuilder*) setLength:(UInt32) value {
  resultHeader.hasLength = YES;
  resultHeader.length = value;
  return self;
}
- (HeaderBuilder*) clearLength {
  resultHeader.hasLength = NO;
  resultHeader.length = 0;
  return self;
}
@end

@interface Body ()
@property UInt32 fromUserId;
@property UInt32 toUserId;
@property (strong) NSString* content;
@property (strong) NSData* buffer;
@property SInt32 second;
@end

@implementation Body

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasBuffer {
  return !!hasBuffer_;
}
- (void) setHasBuffer:(BOOL) _value_ {
  hasBuffer_ = !!_value_;
}
@synthesize buffer;
- (BOOL) hasSecond {
  return !!hasSecond_;
}
- (void) setHasSecond:(BOOL) _value_ {
  hasSecond_ = !!_value_;
}
@synthesize second;
- (instancetype) init {
  if ((self = [super init])) {
    self.fromUserId = 0;
    self.toUserId = 0;
    self.content = @"";
    self.buffer = [NSData data];
    self.second = 0;
  }
  return self;
}
static Body* defaultBodyInstance = nil;
+ (void) initialize {
  if (self == [Body class]) {
    defaultBodyInstance = [[Body alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBodyInstance;
}
- (instancetype) defaultInstance {
  return defaultBodyInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeUInt32:1 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeUInt32:2 value:self.toUserId];
  }
  if (self.hasContent) {
    [output writeString:3 value:self.content];
  }
  if (self.hasBuffer) {
    [output writeData:4 value:self.buffer];
  }
  if (self.hasSecond) {
    [output writeInt32:5 value:self.second];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(1, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeUInt32Size(2, self.toUserId);
  }
  if (self.hasContent) {
    size_ += computeStringSize(3, self.content);
  }
  if (self.hasBuffer) {
    size_ += computeDataSize(4, self.buffer);
  }
  if (self.hasSecond) {
    size_ += computeInt32Size(5, self.second);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Body*) parseFromData:(NSData*) data {
  return (Body*)[[[Body builder] mergeFromData:data] build];
}
+ (Body*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Body*)[[[Body builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Body*) parseFromInputStream:(NSInputStream*) input {
  return (Body*)[[[Body builder] mergeFromInputStream:input] build];
}
+ (Body*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Body*)[[[Body builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Body*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Body*)[[[Body builder] mergeFromCodedInputStream:input] build];
}
+ (Body*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Body*)[[[Body builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BodyBuilder*) builder {
  return [[BodyBuilder alloc] init];
}
+ (BodyBuilder*) builderWithPrototype:(Body*) prototype {
  return [[Body builder] mergeFrom:prototype];
}
- (BodyBuilder*) builder {
  return [Body builder];
}
- (BodyBuilder*) toBuilder {
  return [Body builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithInteger:self.toUserId]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasBuffer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"buffer", self.buffer];
  }
  if (self.hasSecond) {
    [output appendFormat:@"%@%@: %@\n", indent, @"second", [NSNumber numberWithInteger:self.second]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  if (self.hasBuffer) {
    [dictionary setObject: self.buffer forKey: @"buffer"];
  }
  if (self.hasSecond) {
    [dictionary setObject: [NSNumber numberWithInteger:self.second] forKey: @"second"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Body class]]) {
    return NO;
  }
  Body *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasBuffer == otherMessage.hasBuffer &&
      (!self.hasBuffer || [self.buffer isEqual:otherMessage.buffer]) &&
      self.hasSecond == otherMessage.hasSecond &&
      (!self.hasSecond || self.second == otherMessage.second) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.toUserId] hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasBuffer) {
    hashCode = hashCode * 31 + [self.buffer hash];
  }
  if (self.hasSecond) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.second] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BodyBuilder()
@property (strong) Body* resultBody;
@end

@implementation BodyBuilder
@synthesize resultBody;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBody = [[Body alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBody;
}
- (BodyBuilder*) clear {
  self.resultBody = [[Body alloc] init];
  return self;
}
- (BodyBuilder*) clone {
  return [Body builderWithPrototype:resultBody];
}
- (Body*) defaultInstance {
  return [Body defaultInstance];
}
- (Body*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Body*) buildPartial {
  Body* returnMe = resultBody;
  self.resultBody = nil;
  return returnMe;
}
- (BodyBuilder*) mergeFrom:(Body*) other {
  if (other == [Body defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasBuffer) {
    [self setBuffer:other.buffer];
  }
  if (other.hasSecond) {
    [self setSecond:other.second];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BodyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BodyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setToUserId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setContent:[input readString]];
        break;
      }
      case 34: {
        [self setBuffer:[input readData]];
        break;
      }
      case 40: {
        [self setSecond:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return resultBody.hasFromUserId;
}
- (UInt32) fromUserId {
  return resultBody.fromUserId;
}
- (BodyBuilder*) setFromUserId:(UInt32) value {
  resultBody.hasFromUserId = YES;
  resultBody.fromUserId = value;
  return self;
}
- (BodyBuilder*) clearFromUserId {
  resultBody.hasFromUserId = NO;
  resultBody.fromUserId = 0;
  return self;
}
- (BOOL) hasToUserId {
  return resultBody.hasToUserId;
}
- (UInt32) toUserId {
  return resultBody.toUserId;
}
- (BodyBuilder*) setToUserId:(UInt32) value {
  resultBody.hasToUserId = YES;
  resultBody.toUserId = value;
  return self;
}
- (BodyBuilder*) clearToUserId {
  resultBody.hasToUserId = NO;
  resultBody.toUserId = 0;
  return self;
}
- (BOOL) hasContent {
  return resultBody.hasContent;
}
- (NSString*) content {
  return resultBody.content;
}
- (BodyBuilder*) setContent:(NSString*) value {
  resultBody.hasContent = YES;
  resultBody.content = value;
  return self;
}
- (BodyBuilder*) clearContent {
  resultBody.hasContent = NO;
  resultBody.content = @"";
  return self;
}
- (BOOL) hasBuffer {
  return resultBody.hasBuffer;
}
- (NSData*) buffer {
  return resultBody.buffer;
}
- (BodyBuilder*) setBuffer:(NSData*) value {
  resultBody.hasBuffer = YES;
  resultBody.buffer = value;
  return self;
}
- (BodyBuilder*) clearBuffer {
  resultBody.hasBuffer = NO;
  resultBody.buffer = [NSData data];
  return self;
}
- (BOOL) hasSecond {
  return resultBody.hasSecond;
}
- (SInt32) second {
  return resultBody.second;
}
- (BodyBuilder*) setSecond:(SInt32) value {
  resultBody.hasSecond = YES;
  resultBody.second = value;
  return self;
}
- (BodyBuilder*) clearSecond {
  resultBody.hasSecond = NO;
  resultBody.second = 0;
  return self;
}
@end

@interface O2Msg ()
@property (strong) Header* header;
@property (strong) Body* body;
@end

@implementation O2Msg

- (BOOL) hasHeader {
  return !!hasHeader_;
}
- (void) setHasHeader:(BOOL) _value_ {
  hasHeader_ = !!_value_;
}
@synthesize header;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (instancetype) init {
  if ((self = [super init])) {
    self.header = [Header defaultInstance];
    self.body = [Body defaultInstance];
  }
  return self;
}
static O2Msg* defaultO2MsgInstance = nil;
+ (void) initialize {
  if (self == [O2Msg class]) {
    defaultO2MsgInstance = [[O2Msg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultO2MsgInstance;
}
- (instancetype) defaultInstance {
  return defaultO2MsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasHeader) {
    return NO;
  }
  if (!self.hasBody) {
    return NO;
  }
  if (!self.header.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHeader) {
    [output writeMessage:1 value:self.header];
  }
  if (self.hasBody) {
    [output writeMessage:2 value:self.body];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasHeader) {
    size_ += computeMessageSize(1, self.header);
  }
  if (self.hasBody) {
    size_ += computeMessageSize(2, self.body);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (O2Msg*) parseFromData:(NSData*) data {
  return (O2Msg*)[[[O2Msg builder] mergeFromData:data] build];
}
+ (O2Msg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (O2Msg*)[[[O2Msg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (O2Msg*) parseFromInputStream:(NSInputStream*) input {
  return (O2Msg*)[[[O2Msg builder] mergeFromInputStream:input] build];
}
+ (O2Msg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (O2Msg*)[[[O2Msg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (O2Msg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (O2Msg*)[[[O2Msg builder] mergeFromCodedInputStream:input] build];
}
+ (O2Msg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (O2Msg*)[[[O2Msg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (O2MsgBuilder*) builder {
  return [[O2MsgBuilder alloc] init];
}
+ (O2MsgBuilder*) builderWithPrototype:(O2Msg*) prototype {
  return [[O2Msg builder] mergeFrom:prototype];
}
- (O2MsgBuilder*) builder {
  return [O2Msg builder];
}
- (O2MsgBuilder*) toBuilder {
  return [O2Msg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasHeader) {
    [output appendFormat:@"%@%@ {\n", indent, @"header"];
    [self.header writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@ {\n", indent, @"body"];
    [self.body writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasHeader) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.header storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"header"];
  }
  if (self.hasBody) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.body storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"body"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[O2Msg class]]) {
    return NO;
  }
  O2Msg *otherMessage = other;
  return
      self.hasHeader == otherMessage.hasHeader &&
      (!self.hasHeader || [self.header isEqual:otherMessage.header]) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasHeader) {
    hashCode = hashCode * 31 + [self.header hash];
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface O2MsgBuilder()
@property (strong) O2Msg* resultO2Msg;
@end

@implementation O2MsgBuilder
@synthesize resultO2Msg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultO2Msg = [[O2Msg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultO2Msg;
}
- (O2MsgBuilder*) clear {
  self.resultO2Msg = [[O2Msg alloc] init];
  return self;
}
- (O2MsgBuilder*) clone {
  return [O2Msg builderWithPrototype:resultO2Msg];
}
- (O2Msg*) defaultInstance {
  return [O2Msg defaultInstance];
}
- (O2Msg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (O2Msg*) buildPartial {
  O2Msg* returnMe = resultO2Msg;
  self.resultO2Msg = nil;
  return returnMe;
}
- (O2MsgBuilder*) mergeFrom:(O2Msg*) other {
  if (other == [O2Msg defaultInstance]) {
    return self;
  }
  if (other.hasHeader) {
    [self mergeHeader:other.header];
  }
  if (other.hasBody) {
    [self mergeBody:other.body];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (O2MsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (O2MsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        HeaderBuilder* subBuilder = [Header builder];
        if (self.hasHeader) {
          [subBuilder mergeFrom:self.header];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHeader:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        BodyBuilder* subBuilder = [Body builder];
        if (self.hasBody) {
          [subBuilder mergeFrom:self.body];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBody:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasHeader {
  return resultO2Msg.hasHeader;
}
- (Header*) header {
  return resultO2Msg.header;
}
- (O2MsgBuilder*) setHeader:(Header*) value {
  resultO2Msg.hasHeader = YES;
  resultO2Msg.header = value;
  return self;
}
- (O2MsgBuilder*) setHeaderBuilder:(HeaderBuilder*) builderForValue {
  return [self setHeader:[builderForValue build]];
}
- (O2MsgBuilder*) mergeHeader:(Header*) value {
  if (resultO2Msg.hasHeader &&
      resultO2Msg.header != [Header defaultInstance]) {
    resultO2Msg.header =
      [[[Header builderWithPrototype:resultO2Msg.header] mergeFrom:value] buildPartial];
  } else {
    resultO2Msg.header = value;
  }
  resultO2Msg.hasHeader = YES;
  return self;
}
- (O2MsgBuilder*) clearHeader {
  resultO2Msg.hasHeader = NO;
  resultO2Msg.header = [Header defaultInstance];
  return self;
}
- (BOOL) hasBody {
  return resultO2Msg.hasBody;
}
- (Body*) body {
  return resultO2Msg.body;
}
- (O2MsgBuilder*) setBody:(Body*) value {
  resultO2Msg.hasBody = YES;
  resultO2Msg.body = value;
  return self;
}
- (O2MsgBuilder*) setBodyBuilder:(BodyBuilder*) builderForValue {
  return [self setBody:[builderForValue build]];
}
- (O2MsgBuilder*) mergeBody:(Body*) value {
  if (resultO2Msg.hasBody &&
      resultO2Msg.body != [Body defaultInstance]) {
    resultO2Msg.body =
      [[[Body builderWithPrototype:resultO2Msg.body] mergeFrom:value] buildPartial];
  } else {
    resultO2Msg.body = value;
  }
  resultO2Msg.hasBody = YES;
  return self;
}
- (O2MsgBuilder*) clearBody {
  resultO2Msg.hasBody = NO;
  resultO2Msg.body = [Body defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
